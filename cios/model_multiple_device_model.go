/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleDeviceModel struct for MultipleDeviceModel
type MultipleDeviceModel struct {
	Total int64 `json:"total"`
	Models []DeviceModel `json:"models"`
}

// NewMultipleDeviceModel instantiates a new MultipleDeviceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleDeviceModel(total int64, models []DeviceModel, ) *MultipleDeviceModel {
	this := MultipleDeviceModel{}
	this.Total = total
	this.Models = models
	return &this
}

// NewMultipleDeviceModelWithDefaults instantiates a new MultipleDeviceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleDeviceModelWithDefaults() *MultipleDeviceModel {
	this := MultipleDeviceModel{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleDeviceModel) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleDeviceModel) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleDeviceModel) SetTotal(v int64) {
	o.Total = v
}

// GetModels returns the Models field value
func (o *MultipleDeviceModel) GetModels() []DeviceModel {
	if o == nil  {
		var ret []DeviceModel
		return ret
	}

	return o.Models
}

// GetModelsOk returns a tuple with the Models field value
// and a boolean to check if the value has been set.
func (o *MultipleDeviceModel) GetModelsOk() (*[]DeviceModel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Models, true
}

// SetModels sets field value
func (o *MultipleDeviceModel) SetModels(v []DeviceModel) {
	o.Models = v
}

func (o MultipleDeviceModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["models"] = o.Models
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleDeviceModel struct {
	value *MultipleDeviceModel
	isSet bool
}

func (v NullableMultipleDeviceModel) Get() *MultipleDeviceModel {
	return v.value
}

func (v *NullableMultipleDeviceModel) Set(val *MultipleDeviceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleDeviceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleDeviceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleDeviceModel(val *MultipleDeviceModel) *NullableMultipleDeviceModel {
	return &NullableMultipleDeviceModel{value: val, isSet: true}
}

func (v NullableMultipleDeviceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleDeviceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


