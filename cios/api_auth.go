/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

// AuthApiService AuthApi service
type AuthApiService service

type ApiRefreshTokenRequest struct {
	Ctx _context.Context
	ApiService *AuthApiService
	P_grantType *string
	P_refreshToken *string
	P_clientId *string
	P_clientSecret *string
	P_scope *string
}

func (r ApiRefreshTokenRequest) GrantType(grantType string) ApiRefreshTokenRequest {
	r.P_grantType = &grantType
	return r
}
func (r ApiRefreshTokenRequest) RefreshToken(refreshToken string) ApiRefreshTokenRequest {
	r.P_refreshToken = &refreshToken
	return r
}
func (r ApiRefreshTokenRequest) ClientId(clientId string) ApiRefreshTokenRequest {
	r.P_clientId = &clientId
	return r
}
func (r ApiRefreshTokenRequest) ClientSecret(clientSecret string) ApiRefreshTokenRequest {
	r.P_clientSecret = &clientSecret
	return r
}
func (r ApiRefreshTokenRequest) Scope(scope string) ApiRefreshTokenRequest {
	r.P_scope = &scope
	return r
}

func (r ApiRefreshTokenRequest) Execute() (ConnectTokenResponse, *_nethttp.Response, error) {
	return r.ApiService.RefreshTokenExecute(r)
}

/*
 * RefreshToken Method for RefreshToken
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiRefreshTokenRequest
 */
func (a *AuthApiService) RefreshToken(Ctx _context.Context) ApiRefreshTokenRequest {
	return ApiRefreshTokenRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return ConnectTokenResponse
 */
func (a *AuthApiService) RefreshTokenExecute(r ApiRefreshTokenRequest) (ConnectTokenResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ConnectTokenResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "AuthApiService.RefreshToken")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/connect/token"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.P_grantType != nil {
		localVarFormParams.Add("grant_type", parameterToString(*r.P_grantType, ""))
	}
	if r.P_refreshToken != nil {
		localVarFormParams.Add("refresh_token", parameterToString(*r.P_refreshToken, ""))
	}
	if r.P_clientId != nil {
		localVarFormParams.Add("client_id", parameterToString(*r.P_clientId, ""))
	}
	if r.P_clientSecret != nil {
		localVarFormParams.Add("client_secret", parameterToString(*r.P_clientSecret, ""))
	}
	if r.P_scope != nil {
		localVarFormParams.Add("scope", parameterToString(*r.P_scope, ""))
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
