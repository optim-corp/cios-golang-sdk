/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleNode struct for SingleNode
type SingleNode struct {
	Node Node `json:"node"`
}

// NewSingleNode instantiates a new SingleNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleNode(node Node, ) *SingleNode {
	this := SingleNode{}
	this.Node = node
	return &this
}

// NewSingleNodeWithDefaults instantiates a new SingleNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleNodeWithDefaults() *SingleNode {
	this := SingleNode{}
	return &this
}

// GetNode returns the Node field value
func (o *SingleNode) GetNode() Node {
	if o == nil  {
		var ret Node
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *SingleNode) GetNodeOk() (*Node, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *SingleNode) SetNode(v Node) {
	o.Node = v
}

func (o SingleNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["node"] = o.Node
	}
	return json.Marshal(toSerialize)
}

type NullableSingleNode struct {
	value *SingleNode
	isSet bool
}

func (v NullableSingleNode) Get() *SingleNode {
	return v.value
}

func (v *NullableSingleNode) Set(val *SingleNode) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleNode) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleNode(val *SingleNode) *NullableSingleNode {
	return &NullableSingleNode{value: val, isSet: true}
}

func (v NullableSingleNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


