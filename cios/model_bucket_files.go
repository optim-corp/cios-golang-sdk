/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// BucketFiles struct for BucketFiles
type BucketFiles struct {
	TotalCount *string `json:"total_count,omitempty"`
	TotalSize *string `json:"total_size,omitempty"`
}

// NewBucketFiles instantiates a new BucketFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBucketFiles() *BucketFiles {
	this := BucketFiles{}
	return &this
}

// NewBucketFilesWithDefaults instantiates a new BucketFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBucketFilesWithDefaults() *BucketFiles {
	this := BucketFiles{}
	return &this
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise.
func (o *BucketFiles) GetTotalCount() string {
	if o == nil || o.TotalCount == nil {
		var ret string
		return ret
	}
	return *o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketFiles) GetTotalCountOk() (*string, bool) {
	if o == nil || o.TotalCount == nil {
		return nil, false
	}
	return o.TotalCount, true
}

// HasTotalCount returns a boolean if a field has been set.
func (o *BucketFiles) HasTotalCount() bool {
	if o != nil && o.TotalCount != nil {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given string and assigns it to the TotalCount field.
func (o *BucketFiles) SetTotalCount(v string) {
	o.TotalCount = &v
}

// GetTotalSize returns the TotalSize field value if set, zero value otherwise.
func (o *BucketFiles) GetTotalSize() string {
	if o == nil || o.TotalSize == nil {
		var ret string
		return ret
	}
	return *o.TotalSize
}

// GetTotalSizeOk returns a tuple with the TotalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BucketFiles) GetTotalSizeOk() (*string, bool) {
	if o == nil || o.TotalSize == nil {
		return nil, false
	}
	return o.TotalSize, true
}

// HasTotalSize returns a boolean if a field has been set.
func (o *BucketFiles) HasTotalSize() bool {
	if o != nil && o.TotalSize != nil {
		return true
	}

	return false
}

// SetTotalSize gets a reference to the given string and assigns it to the TotalSize field.
func (o *BucketFiles) SetTotalSize(v string) {
	o.TotalSize = &v
}

func (o BucketFiles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TotalCount != nil {
		toSerialize["total_count"] = o.TotalCount
	}
	if o.TotalSize != nil {
		toSerialize["total_size"] = o.TotalSize
	}
	return json.Marshal(toSerialize)
}

type NullableBucketFiles struct {
	value *BucketFiles
	isSet bool
}

func (v NullableBucketFiles) Get() *BucketFiles {
	return v.value
}

func (v *NullableBucketFiles) Set(val *BucketFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableBucketFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableBucketFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBucketFiles(val *BucketFiles) *NullableBucketFiles {
	return &NullableBucketFiles{value: val, isSet: true}
}

func (v NullableBucketFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBucketFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


