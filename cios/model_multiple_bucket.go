/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleBucket struct for MultipleBucket
type MultipleBucket struct {
	Total int64 `json:"total"`
	Buckets []Bucket `json:"buckets"`
}

// NewMultipleBucket instantiates a new MultipleBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleBucket(total int64, buckets []Bucket, ) *MultipleBucket {
	this := MultipleBucket{}
	this.Total = total
	this.Buckets = buckets
	return &this
}

// NewMultipleBucketWithDefaults instantiates a new MultipleBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleBucketWithDefaults() *MultipleBucket {
	this := MultipleBucket{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleBucket) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleBucket) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleBucket) SetTotal(v int64) {
	o.Total = v
}

// GetBuckets returns the Buckets field value
func (o *MultipleBucket) GetBuckets() []Bucket {
	if o == nil  {
		var ret []Bucket
		return ret
	}

	return o.Buckets
}

// GetBucketsOk returns a tuple with the Buckets field value
// and a boolean to check if the value has been set.
func (o *MultipleBucket) GetBucketsOk() (*[]Bucket, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Buckets, true
}

// SetBuckets sets field value
func (o *MultipleBucket) SetBuckets(v []Bucket) {
	o.Buckets = v
}

func (o MultipleBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["buckets"] = o.Buckets
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleBucket struct {
	value *MultipleBucket
	isSet bool
}

func (v NullableMultipleBucket) Get() *MultipleBucket {
	return v.value
}

func (v *NullableMultipleBucket) Set(val *MultipleBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleBucket(val *MultipleBucket) *NullableMultipleBucket {
	return &NullableMultipleBucket{value: val, isSet: true}
}

func (v NullableMultipleBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


