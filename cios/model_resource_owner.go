/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// ResourceOwner struct for ResourceOwner
type ResourceOwner struct {
	Id string `json:"id"`
	GroupId *string `json:"group_id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	AuthorId *string `json:"author_id,omitempty"`
	Profile ResourceOwnerProfile `json:"profile"`
	Type string `json:"type"`
}

// NewResourceOwner instantiates a new ResourceOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceOwner(id string, profile ResourceOwnerProfile, type_ string, ) *ResourceOwner {
	this := ResourceOwner{}
	this.Id = id
	this.Profile = profile
	this.Type = type_
	return &this
}

// NewResourceOwnerWithDefaults instantiates a new ResourceOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceOwnerWithDefaults() *ResourceOwner {
	this := ResourceOwner{}
	return &this
}

// GetId returns the Id field value
func (o *ResourceOwner) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ResourceOwner) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ResourceOwner) SetId(v string) {
	o.Id = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ResourceOwner) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceOwner) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ResourceOwner) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ResourceOwner) SetGroupId(v string) {
	o.GroupId = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *ResourceOwner) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceOwner) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *ResourceOwner) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *ResourceOwner) SetUserId(v string) {
	o.UserId = &v
}

// GetAuthorId returns the AuthorId field value if set, zero value otherwise.
func (o *ResourceOwner) GetAuthorId() string {
	if o == nil || o.AuthorId == nil {
		var ret string
		return ret
	}
	return *o.AuthorId
}

// GetAuthorIdOk returns a tuple with the AuthorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceOwner) GetAuthorIdOk() (*string, bool) {
	if o == nil || o.AuthorId == nil {
		return nil, false
	}
	return o.AuthorId, true
}

// HasAuthorId returns a boolean if a field has been set.
func (o *ResourceOwner) HasAuthorId() bool {
	if o != nil && o.AuthorId != nil {
		return true
	}

	return false
}

// SetAuthorId gets a reference to the given string and assigns it to the AuthorId field.
func (o *ResourceOwner) SetAuthorId(v string) {
	o.AuthorId = &v
}

// GetProfile returns the Profile field value
func (o *ResourceOwner) GetProfile() ResourceOwnerProfile {
	if o == nil  {
		var ret ResourceOwnerProfile
		return ret
	}

	return o.Profile
}

// GetProfileOk returns a tuple with the Profile field value
// and a boolean to check if the value has been set.
func (o *ResourceOwner) GetProfileOk() (*ResourceOwnerProfile, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Profile, true
}

// SetProfile sets field value
func (o *ResourceOwner) SetProfile(v ResourceOwnerProfile) {
	o.Profile = v
}

// GetType returns the Type field value
func (o *ResourceOwner) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ResourceOwner) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ResourceOwner) SetType(v string) {
	o.Type = v
}

func (o ResourceOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.GroupId != nil {
		toSerialize["group_id"] = o.GroupId
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.AuthorId != nil {
		toSerialize["author_id"] = o.AuthorId
	}
	if true {
		toSerialize["profile"] = o.Profile
	}
	if true {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableResourceOwner struct {
	value *ResourceOwner
	isSet bool
}

func (v NullableResourceOwner) Get() *ResourceOwner {
	return v.value
}

func (v *NullableResourceOwner) Set(val *ResourceOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceOwner(val *ResourceOwner) *NullableResourceOwner {
	return &NullableResourceOwner{value: val, isSet: true}
}

func (v NullableResourceOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


