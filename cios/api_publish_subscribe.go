/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// PublishSubscribeApiService PublishSubscribeApi service
type PublishSubscribeApiService service

type ApiCreateChannelRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelProposal *ChannelProposal
}

func (r ApiCreateChannelRequest) ChannelProposal(channelProposal ChannelProposal) ApiCreateChannelRequest {
	r.P_channelProposal = &channelProposal
	return r
}

func (r ApiCreateChannelRequest) Execute() (SingleChannel, *_nethttp.Response, error) {
	return r.ApiService.CreateChannelExecute(r)
}

/*
 * CreateChannel Method for CreateChannel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateChannelRequest
 */
func (a *PublishSubscribeApiService) CreateChannel(Ctx _context.Context) ApiCreateChannelRequest {
	return ApiCreateChannelRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return SingleChannel
 */
func (a *PublishSubscribeApiService) CreateChannelExecute(r ApiCreateChannelRequest) (SingleChannel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleChannel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.CreateChannel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/channels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_channelProposal == nil {
		return localVarReturnValue, nil, reportError("channelProposal is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_channelProposal
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDataStoreObjectRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_body **os.File
	P_channelProtocolId *string
	P_channelProtocolVersion *int32
	P_sessionId *string
	P_location *string
	P_timestamp *string
}

func (r ApiCreateDataStoreObjectRequest) Body(body *os.File) ApiCreateDataStoreObjectRequest {
	r.P_body = &body
	return r
}
func (r ApiCreateDataStoreObjectRequest) ChannelProtocolId(channelProtocolId string) ApiCreateDataStoreObjectRequest {
	r.P_channelProtocolId = &channelProtocolId
	return r
}
func (r ApiCreateDataStoreObjectRequest) ChannelProtocolVersion(channelProtocolVersion int32) ApiCreateDataStoreObjectRequest {
	r.P_channelProtocolVersion = &channelProtocolVersion
	return r
}
func (r ApiCreateDataStoreObjectRequest) SessionId(sessionId string) ApiCreateDataStoreObjectRequest {
	r.P_sessionId = &sessionId
	return r
}
func (r ApiCreateDataStoreObjectRequest) Location(location string) ApiCreateDataStoreObjectRequest {
	r.P_location = &location
	return r
}
func (r ApiCreateDataStoreObjectRequest) Timestamp(timestamp string) ApiCreateDataStoreObjectRequest {
	r.P_timestamp = &timestamp
	return r
}

func (r ApiCreateDataStoreObjectRequest) Execute() (SingleDataStoreObject, *_nethttp.Response, error) {
	return r.ApiService.CreateDataStoreObjectExecute(r)
}

/*
 * CreateDataStoreObject Method for CreateDataStoreObject
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiCreateDataStoreObjectRequest
 */
func (a *PublishSubscribeApiService) CreateDataStoreObject(Ctx _context.Context, channelId string) ApiCreateDataStoreObjectRequest {
	return ApiCreateDataStoreObjectRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 * @return SingleDataStoreObject
 */
func (a *PublishSubscribeApiService) CreateDataStoreObjectExecute(r ApiCreateDataStoreObjectRequest) (SingleDataStoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDataStoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.CreateDataStoreObject")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	if r.P_channelProtocolId != nil {
		localVarQueryParams.Add("channel_protocol_id", parameterToString(*r.P_channelProtocolId, ""))
	}
	if r.P_channelProtocolVersion != nil {
		localVarQueryParams.Add("channel_protocol_version", parameterToString(*r.P_channelProtocolVersion, ""))
	}
	if r.P_sessionId != nil {
		localVarQueryParams.Add("session_id", parameterToString(*r.P_sessionId, ""))
	}
	if r.P_location != nil {
		localVarQueryParams.Add("location", parameterToString(*r.P_location, ""))
	}
	if r.P_timestamp != nil {
		localVarQueryParams.Add("timestamp", parameterToString(*r.P_timestamp, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_body
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteChannelRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
}


func (r ApiDeleteChannelRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteChannelExecute(r)
}

/*
 * DeleteChannel Method for DeleteChannel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiDeleteChannelRequest
 */
func (a *PublishSubscribeApiService) DeleteChannel(Ctx _context.Context, channelId string) ApiDeleteChannelRequest {
	return ApiDeleteChannelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 */
func (a *PublishSubscribeApiService) DeleteChannelExecute(r ApiDeleteChannelRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.DeleteChannel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDataStoreChannelRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
}


func (r ApiDeleteDataStoreChannelRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDataStoreChannelExecute(r)
}

/*
 * DeleteDataStoreChannel Method for DeleteDataStoreChannel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiDeleteDataStoreChannelRequest
 */
func (a *PublishSubscribeApiService) DeleteDataStoreChannel(Ctx _context.Context, channelId string) ApiDeleteDataStoreChannelRequest {
	return ApiDeleteDataStoreChannelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 */
func (a *PublishSubscribeApiService) DeleteDataStoreChannelExecute(r ApiDeleteDataStoreChannelRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.DeleteDataStoreChannel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDataStoreObjectDataRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_objectId string
}


func (r ApiDeleteDataStoreObjectDataRequest) Execute() (MultipleDataStoreObject, *_nethttp.Response, error) {
	return r.ApiService.DeleteDataStoreObjectDataExecute(r)
}

/*
 * DeleteDataStoreObjectData Method for DeleteDataStoreObjectData
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @param objectId
 * @return ApiDeleteDataStoreObjectDataRequest
 */
func (a *PublishSubscribeApiService) DeleteDataStoreObjectData(Ctx _context.Context, channelId string, objectId string) ApiDeleteDataStoreObjectDataRequest {
	return ApiDeleteDataStoreObjectDataRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
		P_objectId: objectId,
	}
}

/*
 * Execute executes the request
 * @return MultipleDataStoreObject
 */
func (a *PublishSubscribeApiService) DeleteDataStoreObjectDataExecute(r ApiDeleteDataStoreObjectDataRequest) (MultipleDataStoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleDataStoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.DeleteDataStoreObjectData")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/objects/{object_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"object_id"+"}", _neturl.PathEscape(parameterToString(r.P_objectId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDataStoreSessionRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_sessionId string
}


func (r ApiDeleteDataStoreSessionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDataStoreSessionExecute(r)
}

/*
 * DeleteDataStoreSession Method for DeleteDataStoreSession
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @param sessionId
 * @return ApiDeleteDataStoreSessionRequest
 */
func (a *PublishSubscribeApiService) DeleteDataStoreSession(Ctx _context.Context, channelId string, sessionId string) ApiDeleteDataStoreSessionRequest {
	return ApiDeleteDataStoreSessionRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
		P_sessionId: sessionId,
	}
}

/*
 * Execute executes the request
 */
func (a *PublishSubscribeApiService) DeleteDataStoreSessionExecute(r ApiDeleteDataStoreSessionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.DeleteDataStoreSession")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/sessions/{session_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"session_id"+"}", _neturl.PathEscape(parameterToString(r.P_sessionId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetChannelRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_lang *string
	P_isDev *bool
}

func (r ApiGetChannelRequest) Lang(lang string) ApiGetChannelRequest {
	r.P_lang = &lang
	return r
}
func (r ApiGetChannelRequest) IsDev(isDev bool) ApiGetChannelRequest {
	r.P_isDev = &isDev
	return r
}

func (r ApiGetChannelRequest) Execute() (SingleChannel, *_nethttp.Response, error) {
	return r.ApiService.GetChannelExecute(r)
}

/*
 * GetChannel Method for GetChannel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiGetChannelRequest
 */
func (a *PublishSubscribeApiService) GetChannel(Ctx _context.Context, channelId string) ApiGetChannelRequest {
	return ApiGetChannelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 * @return SingleChannel
 */
func (a *PublishSubscribeApiService) GetChannelExecute(r ApiGetChannelRequest) (SingleChannel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleChannel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetChannel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_lang != nil {
		localVarQueryParams.Add("lang", parameterToString(*r.P_lang, ""))
	}
	if r.P_isDev != nil {
		localVarQueryParams.Add("is_dev", parameterToString(*r.P_isDev, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChannelsRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_name *string
	P_resourceOwnerId *string
	P_label *string
	P_channelProtocol *string
	P_limit *int64
	P_offset *int64
	P_order *string
	P_orderBy *string
	P_lang *string
	P_isDev *bool
	P_isPublic *string
	P_messagingEnabled *string
	P_datastoreEnabled *string
	P_messagingPersisted *string
}

func (r ApiGetChannelsRequest) Name(name string) ApiGetChannelsRequest {
	r.P_name = &name
	return r
}
func (r ApiGetChannelsRequest) ResourceOwnerId(resourceOwnerId string) ApiGetChannelsRequest {
	r.P_resourceOwnerId = &resourceOwnerId
	return r
}
func (r ApiGetChannelsRequest) Label(label string) ApiGetChannelsRequest {
	r.P_label = &label
	return r
}
func (r ApiGetChannelsRequest) ChannelProtocol(channelProtocol string) ApiGetChannelsRequest {
	r.P_channelProtocol = &channelProtocol
	return r
}
func (r ApiGetChannelsRequest) Limit(limit int64) ApiGetChannelsRequest {
	r.P_limit = &limit
	return r
}
func (r ApiGetChannelsRequest) Offset(offset int64) ApiGetChannelsRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetChannelsRequest) Order(order string) ApiGetChannelsRequest {
	r.P_order = &order
	return r
}
func (r ApiGetChannelsRequest) OrderBy(orderBy string) ApiGetChannelsRequest {
	r.P_orderBy = &orderBy
	return r
}
func (r ApiGetChannelsRequest) Lang(lang string) ApiGetChannelsRequest {
	r.P_lang = &lang
	return r
}
func (r ApiGetChannelsRequest) IsDev(isDev bool) ApiGetChannelsRequest {
	r.P_isDev = &isDev
	return r
}
func (r ApiGetChannelsRequest) IsPublic(isPublic string) ApiGetChannelsRequest {
	r.P_isPublic = &isPublic
	return r
}
func (r ApiGetChannelsRequest) MessagingEnabled(messagingEnabled string) ApiGetChannelsRequest {
	r.P_messagingEnabled = &messagingEnabled
	return r
}
func (r ApiGetChannelsRequest) DatastoreEnabled(datastoreEnabled string) ApiGetChannelsRequest {
	r.P_datastoreEnabled = &datastoreEnabled
	return r
}
func (r ApiGetChannelsRequest) MessagingPersisted(messagingPersisted string) ApiGetChannelsRequest {
	r.P_messagingPersisted = &messagingPersisted
	return r
}

func (r ApiGetChannelsRequest) Execute() (MultipleChanel, *_nethttp.Response, error) {
	return r.ApiService.GetChannelsExecute(r)
}

/*
 * GetChannels Method for GetChannels
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetChannelsRequest
 */
func (a *PublishSubscribeApiService) GetChannels(Ctx _context.Context) ApiGetChannelsRequest {
	return ApiGetChannelsRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return MultipleChanel
 */
func (a *PublishSubscribeApiService) GetChannelsExecute(r ApiGetChannelsRequest) (MultipleChanel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleChanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetChannels")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/channels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.P_name, ""))
	}
	if r.P_resourceOwnerId != nil {
		localVarQueryParams.Add("resource_owner_id", parameterToString(*r.P_resourceOwnerId, ""))
	}
	if r.P_label != nil {
		localVarQueryParams.Add("label", parameterToString(*r.P_label, ""))
	}
	if r.P_channelProtocol != nil {
		localVarQueryParams.Add("channel_protocol", parameterToString(*r.P_channelProtocol, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.P_order, ""))
	}
	if r.P_orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.P_orderBy, ""))
	}
	if r.P_lang != nil {
		localVarQueryParams.Add("lang", parameterToString(*r.P_lang, ""))
	}
	if r.P_isDev != nil {
		localVarQueryParams.Add("is_dev", parameterToString(*r.P_isDev, ""))
	}
	if r.P_isPublic != nil {
		localVarQueryParams.Add("is_public", parameterToString(*r.P_isPublic, ""))
	}
	if r.P_messagingEnabled != nil {
		localVarQueryParams.Add("messaging_enabled", parameterToString(*r.P_messagingEnabled, ""))
	}
	if r.P_datastoreEnabled != nil {
		localVarQueryParams.Add("datastore_enabled", parameterToString(*r.P_datastoreEnabled, ""))
	}
	if r.P_messagingPersisted != nil {
		localVarQueryParams.Add("messaging_persisted", parameterToString(*r.P_messagingPersisted, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreChannelRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
}


func (r ApiGetDataStoreChannelRequest) Execute() (SingleDataStoreChannel, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreChannelExecute(r)
}

/*
 * GetDataStoreChannel Method for GetDataStoreChannel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiGetDataStoreChannelRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreChannel(Ctx _context.Context, channelId string) ApiGetDataStoreChannelRequest {
	return ApiGetDataStoreChannelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 * @return SingleDataStoreChannel
 */
func (a *PublishSubscribeApiService) GetDataStoreChannelExecute(r ApiGetDataStoreChannelRequest) (SingleDataStoreChannel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDataStoreChannel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreChannel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreChannelsRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelProtocolId *string
	P_limit *int64
	P_offset *int64
	P_order *string
	P_orderBy *string
}

func (r ApiGetDataStoreChannelsRequest) ChannelProtocolId(channelProtocolId string) ApiGetDataStoreChannelsRequest {
	r.P_channelProtocolId = &channelProtocolId
	return r
}
func (r ApiGetDataStoreChannelsRequest) Limit(limit int64) ApiGetDataStoreChannelsRequest {
	r.P_limit = &limit
	return r
}
func (r ApiGetDataStoreChannelsRequest) Offset(offset int64) ApiGetDataStoreChannelsRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetDataStoreChannelsRequest) Order(order string) ApiGetDataStoreChannelsRequest {
	r.P_order = &order
	return r
}
func (r ApiGetDataStoreChannelsRequest) OrderBy(orderBy string) ApiGetDataStoreChannelsRequest {
	r.P_orderBy = &orderBy
	return r
}

func (r ApiGetDataStoreChannelsRequest) Execute() (MultipleDataStoreChannel, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreChannelsExecute(r)
}

/*
 * GetDataStoreChannels Method for GetDataStoreChannels
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetDataStoreChannelsRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreChannels(Ctx _context.Context) ApiGetDataStoreChannelsRequest {
	return ApiGetDataStoreChannelsRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return MultipleDataStoreChannel
 */
func (a *PublishSubscribeApiService) GetDataStoreChannelsExecute(r ApiGetDataStoreChannelsRequest) (MultipleDataStoreChannel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleDataStoreChannel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreChannels")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_channelProtocolId != nil {
		localVarQueryParams.Add("channel_protocol_id", parameterToString(*r.P_channelProtocolId, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.P_order, ""))
	}
	if r.P_orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.P_orderBy, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreMultiObjectDataLatestRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_ids *Ids
}

func (r ApiGetDataStoreMultiObjectDataLatestRequest) Ids(ids Ids) ApiGetDataStoreMultiObjectDataLatestRequest {
	r.P_ids = &ids
	return r
}

func (r ApiGetDataStoreMultiObjectDataLatestRequest) Execute() (MultipleDataStoreDataLatest, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreMultiObjectDataLatestExecute(r)
}

/*
 * GetDataStoreMultiObjectDataLatest Method for GetDataStoreMultiObjectDataLatest
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetDataStoreMultiObjectDataLatestRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreMultiObjectDataLatest(Ctx _context.Context) ApiGetDataStoreMultiObjectDataLatestRequest {
	return ApiGetDataStoreMultiObjectDataLatestRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return MultipleDataStoreDataLatest
 */
func (a *PublishSubscribeApiService) GetDataStoreMultiObjectDataLatestExecute(r ApiGetDataStoreMultiObjectDataLatestRequest) (MultipleDataStoreDataLatest, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleDataStoreDataLatest
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreMultiObjectDataLatest")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/objects_latest"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_ids == nil {
		return localVarReturnValue, nil, reportError("ids is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_ids
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreObjectDataRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_objectId string
	P_packerFormat *string
}

func (r ApiGetDataStoreObjectDataRequest) PackerFormat(packerFormat string) ApiGetDataStoreObjectDataRequest {
	r.P_packerFormat = &packerFormat
	return r
}

func (r ApiGetDataStoreObjectDataRequest) Execute() (interface{}, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreObjectDataExecute(r)
}

/*
 * GetDataStoreObjectData Method for GetDataStoreObjectData
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @param objectId
 * @return ApiGetDataStoreObjectDataRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreObjectData(Ctx _context.Context, channelId string, objectId string) ApiGetDataStoreObjectDataRequest {
	return ApiGetDataStoreObjectDataRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
		P_objectId: objectId,
	}
}

/*
 * Execute executes the request
 * @return interface{}
 */
func (a *PublishSubscribeApiService) GetDataStoreObjectDataExecute(r ApiGetDataStoreObjectDataRequest) (interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreObjectData")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/objects/{object_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"object_id"+"}", _neturl.PathEscape(parameterToString(r.P_objectId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_packerFormat != nil {
		localVarQueryParams.Add("packer_format", parameterToString(*r.P_packerFormat, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreObjectDataLatestRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_packerFormat *string
}

func (r ApiGetDataStoreObjectDataLatestRequest) PackerFormat(packerFormat string) ApiGetDataStoreObjectDataLatestRequest {
	r.P_packerFormat = &packerFormat
	return r
}

func (r ApiGetDataStoreObjectDataLatestRequest) Execute() (interface{}, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreObjectDataLatestExecute(r)
}

/*
 * GetDataStoreObjectDataLatest Method for GetDataStoreObjectDataLatest
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiGetDataStoreObjectDataLatestRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreObjectDataLatest(Ctx _context.Context, channelId string) ApiGetDataStoreObjectDataLatestRequest {
	return ApiGetDataStoreObjectDataLatestRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 * @return interface{}
 */
func (a *PublishSubscribeApiService) GetDataStoreObjectDataLatestExecute(r ApiGetDataStoreObjectDataLatestRequest) (interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreObjectDataLatest")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/object_latest"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_packerFormat != nil {
		localVarQueryParams.Add("packer_format", parameterToString(*r.P_packerFormat, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/octet-stream", "application/xml", "text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreObjectsRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_sessionId *string
	P_channelProtocolVersion *int32
	P_channelProtocolId *string
	P_label *string
	P_location *string
	P_locationRange *string
	P_timestamp *string
	P_timestampRange *string
	P_ascending *bool
	P_offset *int64
	P_limit *int64
}

func (r ApiGetDataStoreObjectsRequest) SessionId(sessionId string) ApiGetDataStoreObjectsRequest {
	r.P_sessionId = &sessionId
	return r
}
func (r ApiGetDataStoreObjectsRequest) ChannelProtocolVersion(channelProtocolVersion int32) ApiGetDataStoreObjectsRequest {
	r.P_channelProtocolVersion = &channelProtocolVersion
	return r
}
func (r ApiGetDataStoreObjectsRequest) ChannelProtocolId(channelProtocolId string) ApiGetDataStoreObjectsRequest {
	r.P_channelProtocolId = &channelProtocolId
	return r
}
func (r ApiGetDataStoreObjectsRequest) Label(label string) ApiGetDataStoreObjectsRequest {
	r.P_label = &label
	return r
}
func (r ApiGetDataStoreObjectsRequest) Location(location string) ApiGetDataStoreObjectsRequest {
	r.P_location = &location
	return r
}
func (r ApiGetDataStoreObjectsRequest) LocationRange(locationRange string) ApiGetDataStoreObjectsRequest {
	r.P_locationRange = &locationRange
	return r
}
func (r ApiGetDataStoreObjectsRequest) Timestamp(timestamp string) ApiGetDataStoreObjectsRequest {
	r.P_timestamp = &timestamp
	return r
}
func (r ApiGetDataStoreObjectsRequest) TimestampRange(timestampRange string) ApiGetDataStoreObjectsRequest {
	r.P_timestampRange = &timestampRange
	return r
}
func (r ApiGetDataStoreObjectsRequest) Ascending(ascending bool) ApiGetDataStoreObjectsRequest {
	r.P_ascending = &ascending
	return r
}
func (r ApiGetDataStoreObjectsRequest) Offset(offset int64) ApiGetDataStoreObjectsRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetDataStoreObjectsRequest) Limit(limit int64) ApiGetDataStoreObjectsRequest {
	r.P_limit = &limit
	return r
}

func (r ApiGetDataStoreObjectsRequest) Execute() (MultipleDataStoreObject, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreObjectsExecute(r)
}

/*
 * GetDataStoreObjects Method for GetDataStoreObjects
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiGetDataStoreObjectsRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreObjects(Ctx _context.Context, channelId string) ApiGetDataStoreObjectsRequest {
	return ApiGetDataStoreObjectsRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 * @return MultipleDataStoreObject
 */
func (a *PublishSubscribeApiService) GetDataStoreObjectsExecute(r ApiGetDataStoreObjectsRequest) (MultipleDataStoreObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleDataStoreObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreObjects")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/objects"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_sessionId != nil {
		localVarQueryParams.Add("session_id", parameterToString(*r.P_sessionId, ""))
	}
	if r.P_channelProtocolVersion != nil {
		localVarQueryParams.Add("channel_protocol_version", parameterToString(*r.P_channelProtocolVersion, ""))
	}
	if r.P_channelProtocolId != nil {
		localVarQueryParams.Add("channel_protocol_id", parameterToString(*r.P_channelProtocolId, ""))
	}
	if r.P_label != nil {
		localVarQueryParams.Add("label", parameterToString(*r.P_label, ""))
	}
	if r.P_location != nil {
		localVarQueryParams.Add("location", parameterToString(*r.P_location, ""))
	}
	if r.P_locationRange != nil {
		localVarQueryParams.Add("location_range", parameterToString(*r.P_locationRange, ""))
	}
	if r.P_timestamp != nil {
		localVarQueryParams.Add("timestamp", parameterToString(*r.P_timestamp, ""))
	}
	if r.P_timestampRange != nil {
		localVarQueryParams.Add("timestamp_range", parameterToString(*r.P_timestampRange, ""))
	}
	if r.P_ascending != nil {
		localVarQueryParams.Add("ascending", parameterToString(*r.P_ascending, ""))
	}
	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreSessionRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_sessionId string
}


func (r ApiGetDataStoreSessionRequest) Execute() (SingleSession, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreSessionExecute(r)
}

/*
 * GetDataStoreSession Method for GetDataStoreSession
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @param sessionId
 * @return ApiGetDataStoreSessionRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreSession(Ctx _context.Context, channelId string, sessionId string) ApiGetDataStoreSessionRequest {
	return ApiGetDataStoreSessionRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
		P_sessionId: sessionId,
	}
}

/*
 * Execute executes the request
 * @return SingleSession
 */
func (a *PublishSubscribeApiService) GetDataStoreSessionExecute(r ApiGetDataStoreSessionRequest) (SingleSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreSession")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/sessions/{session_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"session_id"+"}", _neturl.PathEscape(parameterToString(r.P_sessionId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDataStoreSessionsRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_timestamp *string
	P_timestampRange *string
	P_locationRange *string
	P_location *string
	P_ascending *bool
	P_offset *int64
	P_limit *int64
}

func (r ApiGetDataStoreSessionsRequest) Timestamp(timestamp string) ApiGetDataStoreSessionsRequest {
	r.P_timestamp = &timestamp
	return r
}
func (r ApiGetDataStoreSessionsRequest) TimestampRange(timestampRange string) ApiGetDataStoreSessionsRequest {
	r.P_timestampRange = &timestampRange
	return r
}
func (r ApiGetDataStoreSessionsRequest) LocationRange(locationRange string) ApiGetDataStoreSessionsRequest {
	r.P_locationRange = &locationRange
	return r
}
func (r ApiGetDataStoreSessionsRequest) Location(location string) ApiGetDataStoreSessionsRequest {
	r.P_location = &location
	return r
}
func (r ApiGetDataStoreSessionsRequest) Ascending(ascending bool) ApiGetDataStoreSessionsRequest {
	r.P_ascending = &ascending
	return r
}
func (r ApiGetDataStoreSessionsRequest) Offset(offset int64) ApiGetDataStoreSessionsRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetDataStoreSessionsRequest) Limit(limit int64) ApiGetDataStoreSessionsRequest {
	r.P_limit = &limit
	return r
}

func (r ApiGetDataStoreSessionsRequest) Execute() (MultipleSession, *_nethttp.Response, error) {
	return r.ApiService.GetDataStoreSessionsExecute(r)
}

/*
 * GetDataStoreSessions Method for GetDataStoreSessions
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiGetDataStoreSessionsRequest
 */
func (a *PublishSubscribeApiService) GetDataStoreSessions(Ctx _context.Context, channelId string) ApiGetDataStoreSessionsRequest {
	return ApiGetDataStoreSessionsRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 * @return MultipleSession
 */
func (a *PublishSubscribeApiService) GetDataStoreSessionsExecute(r ApiGetDataStoreSessionsRequest) (MultipleSession, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleSession
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.GetDataStoreSessions")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/datastore/channels/{channel_id}/sessions"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_timestamp != nil {
		localVarQueryParams.Add("timestamp", parameterToString(*r.P_timestamp, ""))
	}
	if r.P_timestampRange != nil {
		localVarQueryParams.Add("timestamp_range", parameterToString(*r.P_timestampRange, ""))
	}
	if r.P_locationRange != nil {
		localVarQueryParams.Add("location_range", parameterToString(*r.P_locationRange, ""))
	}
	if r.P_location != nil {
		localVarQueryParams.Add("location", parameterToString(*r.P_location, ""))
	}
	if r.P_ascending != nil {
		localVarQueryParams.Add("ascending", parameterToString(*r.P_ascending, ""))
	}
	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPublishMessageRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId *string
	P_packerFormat *string
	P_body *interface{}
}

func (r ApiPublishMessageRequest) ChannelId(channelId string) ApiPublishMessageRequest {
	r.P_channelId = &channelId
	return r
}
func (r ApiPublishMessageRequest) PackerFormat(packerFormat string) ApiPublishMessageRequest {
	r.P_packerFormat = &packerFormat
	return r
}
func (r ApiPublishMessageRequest) Body(body interface{}) ApiPublishMessageRequest {
	r.P_body = &body
	return r
}

func (r ApiPublishMessageRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.PublishMessageExecute(r)
}

/*
 * PublishMessage Method for PublishMessage
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiPublishMessageRequest
 */
func (a *PublishSubscribeApiService) PublishMessage(Ctx _context.Context) ApiPublishMessageRequest {
	return ApiPublishMessageRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *PublishSubscribeApiService) PublishMessageExecute(r ApiPublishMessageRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.PublishMessage")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/messaging"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_channelId == nil {
		return nil, reportError("channelId is required and must be specified")
	}

	if r.P_packerFormat != nil {
		localVarQueryParams.Add("packer_format", parameterToString(*r.P_packerFormat, ""))
	}
	localVarQueryParams.Add("channel_id", parameterToString(*r.P_channelId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/octet-stream", "application/xml", "text/plain"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_body
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSubscribeMessageRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId *string
	P_packerFormat *string
}

func (r ApiSubscribeMessageRequest) ChannelId(channelId string) ApiSubscribeMessageRequest {
	r.P_channelId = &channelId
	return r
}
func (r ApiSubscribeMessageRequest) PackerFormat(packerFormat string) ApiSubscribeMessageRequest {
	r.P_packerFormat = &packerFormat
	return r
}

func (r ApiSubscribeMessageRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.SubscribeMessageExecute(r)
}

/*
 * SubscribeMessage Method for SubscribeMessage
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSubscribeMessageRequest
 */
func (a *PublishSubscribeApiService) SubscribeMessage(Ctx _context.Context) ApiSubscribeMessageRequest {
	return ApiSubscribeMessageRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return *os.File
 */
func (a *PublishSubscribeApiService) SubscribeMessageExecute(r ApiSubscribeMessageRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.SubscribeMessage")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/messaging"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_channelId == nil {
		return localVarReturnValue, nil, reportError("channelId is required and must be specified")
	}

	if r.P_packerFormat != nil {
		localVarQueryParams.Add("packer_format", parameterToString(*r.P_packerFormat, ""))
	}
	localVarQueryParams.Add("channel_id", parameterToString(*r.P_channelId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateChannelRequest struct {
	Ctx _context.Context
	ApiService *PublishSubscribeApiService
	P_channelId string
	P_channelUpdateProposal *ChannelUpdateProposal
}

func (r ApiUpdateChannelRequest) ChannelUpdateProposal(channelUpdateProposal ChannelUpdateProposal) ApiUpdateChannelRequest {
	r.P_channelUpdateProposal = &channelUpdateProposal
	return r
}

func (r ApiUpdateChannelRequest) Execute() (MultipleChanel, *_nethttp.Response, error) {
	return r.ApiService.UpdateChannelExecute(r)
}

/*
 * UpdateChannel Method for UpdateChannel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param channelId
 * @return ApiUpdateChannelRequest
 */
func (a *PublishSubscribeApiService) UpdateChannel(Ctx _context.Context, channelId string) ApiUpdateChannelRequest {
	return ApiUpdateChannelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_channelId: channelId,
	}
}

/*
 * Execute executes the request
 * @return MultipleChanel
 */
func (a *PublishSubscribeApiService) UpdateChannelExecute(r ApiUpdateChannelRequest) (MultipleChanel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleChanel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "PublishSubscribeApiService.UpdateChannel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/channels/{channel_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"channel_id"+"}", _neturl.PathEscape(parameterToString(r.P_channelId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_channelUpdateProposal == nil {
		return localVarReturnValue, nil, reportError("channelUpdateProposal is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_channelUpdateProposal
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
