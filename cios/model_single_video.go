/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleVideo struct for SingleVideo
type SingleVideo struct {
	Video Video `json:"video"`
}

// NewSingleVideo instantiates a new SingleVideo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleVideo(video Video, ) *SingleVideo {
	this := SingleVideo{}
	this.Video = video
	return &this
}

// NewSingleVideoWithDefaults instantiates a new SingleVideo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleVideoWithDefaults() *SingleVideo {
	this := SingleVideo{}
	return &this
}

// GetVideo returns the Video field value
func (o *SingleVideo) GetVideo() Video {
	if o == nil  {
		var ret Video
		return ret
	}

	return o.Video
}

// GetVideoOk returns a tuple with the Video field value
// and a boolean to check if the value has been set.
func (o *SingleVideo) GetVideoOk() (*Video, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Video, true
}

// SetVideo sets field value
func (o *SingleVideo) SetVideo(v Video) {
	o.Video = v
}

func (o SingleVideo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["video"] = o.Video
	}
	return json.Marshal(toSerialize)
}

type NullableSingleVideo struct {
	value *SingleVideo
	isSet bool
}

func (v NullableSingleVideo) Get() *SingleVideo {
	return v.value
}

func (v *NullableSingleVideo) Set(val *SingleVideo) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleVideo) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleVideo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleVideo(val *SingleVideo) *NullableSingleVideo {
	return &NullableSingleVideo{value: val, isSet: true}
}

func (v NullableSingleVideo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleVideo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


