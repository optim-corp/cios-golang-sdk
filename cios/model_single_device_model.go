/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleDeviceModel struct for SingleDeviceModel
type SingleDeviceModel struct {
	Model DeviceModel `json:"model"`
}

// NewSingleDeviceModel instantiates a new SingleDeviceModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleDeviceModel(model DeviceModel, ) *SingleDeviceModel {
	this := SingleDeviceModel{}
	this.Model = model
	return &this
}

// NewSingleDeviceModelWithDefaults instantiates a new SingleDeviceModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleDeviceModelWithDefaults() *SingleDeviceModel {
	this := SingleDeviceModel{}
	return &this
}

// GetModel returns the Model field value
func (o *SingleDeviceModel) GetModel() DeviceModel {
	if o == nil  {
		var ret DeviceModel
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *SingleDeviceModel) GetModelOk() (*DeviceModel, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *SingleDeviceModel) SetModel(v DeviceModel) {
	o.Model = v
}

func (o SingleDeviceModel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["model"] = o.Model
	}
	return json.Marshal(toSerialize)
}

type NullableSingleDeviceModel struct {
	value *SingleDeviceModel
	isSet bool
}

func (v NullableSingleDeviceModel) Get() *SingleDeviceModel {
	return v.value
}

func (v *NullableSingleDeviceModel) Set(val *SingleDeviceModel) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleDeviceModel) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleDeviceModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleDeviceModel(val *SingleDeviceModel) *NullableSingleDeviceModel {
	return &NullableSingleDeviceModel{value: val, isSet: true}
}

func (v NullableSingleDeviceModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleDeviceModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


