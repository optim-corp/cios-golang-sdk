/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// CollectionLocation struct for CollectionLocation
type CollectionLocation struct {
	Type string `json:"type"`
	Coordinates []float32 `json:"coordinates"`
}

// NewCollectionLocation instantiates a new CollectionLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionLocation(type_ string, coordinates []float32, ) *CollectionLocation {
	this := CollectionLocation{}
	this.Type = type_
	this.Coordinates = coordinates
	return &this
}

// NewCollectionLocationWithDefaults instantiates a new CollectionLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionLocationWithDefaults() *CollectionLocation {
	this := CollectionLocation{}
	var type_ string = "Point"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *CollectionLocation) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CollectionLocation) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CollectionLocation) SetType(v string) {
	o.Type = v
}

// GetCoordinates returns the Coordinates field value
func (o *CollectionLocation) GetCoordinates() []float32 {
	if o == nil  {
		var ret []float32
		return ret
	}

	return o.Coordinates
}

// GetCoordinatesOk returns a tuple with the Coordinates field value
// and a boolean to check if the value has been set.
func (o *CollectionLocation) GetCoordinatesOk() (*[]float32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Coordinates, true
}

// SetCoordinates sets field value
func (o *CollectionLocation) SetCoordinates(v []float32) {
	o.Coordinates = v
}

func (o CollectionLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["coordinates"] = o.Coordinates
	}
	return json.Marshal(toSerialize)
}

type NullableCollectionLocation struct {
	value *CollectionLocation
	isSet bool
}

func (v NullableCollectionLocation) Get() *CollectionLocation {
	return v.value
}

func (v *NullableCollectionLocation) Set(val *CollectionLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionLocation(val *CollectionLocation) *NullableCollectionLocation {
	return &NullableCollectionLocation{value: val, isSet: true}
}

func (v NullableCollectionLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


