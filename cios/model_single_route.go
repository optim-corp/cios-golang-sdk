/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleRoute struct for SingleRoute
type SingleRoute struct {
	Route *Route `json:"route,omitempty"`
}

// NewSingleRoute instantiates a new SingleRoute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleRoute() *SingleRoute {
	this := SingleRoute{}
	return &this
}

// NewSingleRouteWithDefaults instantiates a new SingleRoute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleRouteWithDefaults() *SingleRoute {
	this := SingleRoute{}
	return &this
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *SingleRoute) GetRoute() Route {
	if o == nil || o.Route == nil {
		var ret Route
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleRoute) GetRouteOk() (*Route, bool) {
	if o == nil || o.Route == nil {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *SingleRoute) HasRoute() bool {
	if o != nil && o.Route != nil {
		return true
	}

	return false
}

// SetRoute gets a reference to the given Route and assigns it to the Route field.
func (o *SingleRoute) SetRoute(v Route) {
	o.Route = &v
}

func (o SingleRoute) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Route != nil {
		toSerialize["route"] = o.Route
	}
	return json.Marshal(toSerialize)
}

type NullableSingleRoute struct {
	value *SingleRoute
	isSet bool
}

func (v NullableSingleRoute) Get() *SingleRoute {
	return v.value
}

func (v *NullableSingleRoute) Set(val *SingleRoute) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleRoute(val *SingleRoute) *NullableSingleRoute {
	return &NullableSingleRoute{value: val, isSet: true}
}

func (v NullableSingleRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


