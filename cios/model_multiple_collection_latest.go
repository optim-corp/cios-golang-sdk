/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleCollectionLatest struct for MultipleCollectionLatest
type MultipleCollectionLatest struct {
	Total int64 `json:"total"`
	Data []CollectionLatest `json:"data"`
	ImageMap *map[string]interface{} `json:"image_map,omitempty"`
}

// NewMultipleCollectionLatest instantiates a new MultipleCollectionLatest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleCollectionLatest(total int64, data []CollectionLatest, ) *MultipleCollectionLatest {
	this := MultipleCollectionLatest{}
	this.Total = total
	this.Data = data
	return &this
}

// NewMultipleCollectionLatestWithDefaults instantiates a new MultipleCollectionLatest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleCollectionLatestWithDefaults() *MultipleCollectionLatest {
	this := MultipleCollectionLatest{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleCollectionLatest) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleCollectionLatest) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleCollectionLatest) SetTotal(v int64) {
	o.Total = v
}

// GetData returns the Data field value
func (o *MultipleCollectionLatest) GetData() []CollectionLatest {
	if o == nil  {
		var ret []CollectionLatest
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MultipleCollectionLatest) GetDataOk() (*[]CollectionLatest, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MultipleCollectionLatest) SetData(v []CollectionLatest) {
	o.Data = v
}

// GetImageMap returns the ImageMap field value if set, zero value otherwise.
func (o *MultipleCollectionLatest) GetImageMap() map[string]interface{} {
	if o == nil || o.ImageMap == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ImageMap
}

// GetImageMapOk returns a tuple with the ImageMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleCollectionLatest) GetImageMapOk() (*map[string]interface{}, bool) {
	if o == nil || o.ImageMap == nil {
		return nil, false
	}
	return o.ImageMap, true
}

// HasImageMap returns a boolean if a field has been set.
func (o *MultipleCollectionLatest) HasImageMap() bool {
	if o != nil && o.ImageMap != nil {
		return true
	}

	return false
}

// SetImageMap gets a reference to the given map[string]interface{} and assigns it to the ImageMap field.
func (o *MultipleCollectionLatest) SetImageMap(v map[string]interface{}) {
	o.ImageMap = &v
}

func (o MultipleCollectionLatest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if o.ImageMap != nil {
		toSerialize["image_map"] = o.ImageMap
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleCollectionLatest struct {
	value *MultipleCollectionLatest
	isSet bool
}

func (v NullableMultipleCollectionLatest) Get() *MultipleCollectionLatest {
	return v.value
}

func (v *NullableMultipleCollectionLatest) Set(val *MultipleCollectionLatest) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleCollectionLatest) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleCollectionLatest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleCollectionLatest(val *MultipleCollectionLatest) *NullableMultipleCollectionLatest {
	return &NullableMultipleCollectionLatest{value: val, isSet: true}
}

func (v NullableMultipleCollectionLatest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleCollectionLatest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


