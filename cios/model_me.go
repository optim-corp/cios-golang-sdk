/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// Me struct for Me
type Me struct {
	Id string `json:"id"`
	Type string `json:"type"`
	Name *string `json:"name,omitempty"`
	FamilyName *string `json:"family_name,omitempty"`
	GivenName *string `json:"given_name,omitempty"`
	PhoneticFamilyName *string `json:"phonetic_family_name,omitempty"`
	PhoneticGivenName *string `json:"phonetic_given_name,omitempty"`
	PhoneNumber *string `json:"phone_number,omitempty"`
	PhoneNumber2 *string `json:"phone_number_2,omitempty"`
	Language *string `json:"language,omitempty"`
	Email string `json:"email"`
	Emails *[]string `json:"emails,omitempty"`
	Picture *string `json:"picture,omitempty"`
	Corporation *GroupChildren `json:"corporation,omitempty"`
	Groups *[]MeGroups `json:"groups,omitempty"`
}

// NewMe instantiates a new Me object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMe(id string, type_ string, email string, ) *Me {
	this := Me{}
	this.Id = id
	this.Type = type_
	this.Email = email
	return &this
}

// NewMeWithDefaults instantiates a new Me object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMeWithDefaults() *Me {
	this := Me{}
	return &this
}

// GetId returns the Id field value
func (o *Me) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Me) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Me) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *Me) GetType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Me) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Me) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Me) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Me) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Me) SetName(v string) {
	o.Name = &v
}

// GetFamilyName returns the FamilyName field value if set, zero value otherwise.
func (o *Me) GetFamilyName() string {
	if o == nil || o.FamilyName == nil {
		var ret string
		return ret
	}
	return *o.FamilyName
}

// GetFamilyNameOk returns a tuple with the FamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetFamilyNameOk() (*string, bool) {
	if o == nil || o.FamilyName == nil {
		return nil, false
	}
	return o.FamilyName, true
}

// HasFamilyName returns a boolean if a field has been set.
func (o *Me) HasFamilyName() bool {
	if o != nil && o.FamilyName != nil {
		return true
	}

	return false
}

// SetFamilyName gets a reference to the given string and assigns it to the FamilyName field.
func (o *Me) SetFamilyName(v string) {
	o.FamilyName = &v
}

// GetGivenName returns the GivenName field value if set, zero value otherwise.
func (o *Me) GetGivenName() string {
	if o == nil || o.GivenName == nil {
		var ret string
		return ret
	}
	return *o.GivenName
}

// GetGivenNameOk returns a tuple with the GivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetGivenNameOk() (*string, bool) {
	if o == nil || o.GivenName == nil {
		return nil, false
	}
	return o.GivenName, true
}

// HasGivenName returns a boolean if a field has been set.
func (o *Me) HasGivenName() bool {
	if o != nil && o.GivenName != nil {
		return true
	}

	return false
}

// SetGivenName gets a reference to the given string and assigns it to the GivenName field.
func (o *Me) SetGivenName(v string) {
	o.GivenName = &v
}

// GetPhoneticFamilyName returns the PhoneticFamilyName field value if set, zero value otherwise.
func (o *Me) GetPhoneticFamilyName() string {
	if o == nil || o.PhoneticFamilyName == nil {
		var ret string
		return ret
	}
	return *o.PhoneticFamilyName
}

// GetPhoneticFamilyNameOk returns a tuple with the PhoneticFamilyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetPhoneticFamilyNameOk() (*string, bool) {
	if o == nil || o.PhoneticFamilyName == nil {
		return nil, false
	}
	return o.PhoneticFamilyName, true
}

// HasPhoneticFamilyName returns a boolean if a field has been set.
func (o *Me) HasPhoneticFamilyName() bool {
	if o != nil && o.PhoneticFamilyName != nil {
		return true
	}

	return false
}

// SetPhoneticFamilyName gets a reference to the given string and assigns it to the PhoneticFamilyName field.
func (o *Me) SetPhoneticFamilyName(v string) {
	o.PhoneticFamilyName = &v
}

// GetPhoneticGivenName returns the PhoneticGivenName field value if set, zero value otherwise.
func (o *Me) GetPhoneticGivenName() string {
	if o == nil || o.PhoneticGivenName == nil {
		var ret string
		return ret
	}
	return *o.PhoneticGivenName
}

// GetPhoneticGivenNameOk returns a tuple with the PhoneticGivenName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetPhoneticGivenNameOk() (*string, bool) {
	if o == nil || o.PhoneticGivenName == nil {
		return nil, false
	}
	return o.PhoneticGivenName, true
}

// HasPhoneticGivenName returns a boolean if a field has been set.
func (o *Me) HasPhoneticGivenName() bool {
	if o != nil && o.PhoneticGivenName != nil {
		return true
	}

	return false
}

// SetPhoneticGivenName gets a reference to the given string and assigns it to the PhoneticGivenName field.
func (o *Me) SetPhoneticGivenName(v string) {
	o.PhoneticGivenName = &v
}

// GetPhoneNumber returns the PhoneNumber field value if set, zero value otherwise.
func (o *Me) GetPhoneNumber() string {
	if o == nil || o.PhoneNumber == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber
}

// GetPhoneNumberOk returns a tuple with the PhoneNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetPhoneNumberOk() (*string, bool) {
	if o == nil || o.PhoneNumber == nil {
		return nil, false
	}
	return o.PhoneNumber, true
}

// HasPhoneNumber returns a boolean if a field has been set.
func (o *Me) HasPhoneNumber() bool {
	if o != nil && o.PhoneNumber != nil {
		return true
	}

	return false
}

// SetPhoneNumber gets a reference to the given string and assigns it to the PhoneNumber field.
func (o *Me) SetPhoneNumber(v string) {
	o.PhoneNumber = &v
}

// GetPhoneNumber2 returns the PhoneNumber2 field value if set, zero value otherwise.
func (o *Me) GetPhoneNumber2() string {
	if o == nil || o.PhoneNumber2 == nil {
		var ret string
		return ret
	}
	return *o.PhoneNumber2
}

// GetPhoneNumber2Ok returns a tuple with the PhoneNumber2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetPhoneNumber2Ok() (*string, bool) {
	if o == nil || o.PhoneNumber2 == nil {
		return nil, false
	}
	return o.PhoneNumber2, true
}

// HasPhoneNumber2 returns a boolean if a field has been set.
func (o *Me) HasPhoneNumber2() bool {
	if o != nil && o.PhoneNumber2 != nil {
		return true
	}

	return false
}

// SetPhoneNumber2 gets a reference to the given string and assigns it to the PhoneNumber2 field.
func (o *Me) SetPhoneNumber2(v string) {
	o.PhoneNumber2 = &v
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *Me) GetLanguage() string {
	if o == nil || o.Language == nil {
		var ret string
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetLanguageOk() (*string, bool) {
	if o == nil || o.Language == nil {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *Me) HasLanguage() bool {
	if o != nil && o.Language != nil {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given string and assigns it to the Language field.
func (o *Me) SetLanguage(v string) {
	o.Language = &v
}

// GetEmail returns the Email field value
func (o *Me) GetEmail() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *Me) GetEmailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *Me) SetEmail(v string) {
	o.Email = v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *Me) GetEmails() []string {
	if o == nil || o.Emails == nil {
		var ret []string
		return ret
	}
	return *o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetEmailsOk() (*[]string, bool) {
	if o == nil || o.Emails == nil {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *Me) HasEmails() bool {
	if o != nil && o.Emails != nil {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []string and assigns it to the Emails field.
func (o *Me) SetEmails(v []string) {
	o.Emails = &v
}

// GetPicture returns the Picture field value if set, zero value otherwise.
func (o *Me) GetPicture() string {
	if o == nil || o.Picture == nil {
		var ret string
		return ret
	}
	return *o.Picture
}

// GetPictureOk returns a tuple with the Picture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetPictureOk() (*string, bool) {
	if o == nil || o.Picture == nil {
		return nil, false
	}
	return o.Picture, true
}

// HasPicture returns a boolean if a field has been set.
func (o *Me) HasPicture() bool {
	if o != nil && o.Picture != nil {
		return true
	}

	return false
}

// SetPicture gets a reference to the given string and assigns it to the Picture field.
func (o *Me) SetPicture(v string) {
	o.Picture = &v
}

// GetCorporation returns the Corporation field value if set, zero value otherwise.
func (o *Me) GetCorporation() GroupChildren {
	if o == nil || o.Corporation == nil {
		var ret GroupChildren
		return ret
	}
	return *o.Corporation
}

// GetCorporationOk returns a tuple with the Corporation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetCorporationOk() (*GroupChildren, bool) {
	if o == nil || o.Corporation == nil {
		return nil, false
	}
	return o.Corporation, true
}

// HasCorporation returns a boolean if a field has been set.
func (o *Me) HasCorporation() bool {
	if o != nil && o.Corporation != nil {
		return true
	}

	return false
}

// SetCorporation gets a reference to the given GroupChildren and assigns it to the Corporation field.
func (o *Me) SetCorporation(v GroupChildren) {
	o.Corporation = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *Me) GetGroups() []MeGroups {
	if o == nil || o.Groups == nil {
		var ret []MeGroups
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Me) GetGroupsOk() (*[]MeGroups, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *Me) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []MeGroups and assigns it to the Groups field.
func (o *Me) SetGroups(v []MeGroups) {
	o.Groups = &v
}

func (o Me) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.FamilyName != nil {
		toSerialize["family_name"] = o.FamilyName
	}
	if o.GivenName != nil {
		toSerialize["given_name"] = o.GivenName
	}
	if o.PhoneticFamilyName != nil {
		toSerialize["phonetic_family_name"] = o.PhoneticFamilyName
	}
	if o.PhoneticGivenName != nil {
		toSerialize["phonetic_given_name"] = o.PhoneticGivenName
	}
	if o.PhoneNumber != nil {
		toSerialize["phone_number"] = o.PhoneNumber
	}
	if o.PhoneNumber2 != nil {
		toSerialize["phone_number_2"] = o.PhoneNumber2
	}
	if o.Language != nil {
		toSerialize["language"] = o.Language
	}
	if true {
		toSerialize["email"] = o.Email
	}
	if o.Emails != nil {
		toSerialize["emails"] = o.Emails
	}
	if o.Picture != nil {
		toSerialize["picture"] = o.Picture
	}
	if o.Corporation != nil {
		toSerialize["corporation"] = o.Corporation
	}
	if o.Groups != nil {
		toSerialize["groups"] = o.Groups
	}
	return json.Marshal(toSerialize)
}

type NullableMe struct {
	value *Me
	isSet bool
}

func (v NullableMe) Get() *Me {
	return v.value
}

func (v *NullableMe) Set(val *Me) {
	v.value = val
	v.isSet = true
}

func (v NullableMe) IsSet() bool {
	return v.isSet
}

func (v *NullableMe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMe(val *Me) *NullableMe {
	return &NullableMe{value: val, isSet: true}
}

func (v NullableMe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


