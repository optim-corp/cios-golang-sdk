/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// DataStoreConfig struct for DataStoreConfig
type DataStoreConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
	MaxSize *string `json:"max_size,omitempty"`
	MaxCount *string `json:"max_count,omitempty"`
}

// NewDataStoreConfig instantiates a new DataStoreConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStoreConfig() *DataStoreConfig {
	this := DataStoreConfig{}
	return &this
}

// NewDataStoreConfigWithDefaults instantiates a new DataStoreConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreConfigWithDefaults() *DataStoreConfig {
	this := DataStoreConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DataStoreConfig) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DataStoreConfig) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DataStoreConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMaxSize returns the MaxSize field value if set, zero value otherwise.
func (o *DataStoreConfig) GetMaxSize() string {
	if o == nil || o.MaxSize == nil {
		var ret string
		return ret
	}
	return *o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetMaxSizeOk() (*string, bool) {
	if o == nil || o.MaxSize == nil {
		return nil, false
	}
	return o.MaxSize, true
}

// HasMaxSize returns a boolean if a field has been set.
func (o *DataStoreConfig) HasMaxSize() bool {
	if o != nil && o.MaxSize != nil {
		return true
	}

	return false
}

// SetMaxSize gets a reference to the given string and assigns it to the MaxSize field.
func (o *DataStoreConfig) SetMaxSize(v string) {
	o.MaxSize = &v
}

// GetMaxCount returns the MaxCount field value if set, zero value otherwise.
func (o *DataStoreConfig) GetMaxCount() string {
	if o == nil || o.MaxCount == nil {
		var ret string
		return ret
	}
	return *o.MaxCount
}

// GetMaxCountOk returns a tuple with the MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreConfig) GetMaxCountOk() (*string, bool) {
	if o == nil || o.MaxCount == nil {
		return nil, false
	}
	return o.MaxCount, true
}

// HasMaxCount returns a boolean if a field has been set.
func (o *DataStoreConfig) HasMaxCount() bool {
	if o != nil && o.MaxCount != nil {
		return true
	}

	return false
}

// SetMaxCount gets a reference to the given string and assigns it to the MaxCount field.
func (o *DataStoreConfig) SetMaxCount(v string) {
	o.MaxCount = &v
}

func (o DataStoreConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MaxSize != nil {
		toSerialize["max_size"] = o.MaxSize
	}
	if o.MaxCount != nil {
		toSerialize["max_count"] = o.MaxCount
	}
	return json.Marshal(toSerialize)
}

type NullableDataStoreConfig struct {
	value *DataStoreConfig
	isSet bool
}

func (v NullableDataStoreConfig) Get() *DataStoreConfig {
	return v.value
}

func (v *NullableDataStoreConfig) Set(val *DataStoreConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreConfig(val *DataStoreConfig) *NullableDataStoreConfig {
	return &NullableDataStoreConfig{value: val, isSet: true}
}

func (v NullableDataStoreConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


