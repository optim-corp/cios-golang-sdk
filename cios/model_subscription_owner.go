/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SubscriptionOwner struct for SubscriptionOwner
type SubscriptionOwner struct {
	// Corporation: 企業 User: ユーザー 
	Type *string `json:"type,omitempty"`
	Id string `json:"id"`
}

// NewSubscriptionOwner instantiates a new SubscriptionOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubscriptionOwner(id string, ) *SubscriptionOwner {
	this := SubscriptionOwner{}
	this.Id = id
	return &this
}

// NewSubscriptionOwnerWithDefaults instantiates a new SubscriptionOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubscriptionOwnerWithDefaults() *SubscriptionOwner {
	this := SubscriptionOwner{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SubscriptionOwner) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubscriptionOwner) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SubscriptionOwner) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SubscriptionOwner) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value
func (o *SubscriptionOwner) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubscriptionOwner) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubscriptionOwner) SetId(v string) {
	o.Id = v
}

func (o SubscriptionOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableSubscriptionOwner struct {
	value *SubscriptionOwner
	isSet bool
}

func (v NullableSubscriptionOwner) Get() *SubscriptionOwner {
	return v.value
}

func (v *NullableSubscriptionOwner) Set(val *SubscriptionOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableSubscriptionOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableSubscriptionOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubscriptionOwner(val *SubscriptionOwner) *NullableSubscriptionOwner {
	return &NullableSubscriptionOwner{value: val, isSet: true}
}

func (v NullableSubscriptionOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubscriptionOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


