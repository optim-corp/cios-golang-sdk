/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleNode struct for MultipleNode
type MultipleNode struct {
	Total int64 `json:"total"`
	Nodes []Node `json:"nodes"`
}

// NewMultipleNode instantiates a new MultipleNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleNode(total int64, nodes []Node, ) *MultipleNode {
	this := MultipleNode{}
	this.Total = total
	this.Nodes = nodes
	return &this
}

// NewMultipleNodeWithDefaults instantiates a new MultipleNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleNodeWithDefaults() *MultipleNode {
	this := MultipleNode{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleNode) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleNode) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleNode) SetTotal(v int64) {
	o.Total = v
}

// GetNodes returns the Nodes field value
func (o *MultipleNode) GetNodes() []Node {
	if o == nil  {
		var ret []Node
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *MultipleNode) GetNodesOk() (*[]Node, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Nodes, true
}

// SetNodes sets field value
func (o *MultipleNode) SetNodes(v []Node) {
	o.Nodes = v
}

func (o MultipleNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["nodes"] = o.Nodes
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleNode struct {
	value *MultipleNode
	isSet bool
}

func (v NullableMultipleNode) Get() *MultipleNode {
	return v.value
}

func (v *NullableMultipleNode) Set(val *MultipleNode) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleNode) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleNode(val *MultipleNode) *NullableMultipleNode {
	return &NullableMultipleNode{value: val, isSet: true}
}

func (v NullableMultipleNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


