/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// CollectionLatest struct for CollectionLatest
type CollectionLatest struct {
	ResourceOwnerId *string `json:"resource_owner_id,omitempty"`
	Location *CollectionLocation `json:"location,omitempty"`
	Measurements *map[string]interface{} `json:"measurements,omitempty"`
	SeriesId *string `json:"series_id,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	Image *string `json:"image,omitempty"`
	ImageType *string `json:"image_type,omitempty"`
}

// NewCollectionLatest instantiates a new CollectionLatest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCollectionLatest() *CollectionLatest {
	this := CollectionLatest{}
	return &this
}

// NewCollectionLatestWithDefaults instantiates a new CollectionLatest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCollectionLatestWithDefaults() *CollectionLatest {
	this := CollectionLatest{}
	return &this
}

// GetResourceOwnerId returns the ResourceOwnerId field value if set, zero value otherwise.
func (o *CollectionLatest) GetResourceOwnerId() string {
	if o == nil || o.ResourceOwnerId == nil {
		var ret string
		return ret
	}
	return *o.ResourceOwnerId
}

// GetResourceOwnerIdOk returns a tuple with the ResourceOwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionLatest) GetResourceOwnerIdOk() (*string, bool) {
	if o == nil || o.ResourceOwnerId == nil {
		return nil, false
	}
	return o.ResourceOwnerId, true
}

// HasResourceOwnerId returns a boolean if a field has been set.
func (o *CollectionLatest) HasResourceOwnerId() bool {
	if o != nil && o.ResourceOwnerId != nil {
		return true
	}

	return false
}

// SetResourceOwnerId gets a reference to the given string and assigns it to the ResourceOwnerId field.
func (o *CollectionLatest) SetResourceOwnerId(v string) {
	o.ResourceOwnerId = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *CollectionLatest) GetLocation() CollectionLocation {
	if o == nil || o.Location == nil {
		var ret CollectionLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionLatest) GetLocationOk() (*CollectionLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *CollectionLatest) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given CollectionLocation and assigns it to the Location field.
func (o *CollectionLatest) SetLocation(v CollectionLocation) {
	o.Location = &v
}

// GetMeasurements returns the Measurements field value if set, zero value otherwise.
func (o *CollectionLatest) GetMeasurements() map[string]interface{} {
	if o == nil || o.Measurements == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Measurements
}

// GetMeasurementsOk returns a tuple with the Measurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionLatest) GetMeasurementsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Measurements == nil {
		return nil, false
	}
	return o.Measurements, true
}

// HasMeasurements returns a boolean if a field has been set.
func (o *CollectionLatest) HasMeasurements() bool {
	if o != nil && o.Measurements != nil {
		return true
	}

	return false
}

// SetMeasurements gets a reference to the given map[string]interface{} and assigns it to the Measurements field.
func (o *CollectionLatest) SetMeasurements(v map[string]interface{}) {
	o.Measurements = &v
}

// GetSeriesId returns the SeriesId field value if set, zero value otherwise.
func (o *CollectionLatest) GetSeriesId() string {
	if o == nil || o.SeriesId == nil {
		var ret string
		return ret
	}
	return *o.SeriesId
}

// GetSeriesIdOk returns a tuple with the SeriesId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionLatest) GetSeriesIdOk() (*string, bool) {
	if o == nil || o.SeriesId == nil {
		return nil, false
	}
	return o.SeriesId, true
}

// HasSeriesId returns a boolean if a field has been set.
func (o *CollectionLatest) HasSeriesId() bool {
	if o != nil && o.SeriesId != nil {
		return true
	}

	return false
}

// SetSeriesId gets a reference to the given string and assigns it to the SeriesId field.
func (o *CollectionLatest) SetSeriesId(v string) {
	o.SeriesId = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *CollectionLatest) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionLatest) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *CollectionLatest) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *CollectionLatest) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *CollectionLatest) GetImage() string {
	if o == nil || o.Image == nil {
		var ret string
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionLatest) GetImageOk() (*string, bool) {
	if o == nil || o.Image == nil {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *CollectionLatest) HasImage() bool {
	if o != nil && o.Image != nil {
		return true
	}

	return false
}

// SetImage gets a reference to the given string and assigns it to the Image field.
func (o *CollectionLatest) SetImage(v string) {
	o.Image = &v
}

// GetImageType returns the ImageType field value if set, zero value otherwise.
func (o *CollectionLatest) GetImageType() string {
	if o == nil || o.ImageType == nil {
		var ret string
		return ret
	}
	return *o.ImageType
}

// GetImageTypeOk returns a tuple with the ImageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CollectionLatest) GetImageTypeOk() (*string, bool) {
	if o == nil || o.ImageType == nil {
		return nil, false
	}
	return o.ImageType, true
}

// HasImageType returns a boolean if a field has been set.
func (o *CollectionLatest) HasImageType() bool {
	if o != nil && o.ImageType != nil {
		return true
	}

	return false
}

// SetImageType gets a reference to the given string and assigns it to the ImageType field.
func (o *CollectionLatest) SetImageType(v string) {
	o.ImageType = &v
}

func (o CollectionLatest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceOwnerId != nil {
		toSerialize["resource_owner_id"] = o.ResourceOwnerId
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Measurements != nil {
		toSerialize["measurements"] = o.Measurements
	}
	if o.SeriesId != nil {
		toSerialize["series_id"] = o.SeriesId
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Image != nil {
		toSerialize["image"] = o.Image
	}
	if o.ImageType != nil {
		toSerialize["image_type"] = o.ImageType
	}
	return json.Marshal(toSerialize)
}

type NullableCollectionLatest struct {
	value *CollectionLatest
	isSet bool
}

func (v NullableCollectionLatest) Get() *CollectionLatest {
	return v.value
}

func (v *NullableCollectionLatest) Set(val *CollectionLatest) {
	v.value = val
	v.isSet = true
}

func (v NullableCollectionLatest) IsSet() bool {
	return v.isSet
}

func (v *NullableCollectionLatest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCollectionLatest(val *CollectionLatest) *NullableCollectionLatest {
	return &NullableCollectionLatest{value: val, isSet: true}
}

func (v NullableCollectionLatest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCollectionLatest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


