/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MessagingConfig struct for MessagingConfig
type MessagingConfig struct {
	Enabled *bool `json:"enabled,omitempty"`
	Persisted *bool `json:"persisted,omitempty"`
}

// NewMessagingConfig instantiates a new MessagingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessagingConfig() *MessagingConfig {
	this := MessagingConfig{}
	return &this
}

// NewMessagingConfigWithDefaults instantiates a new MessagingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessagingConfigWithDefaults() *MessagingConfig {
	this := MessagingConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *MessagingConfig) GetEnabled() bool {
	if o == nil || o.Enabled == nil {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagingConfig) GetEnabledOk() (*bool, bool) {
	if o == nil || o.Enabled == nil {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *MessagingConfig) HasEnabled() bool {
	if o != nil && o.Enabled != nil {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *MessagingConfig) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPersisted returns the Persisted field value if set, zero value otherwise.
func (o *MessagingConfig) GetPersisted() bool {
	if o == nil || o.Persisted == nil {
		var ret bool
		return ret
	}
	return *o.Persisted
}

// GetPersistedOk returns a tuple with the Persisted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MessagingConfig) GetPersistedOk() (*bool, bool) {
	if o == nil || o.Persisted == nil {
		return nil, false
	}
	return o.Persisted, true
}

// HasPersisted returns a boolean if a field has been set.
func (o *MessagingConfig) HasPersisted() bool {
	if o != nil && o.Persisted != nil {
		return true
	}

	return false
}

// SetPersisted gets a reference to the given bool and assigns it to the Persisted field.
func (o *MessagingConfig) SetPersisted(v bool) {
	o.Persisted = &v
}

func (o MessagingConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled != nil {
		toSerialize["enabled"] = o.Enabled
	}
	if o.Persisted != nil {
		toSerialize["persisted"] = o.Persisted
	}
	return json.Marshal(toSerialize)
}

type NullableMessagingConfig struct {
	value *MessagingConfig
	isSet bool
}

func (v NullableMessagingConfig) Get() *MessagingConfig {
	return v.value
}

func (v *NullableMessagingConfig) Set(val *MessagingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMessagingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMessagingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessagingConfig(val *MessagingConfig) *NullableMessagingConfig {
	return &NullableMessagingConfig{value: val, isSet: true}
}

func (v NullableMessagingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessagingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


