/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// NodeRequest struct for NodeRequest
type NodeRequest struct {
	Name string `json:"name"`
	ParentNodeId *string `json:"parent_node_id,omitempty"`
}

// NewNodeRequest instantiates a new NodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeRequest(name string, ) *NodeRequest {
	this := NodeRequest{}
	this.Name = name
	return &this
}

// NewNodeRequestWithDefaults instantiates a new NodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeRequestWithDefaults() *NodeRequest {
	this := NodeRequest{}
	return &this
}

// GetName returns the Name field value
func (o *NodeRequest) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodeRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodeRequest) SetName(v string) {
	o.Name = v
}

// GetParentNodeId returns the ParentNodeId field value if set, zero value otherwise.
func (o *NodeRequest) GetParentNodeId() string {
	if o == nil || o.ParentNodeId == nil {
		var ret string
		return ret
	}
	return *o.ParentNodeId
}

// GetParentNodeIdOk returns a tuple with the ParentNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeRequest) GetParentNodeIdOk() (*string, bool) {
	if o == nil || o.ParentNodeId == nil {
		return nil, false
	}
	return o.ParentNodeId, true
}

// HasParentNodeId returns a boolean if a field has been set.
func (o *NodeRequest) HasParentNodeId() bool {
	if o != nil && o.ParentNodeId != nil {
		return true
	}

	return false
}

// SetParentNodeId gets a reference to the given string and assigns it to the ParentNodeId field.
func (o *NodeRequest) SetParentNodeId(v string) {
	o.ParentNodeId = &v
}

func (o NodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ParentNodeId != nil {
		toSerialize["parent_node_id"] = o.ParentNodeId
	}
	return json.Marshal(toSerialize)
}

type NullableNodeRequest struct {
	value *NodeRequest
	isSet bool
}

func (v NullableNodeRequest) Get() *NodeRequest {
	return v.value
}

func (v *NullableNodeRequest) Set(val *NodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeRequest(val *NodeRequest) *NullableNodeRequest {
	return &NullableNodeRequest{value: val, isSet: true}
}

func (v NullableNodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


