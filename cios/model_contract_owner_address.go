/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// ContractOwnerAddress struct for ContractOwnerAddress
type ContractOwnerAddress struct {
	// ISO 3166-1 alpha-2
	Country *string `json:"country,omitempty"`
	ZipCode *string `json:"zip_code,omitempty"`
	State *string `json:"state,omitempty"`
	City *string `json:"city,omitempty"`
	Address1 *string `json:"address_1,omitempty"`
	Address2 *string `json:"address_2,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
	CustomFields *map[string]interface{} `json:"custom_fields,omitempty"`
}

// NewContractOwnerAddress instantiates a new ContractOwnerAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractOwnerAddress() *ContractOwnerAddress {
	this := ContractOwnerAddress{}
	return &this
}

// NewContractOwnerAddressWithDefaults instantiates a new ContractOwnerAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractOwnerAddressWithDefaults() *ContractOwnerAddress {
	this := ContractOwnerAddress{}
	return &this
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetCountry() string {
	if o == nil || o.Country == nil {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetCountryOk() (*string, bool) {
	if o == nil || o.Country == nil {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasCountry() bool {
	if o != nil && o.Country != nil {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ContractOwnerAddress) SetCountry(v string) {
	o.Country = &v
}

// GetZipCode returns the ZipCode field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetZipCode() string {
	if o == nil || o.ZipCode == nil {
		var ret string
		return ret
	}
	return *o.ZipCode
}

// GetZipCodeOk returns a tuple with the ZipCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetZipCodeOk() (*string, bool) {
	if o == nil || o.ZipCode == nil {
		return nil, false
	}
	return o.ZipCode, true
}

// HasZipCode returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasZipCode() bool {
	if o != nil && o.ZipCode != nil {
		return true
	}

	return false
}

// SetZipCode gets a reference to the given string and assigns it to the ZipCode field.
func (o *ContractOwnerAddress) SetZipCode(v string) {
	o.ZipCode = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetState() string {
	if o == nil || o.State == nil {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetStateOk() (*string, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *ContractOwnerAddress) SetState(v string) {
	o.State = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetCity() string {
	if o == nil || o.City == nil {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetCityOk() (*string, bool) {
	if o == nil || o.City == nil {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasCity() bool {
	if o != nil && o.City != nil {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *ContractOwnerAddress) SetCity(v string) {
	o.City = &v
}

// GetAddress1 returns the Address1 field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetAddress1() string {
	if o == nil || o.Address1 == nil {
		var ret string
		return ret
	}
	return *o.Address1
}

// GetAddress1Ok returns a tuple with the Address1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetAddress1Ok() (*string, bool) {
	if o == nil || o.Address1 == nil {
		return nil, false
	}
	return o.Address1, true
}

// HasAddress1 returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasAddress1() bool {
	if o != nil && o.Address1 != nil {
		return true
	}

	return false
}

// SetAddress1 gets a reference to the given string and assigns it to the Address1 field.
func (o *ContractOwnerAddress) SetAddress1(v string) {
	o.Address1 = &v
}

// GetAddress2 returns the Address2 field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetAddress2() string {
	if o == nil || o.Address2 == nil {
		var ret string
		return ret
	}
	return *o.Address2
}

// GetAddress2Ok returns a tuple with the Address2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetAddress2Ok() (*string, bool) {
	if o == nil || o.Address2 == nil {
		return nil, false
	}
	return o.Address2, true
}

// HasAddress2 returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasAddress2() bool {
	if o != nil && o.Address2 != nil {
		return true
	}

	return false
}

// SetAddress2 gets a reference to the given string and assigns it to the Address2 field.
func (o *ContractOwnerAddress) SetAddress2(v string) {
	o.Address2 = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ContractOwnerAddress) SetTags(v []string) {
	o.Tags = &v
}

// GetCustomFields returns the CustomFields field value if set, zero value otherwise.
func (o *ContractOwnerAddress) GetCustomFields() map[string]interface{} {
	if o == nil || o.CustomFields == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CustomFields
}

// GetCustomFieldsOk returns a tuple with the CustomFields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractOwnerAddress) GetCustomFieldsOk() (*map[string]interface{}, bool) {
	if o == nil || o.CustomFields == nil {
		return nil, false
	}
	return o.CustomFields, true
}

// HasCustomFields returns a boolean if a field has been set.
func (o *ContractOwnerAddress) HasCustomFields() bool {
	if o != nil && o.CustomFields != nil {
		return true
	}

	return false
}

// SetCustomFields gets a reference to the given map[string]interface{} and assigns it to the CustomFields field.
func (o *ContractOwnerAddress) SetCustomFields(v map[string]interface{}) {
	o.CustomFields = &v
}

func (o ContractOwnerAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Country != nil {
		toSerialize["country"] = o.Country
	}
	if o.ZipCode != nil {
		toSerialize["zip_code"] = o.ZipCode
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.City != nil {
		toSerialize["city"] = o.City
	}
	if o.Address1 != nil {
		toSerialize["address_1"] = o.Address1
	}
	if o.Address2 != nil {
		toSerialize["address_2"] = o.Address2
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.CustomFields != nil {
		toSerialize["custom_fields"] = o.CustomFields
	}
	return json.Marshal(toSerialize)
}

type NullableContractOwnerAddress struct {
	value *ContractOwnerAddress
	isSet bool
}

func (v NullableContractOwnerAddress) Get() *ContractOwnerAddress {
	return v.value
}

func (v *NullableContractOwnerAddress) Set(val *ContractOwnerAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableContractOwnerAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableContractOwnerAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractOwnerAddress(val *ContractOwnerAddress) *NullableContractOwnerAddress {
	return &NullableContractOwnerAddress{value: val, isSet: true}
}

func (v NullableContractOwnerAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractOwnerAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


