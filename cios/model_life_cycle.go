/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// LifeCycle struct for LifeCycle
type LifeCycle struct {
	Id string `json:"id"`
	EventKind string `json:"event_kind"`
	EventMode string `json:"event_mode"`
	EventType string `json:"event_type"`
	BeforeId *string `json:"before_id,omitempty"`
	BeforeComponent *DeviceEntitiesComponent `json:"before_component,omitempty"`
	AfterId *string `json:"after_id,omitempty"`
	AfterComponent *DeviceEntitiesComponent `json:"after_component,omitempty"`
	// ナノ秒
	EventAt string `json:"event_at"`
	Note *string `json:"note,omitempty"`
	ResourceOwnerId string `json:"resource_owner_id"`
}

// NewLifeCycle instantiates a new LifeCycle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifeCycle(id string, eventKind string, eventMode string, eventType string, eventAt string, resourceOwnerId string, ) *LifeCycle {
	this := LifeCycle{}
	this.Id = id
	this.EventKind = eventKind
	this.EventMode = eventMode
	this.EventType = eventType
	this.EventAt = eventAt
	this.ResourceOwnerId = resourceOwnerId
	return &this
}

// NewLifeCycleWithDefaults instantiates a new LifeCycle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifeCycleWithDefaults() *LifeCycle {
	this := LifeCycle{}
	return &this
}

// GetId returns the Id field value
func (o *LifeCycle) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LifeCycle) SetId(v string) {
	o.Id = v
}

// GetEventKind returns the EventKind field value
func (o *LifeCycle) GetEventKind() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventKind
}

// GetEventKindOk returns a tuple with the EventKind field value
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetEventKindOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventKind, true
}

// SetEventKind sets field value
func (o *LifeCycle) SetEventKind(v string) {
	o.EventKind = v
}

// GetEventMode returns the EventMode field value
func (o *LifeCycle) GetEventMode() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventMode
}

// GetEventModeOk returns a tuple with the EventMode field value
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetEventModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventMode, true
}

// SetEventMode sets field value
func (o *LifeCycle) SetEventMode(v string) {
	o.EventMode = v
}

// GetEventType returns the EventType field value
func (o *LifeCycle) GetEventType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetEventTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *LifeCycle) SetEventType(v string) {
	o.EventType = v
}

// GetBeforeId returns the BeforeId field value if set, zero value otherwise.
func (o *LifeCycle) GetBeforeId() string {
	if o == nil || o.BeforeId == nil {
		var ret string
		return ret
	}
	return *o.BeforeId
}

// GetBeforeIdOk returns a tuple with the BeforeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetBeforeIdOk() (*string, bool) {
	if o == nil || o.BeforeId == nil {
		return nil, false
	}
	return o.BeforeId, true
}

// HasBeforeId returns a boolean if a field has been set.
func (o *LifeCycle) HasBeforeId() bool {
	if o != nil && o.BeforeId != nil {
		return true
	}

	return false
}

// SetBeforeId gets a reference to the given string and assigns it to the BeforeId field.
func (o *LifeCycle) SetBeforeId(v string) {
	o.BeforeId = &v
}

// GetBeforeComponent returns the BeforeComponent field value if set, zero value otherwise.
func (o *LifeCycle) GetBeforeComponent() DeviceEntitiesComponent {
	if o == nil || o.BeforeComponent == nil {
		var ret DeviceEntitiesComponent
		return ret
	}
	return *o.BeforeComponent
}

// GetBeforeComponentOk returns a tuple with the BeforeComponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetBeforeComponentOk() (*DeviceEntitiesComponent, bool) {
	if o == nil || o.BeforeComponent == nil {
		return nil, false
	}
	return o.BeforeComponent, true
}

// HasBeforeComponent returns a boolean if a field has been set.
func (o *LifeCycle) HasBeforeComponent() bool {
	if o != nil && o.BeforeComponent != nil {
		return true
	}

	return false
}

// SetBeforeComponent gets a reference to the given DeviceEntitiesComponent and assigns it to the BeforeComponent field.
func (o *LifeCycle) SetBeforeComponent(v DeviceEntitiesComponent) {
	o.BeforeComponent = &v
}

// GetAfterId returns the AfterId field value if set, zero value otherwise.
func (o *LifeCycle) GetAfterId() string {
	if o == nil || o.AfterId == nil {
		var ret string
		return ret
	}
	return *o.AfterId
}

// GetAfterIdOk returns a tuple with the AfterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetAfterIdOk() (*string, bool) {
	if o == nil || o.AfterId == nil {
		return nil, false
	}
	return o.AfterId, true
}

// HasAfterId returns a boolean if a field has been set.
func (o *LifeCycle) HasAfterId() bool {
	if o != nil && o.AfterId != nil {
		return true
	}

	return false
}

// SetAfterId gets a reference to the given string and assigns it to the AfterId field.
func (o *LifeCycle) SetAfterId(v string) {
	o.AfterId = &v
}

// GetAfterComponent returns the AfterComponent field value if set, zero value otherwise.
func (o *LifeCycle) GetAfterComponent() DeviceEntitiesComponent {
	if o == nil || o.AfterComponent == nil {
		var ret DeviceEntitiesComponent
		return ret
	}
	return *o.AfterComponent
}

// GetAfterComponentOk returns a tuple with the AfterComponent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetAfterComponentOk() (*DeviceEntitiesComponent, bool) {
	if o == nil || o.AfterComponent == nil {
		return nil, false
	}
	return o.AfterComponent, true
}

// HasAfterComponent returns a boolean if a field has been set.
func (o *LifeCycle) HasAfterComponent() bool {
	if o != nil && o.AfterComponent != nil {
		return true
	}

	return false
}

// SetAfterComponent gets a reference to the given DeviceEntitiesComponent and assigns it to the AfterComponent field.
func (o *LifeCycle) SetAfterComponent(v DeviceEntitiesComponent) {
	o.AfterComponent = &v
}

// GetEventAt returns the EventAt field value
func (o *LifeCycle) GetEventAt() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.EventAt
}

// GetEventAtOk returns a tuple with the EventAt field value
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetEventAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventAt, true
}

// SetEventAt sets field value
func (o *LifeCycle) SetEventAt(v string) {
	o.EventAt = v
}

// GetNote returns the Note field value if set, zero value otherwise.
func (o *LifeCycle) GetNote() string {
	if o == nil || o.Note == nil {
		var ret string
		return ret
	}
	return *o.Note
}

// GetNoteOk returns a tuple with the Note field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetNoteOk() (*string, bool) {
	if o == nil || o.Note == nil {
		return nil, false
	}
	return o.Note, true
}

// HasNote returns a boolean if a field has been set.
func (o *LifeCycle) HasNote() bool {
	if o != nil && o.Note != nil {
		return true
	}

	return false
}

// SetNote gets a reference to the given string and assigns it to the Note field.
func (o *LifeCycle) SetNote(v string) {
	o.Note = &v
}

// GetResourceOwnerId returns the ResourceOwnerId field value
func (o *LifeCycle) GetResourceOwnerId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ResourceOwnerId
}

// GetResourceOwnerIdOk returns a tuple with the ResourceOwnerId field value
// and a boolean to check if the value has been set.
func (o *LifeCycle) GetResourceOwnerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceOwnerId, true
}

// SetResourceOwnerId sets field value
func (o *LifeCycle) SetResourceOwnerId(v string) {
	o.ResourceOwnerId = v
}

func (o LifeCycle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["event_kind"] = o.EventKind
	}
	if true {
		toSerialize["event_mode"] = o.EventMode
	}
	if true {
		toSerialize["event_type"] = o.EventType
	}
	if o.BeforeId != nil {
		toSerialize["before_id"] = o.BeforeId
	}
	if o.BeforeComponent != nil {
		toSerialize["before_component"] = o.BeforeComponent
	}
	if o.AfterId != nil {
		toSerialize["after_id"] = o.AfterId
	}
	if o.AfterComponent != nil {
		toSerialize["after_component"] = o.AfterComponent
	}
	if true {
		toSerialize["event_at"] = o.EventAt
	}
	if o.Note != nil {
		toSerialize["note"] = o.Note
	}
	if true {
		toSerialize["resource_owner_id"] = o.ResourceOwnerId
	}
	return json.Marshal(toSerialize)
}

type NullableLifeCycle struct {
	value *LifeCycle
	isSet bool
}

func (v NullableLifeCycle) Get() *LifeCycle {
	return v.value
}

func (v *NullableLifeCycle) Set(val *LifeCycle) {
	v.value = val
	v.isSet = true
}

func (v NullableLifeCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableLifeCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifeCycle(val *LifeCycle) *NullableLifeCycle {
	return &NullableLifeCycle{value: val, isSet: true}
}

func (v NullableLifeCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifeCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


