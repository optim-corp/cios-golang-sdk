/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// VideostreamingOperationsApiService VideostreamingOperationsApi service
type VideostreamingOperationsApiService service

type ApiCreateVideoStreamsPlayRequest struct {
	Ctx _context.Context
	ApiService *VideostreamingOperationsApiService
	P_videoId string
}


func (r ApiCreateVideoStreamsPlayRequest) Execute() (SingleRoom, *_nethttp.Response, error) {
	return r.ApiService.CreateVideoStreamsPlayExecute(r)
}

/*
 * CreateVideoStreamsPlay Method for CreateVideoStreamsPlay
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId
 * @return ApiCreateVideoStreamsPlayRequest
 */
func (a *VideostreamingOperationsApiService) CreateVideoStreamsPlay(Ctx _context.Context, videoId string) ApiCreateVideoStreamsPlayRequest {
	return ApiCreateVideoStreamsPlayRequest{
		ApiService: a,
		Ctx: Ctx,
		P_videoId: videoId,
	}
}

/*
 * Execute executes the request
 * @return SingleRoom
 */
func (a *VideostreamingOperationsApiService) CreateVideoStreamsPlayExecute(r ApiCreateVideoStreamsPlayRequest) (SingleRoom, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleRoom
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "VideostreamingOperationsApiService.CreateVideoStreamsPlay")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/video_streams/{video_id}/play"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", _neturl.PathEscape(parameterToString(r.P_videoId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateVideoStreamsStopRequest struct {
	Ctx _context.Context
	ApiService *VideostreamingOperationsApiService
	P_videoId string
}


func (r ApiCreateVideoStreamsStopRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CreateVideoStreamsStopExecute(r)
}

/*
 * CreateVideoStreamsStop Method for CreateVideoStreamsStop
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId
 * @return ApiCreateVideoStreamsStopRequest
 */
func (a *VideostreamingOperationsApiService) CreateVideoStreamsStop(Ctx _context.Context, videoId string) ApiCreateVideoStreamsStopRequest {
	return ApiCreateVideoStreamsStopRequest{
		ApiService: a,
		Ctx: Ctx,
		P_videoId: videoId,
	}
}

/*
 * Execute executes the request
 */
func (a *VideostreamingOperationsApiService) CreateVideoStreamsStopExecute(r ApiCreateVideoStreamsStopRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "VideostreamingOperationsApiService.CreateVideoStreamsStop")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/video_streams/{video_id}/stop"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", _neturl.PathEscape(parameterToString(r.P_videoId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetVideoStreamsRequest struct {
	Ctx _context.Context
	ApiService *VideostreamingOperationsApiService
	P_videoId string
}


func (r ApiGetVideoStreamsRequest) Execute() (SingleVideo, *_nethttp.Response, error) {
	return r.ApiService.GetVideoStreamsExecute(r)
}

/*
 * GetVideoStreams Method for GetVideoStreams
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId
 * @return ApiGetVideoStreamsRequest
 */
func (a *VideostreamingOperationsApiService) GetVideoStreams(Ctx _context.Context, videoId string) ApiGetVideoStreamsRequest {
	return ApiGetVideoStreamsRequest{
		ApiService: a,
		Ctx: Ctx,
		P_videoId: videoId,
	}
}

/*
 * Execute executes the request
 * @return SingleVideo
 */
func (a *VideostreamingOperationsApiService) GetVideoStreamsExecute(r ApiGetVideoStreamsRequest) (SingleVideo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "VideostreamingOperationsApiService.GetVideoStreams")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/video_streams/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", _neturl.PathEscape(parameterToString(r.P_videoId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoStreamsListRequest struct {
	Ctx _context.Context
	ApiService *VideostreamingOperationsApiService
	P_resourceOwnerId *string
	P_deviceId *string
}

func (r ApiGetVideoStreamsListRequest) ResourceOwnerId(resourceOwnerId string) ApiGetVideoStreamsListRequest {
	r.P_resourceOwnerId = &resourceOwnerId
	return r
}
func (r ApiGetVideoStreamsListRequest) DeviceId(deviceId string) ApiGetVideoStreamsListRequest {
	r.P_deviceId = &deviceId
	return r
}

func (r ApiGetVideoStreamsListRequest) Execute() (MultipleVideo, *_nethttp.Response, error) {
	return r.ApiService.GetVideoStreamsListExecute(r)
}

/*
 * GetVideoStreamsList Method for GetVideoStreamsList
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetVideoStreamsListRequest
 */
func (a *VideostreamingOperationsApiService) GetVideoStreamsList(Ctx _context.Context) ApiGetVideoStreamsListRequest {
	return ApiGetVideoStreamsListRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return MultipleVideo
 */
func (a *VideostreamingOperationsApiService) GetVideoStreamsListExecute(r ApiGetVideoStreamsListRequest) (MultipleVideo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "VideostreamingOperationsApiService.GetVideoStreamsList")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/video_streams"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_resourceOwnerId == nil {
		return localVarReturnValue, nil, reportError("resourceOwnerId is required and must be specified")
	}

	localVarQueryParams.Add("resource_owner_id", parameterToString(*r.P_resourceOwnerId, ""))
	if r.P_deviceId != nil {
		localVarQueryParams.Add("device_id", parameterToString(*r.P_deviceId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetVideoStreamsThumbnailRequest struct {
	Ctx _context.Context
	ApiService *VideostreamingOperationsApiService
	P_videoId string
}


func (r ApiGetVideoStreamsThumbnailRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.GetVideoStreamsThumbnailExecute(r)
}

/*
 * GetVideoStreamsThumbnail Method for GetVideoStreamsThumbnail
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId
 * @return ApiGetVideoStreamsThumbnailRequest
 */
func (a *VideostreamingOperationsApiService) GetVideoStreamsThumbnail(Ctx _context.Context, videoId string) ApiGetVideoStreamsThumbnailRequest {
	return ApiGetVideoStreamsThumbnailRequest{
		ApiService: a,
		Ctx: Ctx,
		P_videoId: videoId,
	}
}

/*
 * Execute executes the request
 * @return *os.File
 */
func (a *VideostreamingOperationsApiService) GetVideoStreamsThumbnailExecute(r ApiGetVideoStreamsThumbnailRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "VideostreamingOperationsApiService.GetVideoStreamsThumbnail")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/video_streams/{video_id}/thumbnail"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", _neturl.PathEscape(parameterToString(r.P_videoId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"image/png"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateStreamsRequest struct {
	Ctx _context.Context
	ApiService *VideostreamingOperationsApiService
	P_videoId string
	P_videoUpdateRequest *VideoUpdateRequest
}

func (r ApiUpdateStreamsRequest) VideoUpdateRequest(videoUpdateRequest VideoUpdateRequest) ApiUpdateStreamsRequest {
	r.P_videoUpdateRequest = &videoUpdateRequest
	return r
}

func (r ApiUpdateStreamsRequest) Execute() (SingleVideo, *_nethttp.Response, error) {
	return r.ApiService.UpdateStreamsExecute(r)
}

/*
 * UpdateStreams Method for UpdateStreams
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param videoId
 * @return ApiUpdateStreamsRequest
 */
func (a *VideostreamingOperationsApiService) UpdateStreams(Ctx _context.Context, videoId string) ApiUpdateStreamsRequest {
	return ApiUpdateStreamsRequest{
		ApiService: a,
		Ctx: Ctx,
		P_videoId: videoId,
	}
}

/*
 * Execute executes the request
 * @return SingleVideo
 */
func (a *VideostreamingOperationsApiService) UpdateStreamsExecute(r ApiUpdateStreamsRequest) (SingleVideo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleVideo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "VideostreamingOperationsApiService.UpdateStreams")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/video_streams/{video_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"video_id"+"}", _neturl.PathEscape(parameterToString(r.P_videoId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_videoUpdateRequest
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
