/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleDeviceMonitoring struct for SingleDeviceMonitoring
type SingleDeviceMonitoring struct {
	Monitoring DeviceMonitoring `json:"monitoring"`
}

// NewSingleDeviceMonitoring instantiates a new SingleDeviceMonitoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleDeviceMonitoring(monitoring DeviceMonitoring, ) *SingleDeviceMonitoring {
	this := SingleDeviceMonitoring{}
	this.Monitoring = monitoring
	return &this
}

// NewSingleDeviceMonitoringWithDefaults instantiates a new SingleDeviceMonitoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleDeviceMonitoringWithDefaults() *SingleDeviceMonitoring {
	this := SingleDeviceMonitoring{}
	return &this
}

// GetMonitoring returns the Monitoring field value
func (o *SingleDeviceMonitoring) GetMonitoring() DeviceMonitoring {
	if o == nil  {
		var ret DeviceMonitoring
		return ret
	}

	return o.Monitoring
}

// GetMonitoringOk returns a tuple with the Monitoring field value
// and a boolean to check if the value has been set.
func (o *SingleDeviceMonitoring) GetMonitoringOk() (*DeviceMonitoring, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Monitoring, true
}

// SetMonitoring sets field value
func (o *SingleDeviceMonitoring) SetMonitoring(v DeviceMonitoring) {
	o.Monitoring = v
}

func (o SingleDeviceMonitoring) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["monitoring"] = o.Monitoring
	}
	return json.Marshal(toSerialize)
}

type NullableSingleDeviceMonitoring struct {
	value *SingleDeviceMonitoring
	isSet bool
}

func (v NullableSingleDeviceMonitoring) Get() *SingleDeviceMonitoring {
	return v.value
}

func (v *NullableSingleDeviceMonitoring) Set(val *SingleDeviceMonitoring) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleDeviceMonitoring) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleDeviceMonitoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleDeviceMonitoring(val *SingleDeviceMonitoring) *NullableSingleDeviceMonitoring {
	return &NullableSingleDeviceMonitoring{value: val, isSet: true}
}

func (v NullableSingleDeviceMonitoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleDeviceMonitoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


