/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// ChannelProtocol struct for ChannelProtocol
type ChannelProtocol struct {
	Id *string `json:"id,omitempty"`
	Version *int32 `json:"version,omitempty"`
	ValidationRequired *bool `json:"validation_required,omitempty"`
}

// NewChannelProtocol instantiates a new ChannelProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelProtocol() *ChannelProtocol {
	this := ChannelProtocol{}
	return &this
}

// NewChannelProtocolWithDefaults instantiates a new ChannelProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelProtocolWithDefaults() *ChannelProtocol {
	this := ChannelProtocol{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChannelProtocol) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelProtocol) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChannelProtocol) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChannelProtocol) SetId(v string) {
	o.Id = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ChannelProtocol) GetVersion() int32 {
	if o == nil || o.Version == nil {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelProtocol) GetVersionOk() (*int32, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ChannelProtocol) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *ChannelProtocol) SetVersion(v int32) {
	o.Version = &v
}

// GetValidationRequired returns the ValidationRequired field value if set, zero value otherwise.
func (o *ChannelProtocol) GetValidationRequired() bool {
	if o == nil || o.ValidationRequired == nil {
		var ret bool
		return ret
	}
	return *o.ValidationRequired
}

// GetValidationRequiredOk returns a tuple with the ValidationRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelProtocol) GetValidationRequiredOk() (*bool, bool) {
	if o == nil || o.ValidationRequired == nil {
		return nil, false
	}
	return o.ValidationRequired, true
}

// HasValidationRequired returns a boolean if a field has been set.
func (o *ChannelProtocol) HasValidationRequired() bool {
	if o != nil && o.ValidationRequired != nil {
		return true
	}

	return false
}

// SetValidationRequired gets a reference to the given bool and assigns it to the ValidationRequired field.
func (o *ChannelProtocol) SetValidationRequired(v bool) {
	o.ValidationRequired = &v
}

func (o ChannelProtocol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.ValidationRequired != nil {
		toSerialize["validation_required"] = o.ValidationRequired
	}
	return json.Marshal(toSerialize)
}

type NullableChannelProtocol struct {
	value *ChannelProtocol
	isSet bool
}

func (v NullableChannelProtocol) Get() *ChannelProtocol {
	return v.value
}

func (v *NullableChannelProtocol) Set(val *ChannelProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelProtocol(val *ChannelProtocol) *NullableChannelProtocol {
	return &NullableChannelProtocol{value: val, isSet: true}
}

func (v NullableChannelProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


