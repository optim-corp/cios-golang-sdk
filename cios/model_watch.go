/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// Watch struct for Watch
type Watch struct {
	Types *map[string]interface{} `json:"types,omitempty"`
	ComponentIds *map[string]interface{} `json:"component_ids,omitempty"`
}

// NewWatch instantiates a new Watch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWatch() *Watch {
	this := Watch{}
	return &this
}

// NewWatchWithDefaults instantiates a new Watch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWatchWithDefaults() *Watch {
	this := Watch{}
	return &this
}

// GetTypes returns the Types field value if set, zero value otherwise.
func (o *Watch) GetTypes() map[string]interface{} {
	if o == nil || o.Types == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Types
}

// GetTypesOk returns a tuple with the Types field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watch) GetTypesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Types == nil {
		return nil, false
	}
	return o.Types, true
}

// HasTypes returns a boolean if a field has been set.
func (o *Watch) HasTypes() bool {
	if o != nil && o.Types != nil {
		return true
	}

	return false
}

// SetTypes gets a reference to the given map[string]interface{} and assigns it to the Types field.
func (o *Watch) SetTypes(v map[string]interface{}) {
	o.Types = &v
}

// GetComponentIds returns the ComponentIds field value if set, zero value otherwise.
func (o *Watch) GetComponentIds() map[string]interface{} {
	if o == nil || o.ComponentIds == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ComponentIds
}

// GetComponentIdsOk returns a tuple with the ComponentIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Watch) GetComponentIdsOk() (*map[string]interface{}, bool) {
	if o == nil || o.ComponentIds == nil {
		return nil, false
	}
	return o.ComponentIds, true
}

// HasComponentIds returns a boolean if a field has been set.
func (o *Watch) HasComponentIds() bool {
	if o != nil && o.ComponentIds != nil {
		return true
	}

	return false
}

// SetComponentIds gets a reference to the given map[string]interface{} and assigns it to the ComponentIds field.
func (o *Watch) SetComponentIds(v map[string]interface{}) {
	o.ComponentIds = &v
}

func (o Watch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Types != nil {
		toSerialize["types"] = o.Types
	}
	if o.ComponentIds != nil {
		toSerialize["component_ids"] = o.ComponentIds
	}
	return json.Marshal(toSerialize)
}

type NullableWatch struct {
	value *Watch
	isSet bool
}

func (v NullableWatch) Get() *Watch {
	return v.value
}

func (v *NullableWatch) Set(val *Watch) {
	v.value = val
	v.isSet = true
}

func (v NullableWatch) IsSet() bool {
	return v.isSet
}

func (v *NullableWatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWatch(val *Watch) *NullableWatch {
	return &NullableWatch{value: val, isSet: true}
}

func (v NullableWatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


