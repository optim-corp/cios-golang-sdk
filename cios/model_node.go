/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// Node struct for Node
type Node struct {
	Id string `json:"id"`
	CreatedAt string `json:"created_at"`
	CreatedBy *CreatedBy `json:"created_by,omitempty"`
	UpdatedAt string `json:"updated_at"`
	UpdatedBy *UpdatedBy `json:"updated_by,omitempty"`
	Name string `json:"name"`
	ParentNodeId NullableString `json:"parent_node_id,omitempty"`
	Key string `json:"key"`
	IsDirectory bool `json:"is_directory"`
	File *NodeFile `json:"file,omitempty"`
}

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode(id string, createdAt string, updatedAt string, name string, key string, isDirectory bool, ) *Node {
	this := Node{}
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Name = name
	this.Key = key
	this.IsDirectory = isDirectory
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetId returns the Id field value
func (o *Node) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Node) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Node) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Node) GetCreatedAt() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Node) GetCreatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Node) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise.
func (o *Node) GetCreatedBy() CreatedBy {
	if o == nil || o.CreatedBy == nil {
		var ret CreatedBy
		return ret
	}
	return *o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetCreatedByOk() (*CreatedBy, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *Node) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given CreatedBy and assigns it to the CreatedBy field.
func (o *Node) SetCreatedBy(v CreatedBy) {
	o.CreatedBy = &v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *Node) GetUpdatedAt() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *Node) GetUpdatedAtOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *Node) SetUpdatedAt(v string) {
	o.UpdatedAt = v
}

// GetUpdatedBy returns the UpdatedBy field value if set, zero value otherwise.
func (o *Node) GetUpdatedBy() UpdatedBy {
	if o == nil || o.UpdatedBy == nil {
		var ret UpdatedBy
		return ret
	}
	return *o.UpdatedBy
}

// GetUpdatedByOk returns a tuple with the UpdatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetUpdatedByOk() (*UpdatedBy, bool) {
	if o == nil || o.UpdatedBy == nil {
		return nil, false
	}
	return o.UpdatedBy, true
}

// HasUpdatedBy returns a boolean if a field has been set.
func (o *Node) HasUpdatedBy() bool {
	if o != nil && o.UpdatedBy != nil {
		return true
	}

	return false
}

// SetUpdatedBy gets a reference to the given UpdatedBy and assigns it to the UpdatedBy field.
func (o *Node) SetUpdatedBy(v UpdatedBy) {
	o.UpdatedBy = &v
}

// GetName returns the Name field value
func (o *Node) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Node) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Node) SetName(v string) {
	o.Name = v
}

// GetParentNodeId returns the ParentNodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetParentNodeId() string {
	if o == nil || o.ParentNodeId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentNodeId.Get()
}

// GetParentNodeIdOk returns a tuple with the ParentNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetParentNodeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentNodeId.Get(), o.ParentNodeId.IsSet()
}

// HasParentNodeId returns a boolean if a field has been set.
func (o *Node) HasParentNodeId() bool {
	if o != nil && o.ParentNodeId.IsSet() {
		return true
	}

	return false
}

// SetParentNodeId gets a reference to the given NullableString and assigns it to the ParentNodeId field.
func (o *Node) SetParentNodeId(v string) {
	o.ParentNodeId.Set(&v)
}
// SetParentNodeIdNil sets the value for ParentNodeId to be an explicit nil
func (o *Node) SetParentNodeIdNil() {
	o.ParentNodeId.Set(nil)
}

// UnsetParentNodeId ensures that no value is present for ParentNodeId, not even an explicit nil
func (o *Node) UnsetParentNodeId() {
	o.ParentNodeId.Unset()
}

// GetKey returns the Key field value
func (o *Node) GetKey() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *Node) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *Node) SetKey(v string) {
	o.Key = v
}

// GetIsDirectory returns the IsDirectory field value
func (o *Node) GetIsDirectory() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.IsDirectory
}

// GetIsDirectoryOk returns a tuple with the IsDirectory field value
// and a boolean to check if the value has been set.
func (o *Node) GetIsDirectoryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsDirectory, true
}

// SetIsDirectory sets field value
func (o *Node) SetIsDirectory(v bool) {
	o.IsDirectory = v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *Node) GetFile() NodeFile {
	if o == nil || o.File == nil {
		var ret NodeFile
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetFileOk() (*NodeFile, bool) {
	if o == nil || o.File == nil {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *Node) HasFile() bool {
	if o != nil && o.File != nil {
		return true
	}

	return false
}

// SetFile gets a reference to the given NodeFile and assigns it to the File field.
func (o *Node) SetFile(v NodeFile) {
	o.File = &v
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CreatedBy != nil {
		toSerialize["created_by"] = o.CreatedBy
	}
	if true {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if o.UpdatedBy != nil {
		toSerialize["updated_by"] = o.UpdatedBy
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.ParentNodeId.IsSet() {
		toSerialize["parent_node_id"] = o.ParentNodeId.Get()
	}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["is_directory"] = o.IsDirectory
	}
	if o.File != nil {
		toSerialize["file"] = o.File
	}
	return json.Marshal(toSerialize)
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


