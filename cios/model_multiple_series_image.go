/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleSeriesImage struct for MultipleSeriesImage
type MultipleSeriesImage struct {
	// 検索条件にマッチする全結果数
	Total int64 `json:"total"`
	// 画像データとタイムスタンプの配列。データが0件の場合は空配列。
	Data []SeriesImage `json:"data"`
	// timestampがキーとなってdataのindexが格納されているhashmap
	ImageMap map[string]int32 `json:"image_map"`
}

// NewMultipleSeriesImage instantiates a new MultipleSeriesImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleSeriesImage(total int64, data []SeriesImage, imageMap map[string]int32, ) *MultipleSeriesImage {
	this := MultipleSeriesImage{}
	this.Total = total
	this.Data = data
	this.ImageMap = imageMap
	return &this
}

// NewMultipleSeriesImageWithDefaults instantiates a new MultipleSeriesImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleSeriesImageWithDefaults() *MultipleSeriesImage {
	this := MultipleSeriesImage{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleSeriesImage) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleSeriesImage) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleSeriesImage) SetTotal(v int64) {
	o.Total = v
}

// GetData returns the Data field value
func (o *MultipleSeriesImage) GetData() []SeriesImage {
	if o == nil  {
		var ret []SeriesImage
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *MultipleSeriesImage) GetDataOk() (*[]SeriesImage, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *MultipleSeriesImage) SetData(v []SeriesImage) {
	o.Data = v
}

// GetImageMap returns the ImageMap field value
func (o *MultipleSeriesImage) GetImageMap() map[string]int32 {
	if o == nil  {
		var ret map[string]int32
		return ret
	}

	return o.ImageMap
}

// GetImageMapOk returns a tuple with the ImageMap field value
// and a boolean to check if the value has been set.
func (o *MultipleSeriesImage) GetImageMapOk() (*map[string]int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ImageMap, true
}

// SetImageMap sets field value
func (o *MultipleSeriesImage) SetImageMap(v map[string]int32) {
	o.ImageMap = v
}

func (o MultipleSeriesImage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["image_map"] = o.ImageMap
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleSeriesImage struct {
	value *MultipleSeriesImage
	isSet bool
}

func (v NullableMultipleSeriesImage) Get() *MultipleSeriesImage {
	return v.value
}

func (v *NullableMultipleSeriesImage) Set(val *MultipleSeriesImage) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleSeriesImage) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleSeriesImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleSeriesImage(val *MultipleSeriesImage) *NullableMultipleSeriesImage {
	return &NullableMultipleSeriesImage{value: val, isSet: true}
}

func (v NullableMultipleSeriesImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleSeriesImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


