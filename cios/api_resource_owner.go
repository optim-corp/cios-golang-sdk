/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ResourceOwnerApiService ResourceOwnerApi service
type ResourceOwnerApiService service

type ApiGetResourceOwnerRequest struct {
	Ctx _context.Context
	ApiService *ResourceOwnerApiService
	P_resourceOwnerId string
}


func (r ApiGetResourceOwnerRequest) Execute() (ResourceOwner, *_nethttp.Response, error) {
	return r.ApiService.GetResourceOwnerExecute(r)
}

/*
 * GetResourceOwner Method for GetResourceOwner
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param resourceOwnerId
 * @return ApiGetResourceOwnerRequest
 */
func (a *ResourceOwnerApiService) GetResourceOwner(Ctx _context.Context, resourceOwnerId string) ApiGetResourceOwnerRequest {
	return ApiGetResourceOwnerRequest{
		ApiService: a,
		Ctx: Ctx,
		P_resourceOwnerId: resourceOwnerId,
	}
}

/*
 * Execute executes the request
 * @return ResourceOwner
 */
func (a *ResourceOwnerApiService) GetResourceOwnerExecute(r ApiGetResourceOwnerRequest) (ResourceOwner, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ResourceOwner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "ResourceOwnerApiService.GetResourceOwner")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/resource_owners/{resource_owner_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"resource_owner_id"+"}", _neturl.PathEscape(parameterToString(r.P_resourceOwnerId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetResourceOwnersRequest struct {
	Ctx _context.Context
	ApiService *ResourceOwnerApiService
	P_groupId *string
	P_userId *string
	P_type_ *string
	P_page *string
	P_offset *int64
	P_limit *int64
	P_orderBy *string
	P_order *string
}

func (r ApiGetResourceOwnersRequest) GroupId(groupId string) ApiGetResourceOwnersRequest {
	r.P_groupId = &groupId
	return r
}
func (r ApiGetResourceOwnersRequest) UserId(userId string) ApiGetResourceOwnersRequest {
	r.P_userId = &userId
	return r
}
func (r ApiGetResourceOwnersRequest) Type_(type_ string) ApiGetResourceOwnersRequest {
	r.P_type_ = &type_
	return r
}
func (r ApiGetResourceOwnersRequest) Page(page string) ApiGetResourceOwnersRequest {
	r.P_page = &page
	return r
}
func (r ApiGetResourceOwnersRequest) Offset(offset int64) ApiGetResourceOwnersRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetResourceOwnersRequest) Limit(limit int64) ApiGetResourceOwnersRequest {
	r.P_limit = &limit
	return r
}
func (r ApiGetResourceOwnersRequest) OrderBy(orderBy string) ApiGetResourceOwnersRequest {
	r.P_orderBy = &orderBy
	return r
}
func (r ApiGetResourceOwnersRequest) Order(order string) ApiGetResourceOwnersRequest {
	r.P_order = &order
	return r
}

func (r ApiGetResourceOwnersRequest) Execute() (MultipleResourceOwner, *_nethttp.Response, error) {
	return r.ApiService.GetResourceOwnersExecute(r)
}

/*
 * GetResourceOwners Method for GetResourceOwners
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetResourceOwnersRequest
 */
func (a *ResourceOwnerApiService) GetResourceOwners(Ctx _context.Context) ApiGetResourceOwnersRequest {
	return ApiGetResourceOwnersRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return MultipleResourceOwner
 */
func (a *ResourceOwnerApiService) GetResourceOwnersExecute(r ApiGetResourceOwnersRequest) (MultipleResourceOwner, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleResourceOwner
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "ResourceOwnerApiService.GetResourceOwners")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/resource_owners"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_groupId != nil {
		localVarQueryParams.Add("group_id", parameterToString(*r.P_groupId, ""))
	}
	if r.P_userId != nil {
		localVarQueryParams.Add("user_id", parameterToString(*r.P_userId, ""))
	}
	if r.P_type_ != nil {
		localVarQueryParams.Add("type", parameterToString(*r.P_type_, ""))
	}
	if r.P_page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.P_page, ""))
	}
	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	if r.P_orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.P_orderBy, ""))
	}
	if r.P_order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.P_order, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
