/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// DeviceInfo struct for DeviceInfo
type DeviceInfo struct {
	ResourceOwnerId string `json:"resource_owner_id"`
	Name *string `json:"name,omitempty"`
	IdNumber *string `json:"id_number,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayInfo *[]DisplayInfo `json:"display_info,omitempty"`
	// クライアントIDリスト。デバイスコンテキストのクライアントが必要な場合(is_managedをmanagedかfull_managedに設定する場合)、対応するエージェント等、デバイス上で動作させるクライアントのIDと公開鍵を指定する。複数ある場合、すべて登録すること。
	ClientIdList *[]string `json:"client_id_list,omitempty"`
	// 該当デバイスの管理方法についての区分。  管理外：unmanaged ・・・該当デバイス情報に情報を持たせるのみの場合、こちらを選択。 一部管理：managed ・・・該当デバイス情報に情報を持たせ、かつ当サービス以外システム（アプリ）にて管理される場合、こちらを選択。 完全管理：full_managed（次期対応検討内容） ・・・該当デバイス情報に情報を持たせ、かつ当サービス以外システム（アプリ）およびデバイスエージェント（キッティング、ファームウェアアップデート等行う機構）にて管理される場合、こちらを選択。
	IsManaged *string `json:"is_managed,omitempty"`
	// RSAの公開鍵をPEM形式で設定する。クライアントIDを指定する場合必須。
	RsaPublickey *string `json:"rsa_publickey,omitempty"`
	// 付帯情報リスト
	CustomInventory *[]interface{} `json:"custom_inventory,omitempty"`
}

// NewDeviceInfo instantiates a new DeviceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceInfo(resourceOwnerId string, ) *DeviceInfo {
	this := DeviceInfo{}
	this.ResourceOwnerId = resourceOwnerId
	return &this
}

// NewDeviceInfoWithDefaults instantiates a new DeviceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceInfoWithDefaults() *DeviceInfo {
	this := DeviceInfo{}
	return &this
}

// GetResourceOwnerId returns the ResourceOwnerId field value
func (o *DeviceInfo) GetResourceOwnerId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ResourceOwnerId
}

// GetResourceOwnerIdOk returns a tuple with the ResourceOwnerId field value
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetResourceOwnerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceOwnerId, true
}

// SetResourceOwnerId sets field value
func (o *DeviceInfo) SetResourceOwnerId(v string) {
	o.ResourceOwnerId = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceInfo) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceInfo) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceInfo) SetName(v string) {
	o.Name = &v
}

// GetIdNumber returns the IdNumber field value if set, zero value otherwise.
func (o *DeviceInfo) GetIdNumber() string {
	if o == nil || o.IdNumber == nil {
		var ret string
		return ret
	}
	return *o.IdNumber
}

// GetIdNumberOk returns a tuple with the IdNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetIdNumberOk() (*string, bool) {
	if o == nil || o.IdNumber == nil {
		return nil, false
	}
	return o.IdNumber, true
}

// HasIdNumber returns a boolean if a field has been set.
func (o *DeviceInfo) HasIdNumber() bool {
	if o != nil && o.IdNumber != nil {
		return true
	}

	return false
}

// SetIdNumber gets a reference to the given string and assigns it to the IdNumber field.
func (o *DeviceInfo) SetIdNumber(v string) {
	o.IdNumber = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DeviceInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DeviceInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DeviceInfo) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayInfo returns the DisplayInfo field value if set, zero value otherwise.
func (o *DeviceInfo) GetDisplayInfo() []DisplayInfo {
	if o == nil || o.DisplayInfo == nil {
		var ret []DisplayInfo
		return ret
	}
	return *o.DisplayInfo
}

// GetDisplayInfoOk returns a tuple with the DisplayInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetDisplayInfoOk() (*[]DisplayInfo, bool) {
	if o == nil || o.DisplayInfo == nil {
		return nil, false
	}
	return o.DisplayInfo, true
}

// HasDisplayInfo returns a boolean if a field has been set.
func (o *DeviceInfo) HasDisplayInfo() bool {
	if o != nil && o.DisplayInfo != nil {
		return true
	}

	return false
}

// SetDisplayInfo gets a reference to the given []DisplayInfo and assigns it to the DisplayInfo field.
func (o *DeviceInfo) SetDisplayInfo(v []DisplayInfo) {
	o.DisplayInfo = &v
}

// GetClientIdList returns the ClientIdList field value if set, zero value otherwise.
func (o *DeviceInfo) GetClientIdList() []string {
	if o == nil || o.ClientIdList == nil {
		var ret []string
		return ret
	}
	return *o.ClientIdList
}

// GetClientIdListOk returns a tuple with the ClientIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetClientIdListOk() (*[]string, bool) {
	if o == nil || o.ClientIdList == nil {
		return nil, false
	}
	return o.ClientIdList, true
}

// HasClientIdList returns a boolean if a field has been set.
func (o *DeviceInfo) HasClientIdList() bool {
	if o != nil && o.ClientIdList != nil {
		return true
	}

	return false
}

// SetClientIdList gets a reference to the given []string and assigns it to the ClientIdList field.
func (o *DeviceInfo) SetClientIdList(v []string) {
	o.ClientIdList = &v
}

// GetIsManaged returns the IsManaged field value if set, zero value otherwise.
func (o *DeviceInfo) GetIsManaged() string {
	if o == nil || o.IsManaged == nil {
		var ret string
		return ret
	}
	return *o.IsManaged
}

// GetIsManagedOk returns a tuple with the IsManaged field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetIsManagedOk() (*string, bool) {
	if o == nil || o.IsManaged == nil {
		return nil, false
	}
	return o.IsManaged, true
}

// HasIsManaged returns a boolean if a field has been set.
func (o *DeviceInfo) HasIsManaged() bool {
	if o != nil && o.IsManaged != nil {
		return true
	}

	return false
}

// SetIsManaged gets a reference to the given string and assigns it to the IsManaged field.
func (o *DeviceInfo) SetIsManaged(v string) {
	o.IsManaged = &v
}

// GetRsaPublickey returns the RsaPublickey field value if set, zero value otherwise.
func (o *DeviceInfo) GetRsaPublickey() string {
	if o == nil || o.RsaPublickey == nil {
		var ret string
		return ret
	}
	return *o.RsaPublickey
}

// GetRsaPublickeyOk returns a tuple with the RsaPublickey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetRsaPublickeyOk() (*string, bool) {
	if o == nil || o.RsaPublickey == nil {
		return nil, false
	}
	return o.RsaPublickey, true
}

// HasRsaPublickey returns a boolean if a field has been set.
func (o *DeviceInfo) HasRsaPublickey() bool {
	if o != nil && o.RsaPublickey != nil {
		return true
	}

	return false
}

// SetRsaPublickey gets a reference to the given string and assigns it to the RsaPublickey field.
func (o *DeviceInfo) SetRsaPublickey(v string) {
	o.RsaPublickey = &v
}

// GetCustomInventory returns the CustomInventory field value if set, zero value otherwise.
func (o *DeviceInfo) GetCustomInventory() []interface{} {
	if o == nil || o.CustomInventory == nil {
		var ret []interface{}
		return ret
	}
	return *o.CustomInventory
}

// GetCustomInventoryOk returns a tuple with the CustomInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInfo) GetCustomInventoryOk() (*[]interface{}, bool) {
	if o == nil || o.CustomInventory == nil {
		return nil, false
	}
	return o.CustomInventory, true
}

// HasCustomInventory returns a boolean if a field has been set.
func (o *DeviceInfo) HasCustomInventory() bool {
	if o != nil && o.CustomInventory != nil {
		return true
	}

	return false
}

// SetCustomInventory gets a reference to the given []interface{} and assigns it to the CustomInventory field.
func (o *DeviceInfo) SetCustomInventory(v []interface{}) {
	o.CustomInventory = &v
}

func (o DeviceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resource_owner_id"] = o.ResourceOwnerId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.IdNumber != nil {
		toSerialize["id_number"] = o.IdNumber
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayInfo != nil {
		toSerialize["display_info"] = o.DisplayInfo
	}
	if o.ClientIdList != nil {
		toSerialize["client_id_list"] = o.ClientIdList
	}
	if o.IsManaged != nil {
		toSerialize["is_managed"] = o.IsManaged
	}
	if o.RsaPublickey != nil {
		toSerialize["rsa_publickey"] = o.RsaPublickey
	}
	if o.CustomInventory != nil {
		toSerialize["custom_inventory"] = o.CustomInventory
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceInfo struct {
	value *DeviceInfo
	isSet bool
}

func (v NullableDeviceInfo) Get() *DeviceInfo {
	return v.value
}

func (v *NullableDeviceInfo) Set(val *DeviceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceInfo(val *DeviceInfo) *NullableDeviceInfo {
	return &NullableDeviceInfo{value: val, isSet: true}
}

func (v NullableDeviceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


