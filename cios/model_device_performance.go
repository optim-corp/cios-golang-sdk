/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// DevicePerformance struct for DevicePerformance
type DevicePerformance struct {
	UsedCpuRate *string `json:"used_cpu_rate,omitempty"`
	TotalMemory *string `json:"total_memory,omitempty"`
	UsedMemory *string `json:"used_memory,omitempty"`
	UsedMemoryRate *string `json:"used_memory_rate,omitempty"`
	TotalDisk *string `json:"total_disk,omitempty"`
	UsedDisk *string `json:"used_disk,omitempty"`
	UsedDiskRate *string `json:"used_disk_rate,omitempty"`
}

// NewDevicePerformance instantiates a new DevicePerformance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicePerformance() *DevicePerformance {
	this := DevicePerformance{}
	return &this
}

// NewDevicePerformanceWithDefaults instantiates a new DevicePerformance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicePerformanceWithDefaults() *DevicePerformance {
	this := DevicePerformance{}
	return &this
}

// GetUsedCpuRate returns the UsedCpuRate field value if set, zero value otherwise.
func (o *DevicePerformance) GetUsedCpuRate() string {
	if o == nil || o.UsedCpuRate == nil {
		var ret string
		return ret
	}
	return *o.UsedCpuRate
}

// GetUsedCpuRateOk returns a tuple with the UsedCpuRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePerformance) GetUsedCpuRateOk() (*string, bool) {
	if o == nil || o.UsedCpuRate == nil {
		return nil, false
	}
	return o.UsedCpuRate, true
}

// HasUsedCpuRate returns a boolean if a field has been set.
func (o *DevicePerformance) HasUsedCpuRate() bool {
	if o != nil && o.UsedCpuRate != nil {
		return true
	}

	return false
}

// SetUsedCpuRate gets a reference to the given string and assigns it to the UsedCpuRate field.
func (o *DevicePerformance) SetUsedCpuRate(v string) {
	o.UsedCpuRate = &v
}

// GetTotalMemory returns the TotalMemory field value if set, zero value otherwise.
func (o *DevicePerformance) GetTotalMemory() string {
	if o == nil || o.TotalMemory == nil {
		var ret string
		return ret
	}
	return *o.TotalMemory
}

// GetTotalMemoryOk returns a tuple with the TotalMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePerformance) GetTotalMemoryOk() (*string, bool) {
	if o == nil || o.TotalMemory == nil {
		return nil, false
	}
	return o.TotalMemory, true
}

// HasTotalMemory returns a boolean if a field has been set.
func (o *DevicePerformance) HasTotalMemory() bool {
	if o != nil && o.TotalMemory != nil {
		return true
	}

	return false
}

// SetTotalMemory gets a reference to the given string and assigns it to the TotalMemory field.
func (o *DevicePerformance) SetTotalMemory(v string) {
	o.TotalMemory = &v
}

// GetUsedMemory returns the UsedMemory field value if set, zero value otherwise.
func (o *DevicePerformance) GetUsedMemory() string {
	if o == nil || o.UsedMemory == nil {
		var ret string
		return ret
	}
	return *o.UsedMemory
}

// GetUsedMemoryOk returns a tuple with the UsedMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePerformance) GetUsedMemoryOk() (*string, bool) {
	if o == nil || o.UsedMemory == nil {
		return nil, false
	}
	return o.UsedMemory, true
}

// HasUsedMemory returns a boolean if a field has been set.
func (o *DevicePerformance) HasUsedMemory() bool {
	if o != nil && o.UsedMemory != nil {
		return true
	}

	return false
}

// SetUsedMemory gets a reference to the given string and assigns it to the UsedMemory field.
func (o *DevicePerformance) SetUsedMemory(v string) {
	o.UsedMemory = &v
}

// GetUsedMemoryRate returns the UsedMemoryRate field value if set, zero value otherwise.
func (o *DevicePerformance) GetUsedMemoryRate() string {
	if o == nil || o.UsedMemoryRate == nil {
		var ret string
		return ret
	}
	return *o.UsedMemoryRate
}

// GetUsedMemoryRateOk returns a tuple with the UsedMemoryRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePerformance) GetUsedMemoryRateOk() (*string, bool) {
	if o == nil || o.UsedMemoryRate == nil {
		return nil, false
	}
	return o.UsedMemoryRate, true
}

// HasUsedMemoryRate returns a boolean if a field has been set.
func (o *DevicePerformance) HasUsedMemoryRate() bool {
	if o != nil && o.UsedMemoryRate != nil {
		return true
	}

	return false
}

// SetUsedMemoryRate gets a reference to the given string and assigns it to the UsedMemoryRate field.
func (o *DevicePerformance) SetUsedMemoryRate(v string) {
	o.UsedMemoryRate = &v
}

// GetTotalDisk returns the TotalDisk field value if set, zero value otherwise.
func (o *DevicePerformance) GetTotalDisk() string {
	if o == nil || o.TotalDisk == nil {
		var ret string
		return ret
	}
	return *o.TotalDisk
}

// GetTotalDiskOk returns a tuple with the TotalDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePerformance) GetTotalDiskOk() (*string, bool) {
	if o == nil || o.TotalDisk == nil {
		return nil, false
	}
	return o.TotalDisk, true
}

// HasTotalDisk returns a boolean if a field has been set.
func (o *DevicePerformance) HasTotalDisk() bool {
	if o != nil && o.TotalDisk != nil {
		return true
	}

	return false
}

// SetTotalDisk gets a reference to the given string and assigns it to the TotalDisk field.
func (o *DevicePerformance) SetTotalDisk(v string) {
	o.TotalDisk = &v
}

// GetUsedDisk returns the UsedDisk field value if set, zero value otherwise.
func (o *DevicePerformance) GetUsedDisk() string {
	if o == nil || o.UsedDisk == nil {
		var ret string
		return ret
	}
	return *o.UsedDisk
}

// GetUsedDiskOk returns a tuple with the UsedDisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePerformance) GetUsedDiskOk() (*string, bool) {
	if o == nil || o.UsedDisk == nil {
		return nil, false
	}
	return o.UsedDisk, true
}

// HasUsedDisk returns a boolean if a field has been set.
func (o *DevicePerformance) HasUsedDisk() bool {
	if o != nil && o.UsedDisk != nil {
		return true
	}

	return false
}

// SetUsedDisk gets a reference to the given string and assigns it to the UsedDisk field.
func (o *DevicePerformance) SetUsedDisk(v string) {
	o.UsedDisk = &v
}

// GetUsedDiskRate returns the UsedDiskRate field value if set, zero value otherwise.
func (o *DevicePerformance) GetUsedDiskRate() string {
	if o == nil || o.UsedDiskRate == nil {
		var ret string
		return ret
	}
	return *o.UsedDiskRate
}

// GetUsedDiskRateOk returns a tuple with the UsedDiskRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicePerformance) GetUsedDiskRateOk() (*string, bool) {
	if o == nil || o.UsedDiskRate == nil {
		return nil, false
	}
	return o.UsedDiskRate, true
}

// HasUsedDiskRate returns a boolean if a field has been set.
func (o *DevicePerformance) HasUsedDiskRate() bool {
	if o != nil && o.UsedDiskRate != nil {
		return true
	}

	return false
}

// SetUsedDiskRate gets a reference to the given string and assigns it to the UsedDiskRate field.
func (o *DevicePerformance) SetUsedDiskRate(v string) {
	o.UsedDiskRate = &v
}

func (o DevicePerformance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UsedCpuRate != nil {
		toSerialize["used_cpu_rate"] = o.UsedCpuRate
	}
	if o.TotalMemory != nil {
		toSerialize["total_memory"] = o.TotalMemory
	}
	if o.UsedMemory != nil {
		toSerialize["used_memory"] = o.UsedMemory
	}
	if o.UsedMemoryRate != nil {
		toSerialize["used_memory_rate"] = o.UsedMemoryRate
	}
	if o.TotalDisk != nil {
		toSerialize["total_disk"] = o.TotalDisk
	}
	if o.UsedDisk != nil {
		toSerialize["used_disk"] = o.UsedDisk
	}
	if o.UsedDiskRate != nil {
		toSerialize["used_disk_rate"] = o.UsedDiskRate
	}
	return json.Marshal(toSerialize)
}

type NullableDevicePerformance struct {
	value *DevicePerformance
	isSet bool
}

func (v NullableDevicePerformance) Get() *DevicePerformance {
	return v.value
}

func (v *NullableDevicePerformance) Set(val *DevicePerformance) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicePerformance) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicePerformance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicePerformance(val *DevicePerformance) *NullableDevicePerformance {
	return &NullableDevicePerformance{value: val, isSet: true}
}

func (v NullableDevicePerformance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicePerformance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


