/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// ContractUserLicense struct for ContractUserLicense
type ContractUserLicense struct {
	// ISO8601
	IssuedAt *string `json:"issued_at,omitempty"`
	// ISO8601
	ExpiresAt *string `json:"expires_at,omitempty"`
}

// NewContractUserLicense instantiates a new ContractUserLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContractUserLicense() *ContractUserLicense {
	this := ContractUserLicense{}
	return &this
}

// NewContractUserLicenseWithDefaults instantiates a new ContractUserLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractUserLicenseWithDefaults() *ContractUserLicense {
	this := ContractUserLicense{}
	return &this
}

// GetIssuedAt returns the IssuedAt field value if set, zero value otherwise.
func (o *ContractUserLicense) GetIssuedAt() string {
	if o == nil || o.IssuedAt == nil {
		var ret string
		return ret
	}
	return *o.IssuedAt
}

// GetIssuedAtOk returns a tuple with the IssuedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractUserLicense) GetIssuedAtOk() (*string, bool) {
	if o == nil || o.IssuedAt == nil {
		return nil, false
	}
	return o.IssuedAt, true
}

// HasIssuedAt returns a boolean if a field has been set.
func (o *ContractUserLicense) HasIssuedAt() bool {
	if o != nil && o.IssuedAt != nil {
		return true
	}

	return false
}

// SetIssuedAt gets a reference to the given string and assigns it to the IssuedAt field.
func (o *ContractUserLicense) SetIssuedAt(v string) {
	o.IssuedAt = &v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *ContractUserLicense) GetExpiresAt() string {
	if o == nil || o.ExpiresAt == nil {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ContractUserLicense) GetExpiresAtOk() (*string, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *ContractUserLicense) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *ContractUserLicense) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

func (o ContractUserLicense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IssuedAt != nil {
		toSerialize["issued_at"] = o.IssuedAt
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	return json.Marshal(toSerialize)
}

type NullableContractUserLicense struct {
	value *ContractUserLicense
	isSet bool
}

func (v NullableContractUserLicense) Get() *ContractUserLicense {
	return v.value
}

func (v *NullableContractUserLicense) Set(val *ContractUserLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableContractUserLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableContractUserLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContractUserLicense(val *ContractUserLicense) *NullableContractUserLicense {
	return &NullableContractUserLicense{value: val, isSet: true}
}

func (v NullableContractUserLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContractUserLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


