/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// PointRequest struct for PointRequest
type PointRequest struct {
	Name *string `json:"name,omitempty"`
	Location *Location `json:"location,omitempty"`
	Altitude *float32 `json:"altitude,omitempty"`
	Labels *[]Label `json:"labels,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayInfo *[]DisplayInfo `json:"display_info,omitempty"`
	ResourceOwnerId string `json:"resource_owner_id"`
}

// NewPointRequest instantiates a new PointRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPointRequest(resourceOwnerId string, ) *PointRequest {
	this := PointRequest{}
	this.ResourceOwnerId = resourceOwnerId
	return &this
}

// NewPointRequestWithDefaults instantiates a new PointRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointRequestWithDefaults() *PointRequest {
	this := PointRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PointRequest) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointRequest) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PointRequest) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PointRequest) SetName(v string) {
	o.Name = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *PointRequest) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointRequest) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *PointRequest) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *PointRequest) SetLocation(v Location) {
	o.Location = &v
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *PointRequest) GetAltitude() float32 {
	if o == nil || o.Altitude == nil {
		var ret float32
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointRequest) GetAltitudeOk() (*float32, bool) {
	if o == nil || o.Altitude == nil {
		return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *PointRequest) HasAltitude() bool {
	if o != nil && o.Altitude != nil {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given float32 and assigns it to the Altitude field.
func (o *PointRequest) SetAltitude(v float32) {
	o.Altitude = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PointRequest) GetLabels() []Label {
	if o == nil || o.Labels == nil {
		var ret []Label
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointRequest) GetLabelsOk() (*[]Label, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *PointRequest) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *PointRequest) SetLabels(v []Label) {
	o.Labels = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PointRequest) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PointRequest) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PointRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayInfo returns the DisplayInfo field value if set, zero value otherwise.
func (o *PointRequest) GetDisplayInfo() []DisplayInfo {
	if o == nil || o.DisplayInfo == nil {
		var ret []DisplayInfo
		return ret
	}
	return *o.DisplayInfo
}

// GetDisplayInfoOk returns a tuple with the DisplayInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PointRequest) GetDisplayInfoOk() (*[]DisplayInfo, bool) {
	if o == nil || o.DisplayInfo == nil {
		return nil, false
	}
	return o.DisplayInfo, true
}

// HasDisplayInfo returns a boolean if a field has been set.
func (o *PointRequest) HasDisplayInfo() bool {
	if o != nil && o.DisplayInfo != nil {
		return true
	}

	return false
}

// SetDisplayInfo gets a reference to the given []DisplayInfo and assigns it to the DisplayInfo field.
func (o *PointRequest) SetDisplayInfo(v []DisplayInfo) {
	o.DisplayInfo = &v
}

// GetResourceOwnerId returns the ResourceOwnerId field value
func (o *PointRequest) GetResourceOwnerId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ResourceOwnerId
}

// GetResourceOwnerIdOk returns a tuple with the ResourceOwnerId field value
// and a boolean to check if the value has been set.
func (o *PointRequest) GetResourceOwnerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ResourceOwnerId, true
}

// SetResourceOwnerId sets field value
func (o *PointRequest) SetResourceOwnerId(v string) {
	o.ResourceOwnerId = v
}

func (o PointRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Altitude != nil {
		toSerialize["altitude"] = o.Altitude
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayInfo != nil {
		toSerialize["display_info"] = o.DisplayInfo
	}
	if true {
		toSerialize["resource_owner_id"] = o.ResourceOwnerId
	}
	return json.Marshal(toSerialize)
}

type NullablePointRequest struct {
	value *PointRequest
	isSet bool
}

func (v NullablePointRequest) Get() *PointRequest {
	return v.value
}

func (v *NullablePointRequest) Set(val *PointRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePointRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePointRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointRequest(val *PointRequest) *NullablePointRequest {
	return &NullablePointRequest{value: val, isSet: true}
}

func (v NullablePointRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


