/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// Route struct for Route
type Route struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Contents *[]RouteContents `json:"contents,omitempty"`
	Labels *[]Label `json:"labels,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayInfo *[]DisplayInfo `json:"display_info,omitempty"`
	ResourceOwnerId *string `json:"resource_owner_id,omitempty"`
}

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute() *Route {
	this := Route{}
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Route) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Route) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Route) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Route) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Route) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Route) SetName(v string) {
	o.Name = &v
}

// GetContents returns the Contents field value if set, zero value otherwise.
func (o *Route) GetContents() []RouteContents {
	if o == nil || o.Contents == nil {
		var ret []RouteContents
		return ret
	}
	return *o.Contents
}

// GetContentsOk returns a tuple with the Contents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetContentsOk() (*[]RouteContents, bool) {
	if o == nil || o.Contents == nil {
		return nil, false
	}
	return o.Contents, true
}

// HasContents returns a boolean if a field has been set.
func (o *Route) HasContents() bool {
	if o != nil && o.Contents != nil {
		return true
	}

	return false
}

// SetContents gets a reference to the given []RouteContents and assigns it to the Contents field.
func (o *Route) SetContents(v []RouteContents) {
	o.Contents = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Route) GetLabels() []Label {
	if o == nil || o.Labels == nil {
		var ret []Label
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetLabelsOk() (*[]Label, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Route) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *Route) SetLabels(v []Label) {
	o.Labels = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Route) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Route) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Route) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayInfo returns the DisplayInfo field value if set, zero value otherwise.
func (o *Route) GetDisplayInfo() []DisplayInfo {
	if o == nil || o.DisplayInfo == nil {
		var ret []DisplayInfo
		return ret
	}
	return *o.DisplayInfo
}

// GetDisplayInfoOk returns a tuple with the DisplayInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetDisplayInfoOk() (*[]DisplayInfo, bool) {
	if o == nil || o.DisplayInfo == nil {
		return nil, false
	}
	return o.DisplayInfo, true
}

// HasDisplayInfo returns a boolean if a field has been set.
func (o *Route) HasDisplayInfo() bool {
	if o != nil && o.DisplayInfo != nil {
		return true
	}

	return false
}

// SetDisplayInfo gets a reference to the given []DisplayInfo and assigns it to the DisplayInfo field.
func (o *Route) SetDisplayInfo(v []DisplayInfo) {
	o.DisplayInfo = &v
}

// GetResourceOwnerId returns the ResourceOwnerId field value if set, zero value otherwise.
func (o *Route) GetResourceOwnerId() string {
	if o == nil || o.ResourceOwnerId == nil {
		var ret string
		return ret
	}
	return *o.ResourceOwnerId
}

// GetResourceOwnerIdOk returns a tuple with the ResourceOwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetResourceOwnerIdOk() (*string, bool) {
	if o == nil || o.ResourceOwnerId == nil {
		return nil, false
	}
	return o.ResourceOwnerId, true
}

// HasResourceOwnerId returns a boolean if a field has been set.
func (o *Route) HasResourceOwnerId() bool {
	if o != nil && o.ResourceOwnerId != nil {
		return true
	}

	return false
}

// SetResourceOwnerId gets a reference to the given string and assigns it to the ResourceOwnerId field.
func (o *Route) SetResourceOwnerId(v string) {
	o.ResourceOwnerId = &v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Contents != nil {
		toSerialize["contents"] = o.Contents
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayInfo != nil {
		toSerialize["display_info"] = o.DisplayInfo
	}
	if o.ResourceOwnerId != nil {
		toSerialize["resource_owner_id"] = o.ResourceOwnerId
	}
	return json.Marshal(toSerialize)
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


