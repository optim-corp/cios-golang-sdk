/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAssetApiService DeviceAssetApi service
type DeviceAssetApiService service

type ApiCreateDeviceEntitiesComponentRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_deviceEntitiesComponent *DeviceEntitiesComponent
}

func (r ApiCreateDeviceEntitiesComponentRequest) DeviceEntitiesComponent(deviceEntitiesComponent DeviceEntitiesComponent) ApiCreateDeviceEntitiesComponentRequest {
	r.P_deviceEntitiesComponent = &deviceEntitiesComponent
	return r
}

func (r ApiCreateDeviceEntitiesComponentRequest) Execute() (SingleDeviceEntitiesComponent, *_nethttp.Response, error) {
	return r.ApiService.CreateDeviceEntitiesComponentExecute(r)
}

/*
 * CreateDeviceEntitiesComponent Method for CreateDeviceEntitiesComponent
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiCreateDeviceEntitiesComponentRequest
 */
func (a *DeviceAssetApiService) CreateDeviceEntitiesComponent(Ctx _context.Context, key string) ApiCreateDeviceEntitiesComponentRequest {
	return ApiCreateDeviceEntitiesComponentRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceEntitiesComponent
 */
func (a *DeviceAssetApiService) CreateDeviceEntitiesComponentExecute(r ApiCreateDeviceEntitiesComponentRequest) (SingleDeviceEntitiesComponent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceEntitiesComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.CreateDeviceEntitiesComponent")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_deviceEntitiesComponent == nil {
		return localVarReturnValue, nil, reportError("deviceEntitiesComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_deviceEntitiesComponent
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDeviceEntitiesLifecycleRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_eventKind *string
	P_eventMode *string
	P_eventType *string
	P_componentIdQuery *string
	P_beforeId *string
	P_afterId *string
	P_startEventAt *string
	P_endEventAt *string
	P_lifeCycle *LifeCycle
}

func (r ApiCreateDeviceEntitiesLifecycleRequest) EventKind(eventKind string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_eventKind = &eventKind
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) EventMode(eventMode string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_eventMode = &eventMode
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) EventType(eventType string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_eventType = &eventType
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) ComponentIdQuery(componentIdQuery string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_componentIdQuery = &componentIdQuery
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) BeforeId(beforeId string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_beforeId = &beforeId
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) AfterId(afterId string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_afterId = &afterId
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) StartEventAt(startEventAt string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_startEventAt = &startEventAt
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) EndEventAt(endEventAt string) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_endEventAt = &endEventAt
	return r
}
func (r ApiCreateDeviceEntitiesLifecycleRequest) LifeCycle(lifeCycle LifeCycle) ApiCreateDeviceEntitiesLifecycleRequest {
	r.P_lifeCycle = &lifeCycle
	return r
}

func (r ApiCreateDeviceEntitiesLifecycleRequest) Execute() (SingleLifeCycle, *_nethttp.Response, error) {
	return r.ApiService.CreateDeviceEntitiesLifecycleExecute(r)
}

/*
 * CreateDeviceEntitiesLifecycle Method for CreateDeviceEntitiesLifecycle
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiCreateDeviceEntitiesLifecycleRequest
 */
func (a *DeviceAssetApiService) CreateDeviceEntitiesLifecycle(Ctx _context.Context, key string) ApiCreateDeviceEntitiesLifecycleRequest {
	return ApiCreateDeviceEntitiesLifecycleRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 * @return SingleLifeCycle
 */
func (a *DeviceAssetApiService) CreateDeviceEntitiesLifecycleExecute(r ApiCreateDeviceEntitiesLifecycleRequest) (SingleLifeCycle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleLifeCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.CreateDeviceEntitiesLifecycle")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/lifecycles"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_eventKind != nil {
		localVarQueryParams.Add("event_kind", parameterToString(*r.P_eventKind, ""))
	}
	if r.P_eventMode != nil {
		localVarQueryParams.Add("event_mode", parameterToString(*r.P_eventMode, ""))
	}
	if r.P_eventType != nil {
		localVarQueryParams.Add("event_type", parameterToString(*r.P_eventType, ""))
	}
	if r.P_componentIdQuery != nil {
		localVarQueryParams.Add("component_id_query", parameterToString(*r.P_componentIdQuery, ""))
	}
	if r.P_beforeId != nil {
		localVarQueryParams.Add("before_id", parameterToString(*r.P_beforeId, ""))
	}
	if r.P_afterId != nil {
		localVarQueryParams.Add("after_id", parameterToString(*r.P_afterId, ""))
	}
	if r.P_startEventAt != nil {
		localVarQueryParams.Add("start_event_at", parameterToString(*r.P_startEventAt, ""))
	}
	if r.P_endEventAt != nil {
		localVarQueryParams.Add("end_event_at", parameterToString(*r.P_endEventAt, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_lifeCycle
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateDeviceModelRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_deviceModelRequest *DeviceModelRequest
}

func (r ApiCreateDeviceModelRequest) DeviceModelRequest(deviceModelRequest DeviceModelRequest) ApiCreateDeviceModelRequest {
	r.P_deviceModelRequest = &deviceModelRequest
	return r
}

func (r ApiCreateDeviceModelRequest) Execute() (SingleDeviceModel, *_nethttp.Response, error) {
	return r.ApiService.CreateDeviceModelExecute(r)
}

/*
 * CreateDeviceModel Method for CreateDeviceModel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCreateDeviceModelRequest
 */
func (a *DeviceAssetApiService) CreateDeviceModel(Ctx _context.Context) ApiCreateDeviceModelRequest {
	return ApiCreateDeviceModelRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceModel
 */
func (a *DeviceAssetApiService) CreateDeviceModelExecute(r ApiCreateDeviceModelRequest) (SingleDeviceModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.CreateDeviceModel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_deviceModelRequest == nil {
		return localVarReturnValue, nil, reportError("deviceModelRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_deviceModelRequest
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateInventoryRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_name string
	P_inventory *Inventory
}

func (r ApiCreateInventoryRequest) Inventory(inventory Inventory) ApiCreateInventoryRequest {
	r.P_inventory = &inventory
	return r
}

func (r ApiCreateInventoryRequest) Execute() (SingleDeviceModelsEntity, *_nethttp.Response, error) {
	return r.ApiService.CreateInventoryExecute(r)
}

/*
 * CreateInventory Method for CreateInventory
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name
 * @return ApiCreateInventoryRequest
 */
func (a *DeviceAssetApiService) CreateInventory(Ctx _context.Context, name string) ApiCreateInventoryRequest {
	return ApiCreateInventoryRequest{
		ApiService: a,
		Ctx: Ctx,
		P_name: name,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceModelsEntity
 */
func (a *DeviceAssetApiService) CreateInventoryExecute(r ApiCreateInventoryRequest) (SingleDeviceModelsEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceModelsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.CreateInventory")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_models/{name}/entities"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.P_name, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_inventory == nil {
		return localVarReturnValue, nil, reportError("inventory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_inventory
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDeviceEntitiesComponentRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_component string
	P_isRecursive *bool
}

func (r ApiDeleteDeviceEntitiesComponentRequest) IsRecursive(isRecursive bool) ApiDeleteDeviceEntitiesComponentRequest {
	r.P_isRecursive = &isRecursive
	return r
}

func (r ApiDeleteDeviceEntitiesComponentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDeviceEntitiesComponentExecute(r)
}

/*
 * DeleteDeviceEntitiesComponent Method for DeleteDeviceEntitiesComponent
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @param component
 * @return ApiDeleteDeviceEntitiesComponentRequest
 */
func (a *DeviceAssetApiService) DeleteDeviceEntitiesComponent(Ctx _context.Context, key string, component string) ApiDeleteDeviceEntitiesComponentRequest {
	return ApiDeleteDeviceEntitiesComponentRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
		P_component: component,
	}
}

/*
 * Execute executes the request
 */
func (a *DeviceAssetApiService) DeleteDeviceEntitiesComponentExecute(r ApiDeleteDeviceEntitiesComponentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.DeleteDeviceEntitiesComponent")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/components/{component_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"component"+"}", _neturl.PathEscape(parameterToString(r.P_component, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_isRecursive == nil {
		return nil, reportError("isRecursive is required and must be specified")
	}

	localVarQueryParams.Add("is_recursive", parameterToString(*r.P_isRecursive, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDeviceEntitiesLifecycleRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_lifecycleId string
}


func (r ApiDeleteDeviceEntitiesLifecycleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDeviceEntitiesLifecycleExecute(r)
}

/*
 * DeleteDeviceEntitiesLifecycle Method for DeleteDeviceEntitiesLifecycle
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @param lifecycleId
 * @return ApiDeleteDeviceEntitiesLifecycleRequest
 */
func (a *DeviceAssetApiService) DeleteDeviceEntitiesLifecycle(Ctx _context.Context, key string, lifecycleId string) ApiDeleteDeviceEntitiesLifecycleRequest {
	return ApiDeleteDeviceEntitiesLifecycleRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
		P_lifecycleId: lifecycleId,
	}
}

/*
 * Execute executes the request
 */
func (a *DeviceAssetApiService) DeleteDeviceEntitiesLifecycleExecute(r ApiDeleteDeviceEntitiesLifecycleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.DeleteDeviceEntitiesLifecycle")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/lifecycles/{lifecycle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lifecycle_id"+"}", _neturl.PathEscape(parameterToString(r.P_lifecycleId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDeviceEntityRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
}


func (r ApiDeleteDeviceEntityRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDeviceEntityExecute(r)
}

/*
 * DeleteDeviceEntity Method for DeleteDeviceEntity
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiDeleteDeviceEntityRequest
 */
func (a *DeviceAssetApiService) DeleteDeviceEntity(Ctx _context.Context, key string) ApiDeleteDeviceEntityRequest {
	return ApiDeleteDeviceEntityRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 */
func (a *DeviceAssetApiService) DeleteDeviceEntityExecute(r ApiDeleteDeviceEntityRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.DeleteDeviceEntity")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeleteDeviceModelRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_name string
}


func (r ApiDeleteDeviceModelRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteDeviceModelExecute(r)
}

/*
 * DeleteDeviceModel Method for DeleteDeviceModel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name
 * @return ApiDeleteDeviceModelRequest
 */
func (a *DeviceAssetApiService) DeleteDeviceModel(Ctx _context.Context, name string) ApiDeleteDeviceModelRequest {
	return ApiDeleteDeviceModelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_name: name,
	}
}

/*
 * Execute executes the request
 */
func (a *DeviceAssetApiService) DeleteDeviceModelExecute(r ApiDeleteDeviceModelRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.DeleteDeviceModel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_models/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.P_name, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetDeviceEntitiesRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_offset *int64
	P_limit *int64
	P_order *string
	P_orderBy *string
	P_key *string
	P_serialNumber *string
	P_deviceId *string
	P_resourceOwnerId *string
	P_componentKey *string
	P_componentValue *string
	P_isFlat *bool
}

func (r ApiGetDeviceEntitiesRequest) Offset(offset int64) ApiGetDeviceEntitiesRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetDeviceEntitiesRequest) Limit(limit int64) ApiGetDeviceEntitiesRequest {
	r.P_limit = &limit
	return r
}
func (r ApiGetDeviceEntitiesRequest) Order(order string) ApiGetDeviceEntitiesRequest {
	r.P_order = &order
	return r
}
func (r ApiGetDeviceEntitiesRequest) OrderBy(orderBy string) ApiGetDeviceEntitiesRequest {
	r.P_orderBy = &orderBy
	return r
}
func (r ApiGetDeviceEntitiesRequest) Key(key string) ApiGetDeviceEntitiesRequest {
	r.P_key = &key
	return r
}
func (r ApiGetDeviceEntitiesRequest) SerialNumber(serialNumber string) ApiGetDeviceEntitiesRequest {
	r.P_serialNumber = &serialNumber
	return r
}
func (r ApiGetDeviceEntitiesRequest) DeviceId(deviceId string) ApiGetDeviceEntitiesRequest {
	r.P_deviceId = &deviceId
	return r
}
func (r ApiGetDeviceEntitiesRequest) ResourceOwnerId(resourceOwnerId string) ApiGetDeviceEntitiesRequest {
	r.P_resourceOwnerId = &resourceOwnerId
	return r
}
func (r ApiGetDeviceEntitiesRequest) ComponentKey(componentKey string) ApiGetDeviceEntitiesRequest {
	r.P_componentKey = &componentKey
	return r
}
func (r ApiGetDeviceEntitiesRequest) ComponentValue(componentValue string) ApiGetDeviceEntitiesRequest {
	r.P_componentValue = &componentValue
	return r
}
func (r ApiGetDeviceEntitiesRequest) IsFlat(isFlat bool) ApiGetDeviceEntitiesRequest {
	r.P_isFlat = &isFlat
	return r
}

func (r ApiGetDeviceEntitiesRequest) Execute() (MultipleDeviceModelEntity, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceEntitiesExecute(r)
}

/*
 * GetDeviceEntities Method for GetDeviceEntities
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetDeviceEntitiesRequest
 */
func (a *DeviceAssetApiService) GetDeviceEntities(Ctx _context.Context) ApiGetDeviceEntitiesRequest {
	return ApiGetDeviceEntitiesRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return MultipleDeviceModelEntity
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesExecute(r ApiGetDeviceEntitiesRequest) (MultipleDeviceModelEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleDeviceModelEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceEntities")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	if r.P_order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.P_order, ""))
	}
	if r.P_orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.P_orderBy, ""))
	}
	if r.P_key != nil {
		localVarQueryParams.Add("key", parameterToString(*r.P_key, ""))
	}
	if r.P_serialNumber != nil {
		localVarQueryParams.Add("serial_number", parameterToString(*r.P_serialNumber, ""))
	}
	if r.P_deviceId != nil {
		localVarQueryParams.Add("device_id", parameterToString(*r.P_deviceId, ""))
	}
	if r.P_resourceOwnerId != nil {
		localVarQueryParams.Add("resource_owner_id", parameterToString(*r.P_resourceOwnerId, ""))
	}
	if r.P_componentKey != nil {
		localVarQueryParams.Add("component_key", parameterToString(*r.P_componentKey, ""))
	}
	if r.P_componentValue != nil {
		localVarQueryParams.Add("component_value", parameterToString(*r.P_componentValue, ""))
	}
	if r.P_isFlat != nil {
		localVarQueryParams.Add("is_flat", parameterToString(*r.P_isFlat, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceEntitiesComponentRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_component string
}


func (r ApiGetDeviceEntitiesComponentRequest) Execute() (SingleDeviceEntitiesComponent, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceEntitiesComponentExecute(r)
}

/*
 * GetDeviceEntitiesComponent Method for GetDeviceEntitiesComponent
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @param component
 * @return ApiGetDeviceEntitiesComponentRequest
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesComponent(Ctx _context.Context, key string, component string) ApiGetDeviceEntitiesComponentRequest {
	return ApiGetDeviceEntitiesComponentRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
		P_component: component,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceEntitiesComponent
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesComponentExecute(r ApiGetDeviceEntitiesComponentRequest) (SingleDeviceEntitiesComponent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceEntitiesComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceEntitiesComponent")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/components/{component_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"component"+"}", _neturl.PathEscape(parameterToString(r.P_component, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceEntitiesComponentsRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_componentIdQuery *string
}

func (r ApiGetDeviceEntitiesComponentsRequest) ComponentIdQuery(componentIdQuery string) ApiGetDeviceEntitiesComponentsRequest {
	r.P_componentIdQuery = &componentIdQuery
	return r
}

func (r ApiGetDeviceEntitiesComponentsRequest) Execute() (MultipleDeviceEntitiesComponent, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceEntitiesComponentsExecute(r)
}

/*
 * GetDeviceEntitiesComponents Method for GetDeviceEntitiesComponents
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiGetDeviceEntitiesComponentsRequest
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesComponents(Ctx _context.Context, key string) ApiGetDeviceEntitiesComponentsRequest {
	return ApiGetDeviceEntitiesComponentsRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 * @return MultipleDeviceEntitiesComponent
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesComponentsExecute(r ApiGetDeviceEntitiesComponentsRequest) (MultipleDeviceEntitiesComponent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleDeviceEntitiesComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceEntitiesComponents")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_componentIdQuery != nil {
		localVarQueryParams.Add("component_id_query", parameterToString(*r.P_componentIdQuery, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceEntitiesLifecycleRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_lifecycleId string
}


func (r ApiGetDeviceEntitiesLifecycleRequest) Execute() (SingleLifeCycle, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceEntitiesLifecycleExecute(r)
}

/*
 * GetDeviceEntitiesLifecycle Method for GetDeviceEntitiesLifecycle
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @param lifecycleId
 * @return ApiGetDeviceEntitiesLifecycleRequest
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesLifecycle(Ctx _context.Context, key string, lifecycleId string) ApiGetDeviceEntitiesLifecycleRequest {
	return ApiGetDeviceEntitiesLifecycleRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
		P_lifecycleId: lifecycleId,
	}
}

/*
 * Execute executes the request
 * @return SingleLifeCycle
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesLifecycleExecute(r ApiGetDeviceEntitiesLifecycleRequest) (SingleLifeCycle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleLifeCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceEntitiesLifecycle")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/lifecycles/{lifecycle_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"lifecycle_id"+"}", _neturl.PathEscape(parameterToString(r.P_lifecycleId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceEntitiesLifecyclesRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_offset *int64
	P_limit *int64
	P_order *string
	P_orderBy *string
	P_eventKind *string
	P_eventMode *string
	P_eventType *string
	P_componentId *string
	P_beforeId *string
	P_afterId *string
	P_startEventAt *string
	P_endEventAt *string
}

func (r ApiGetDeviceEntitiesLifecyclesRequest) Offset(offset int64) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) Limit(limit int64) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_limit = &limit
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) Order(order string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_order = &order
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) OrderBy(orderBy string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_orderBy = &orderBy
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) EventKind(eventKind string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_eventKind = &eventKind
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) EventMode(eventMode string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_eventMode = &eventMode
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) EventType(eventType string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_eventType = &eventType
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) ComponentId(componentId string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_componentId = &componentId
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) BeforeId(beforeId string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_beforeId = &beforeId
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) AfterId(afterId string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_afterId = &afterId
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) StartEventAt(startEventAt string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_startEventAt = &startEventAt
	return r
}
func (r ApiGetDeviceEntitiesLifecyclesRequest) EndEventAt(endEventAt string) ApiGetDeviceEntitiesLifecyclesRequest {
	r.P_endEventAt = &endEventAt
	return r
}

func (r ApiGetDeviceEntitiesLifecyclesRequest) Execute() (MultipleLifeCycle, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceEntitiesLifecyclesExecute(r)
}

/*
 * GetDeviceEntitiesLifecycles Method for GetDeviceEntitiesLifecycles
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiGetDeviceEntitiesLifecyclesRequest
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesLifecycles(Ctx _context.Context, key string) ApiGetDeviceEntitiesLifecyclesRequest {
	return ApiGetDeviceEntitiesLifecyclesRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 * @return MultipleLifeCycle
 */
func (a *DeviceAssetApiService) GetDeviceEntitiesLifecyclesExecute(r ApiGetDeviceEntitiesLifecyclesRequest) (MultipleLifeCycle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleLifeCycle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceEntitiesLifecycles")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/lifecycles"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	if r.P_order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.P_order, ""))
	}
	if r.P_orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.P_orderBy, ""))
	}
	if r.P_eventKind != nil {
		localVarQueryParams.Add("event_kind", parameterToString(*r.P_eventKind, ""))
	}
	if r.P_eventMode != nil {
		localVarQueryParams.Add("event_mode", parameterToString(*r.P_eventMode, ""))
	}
	if r.P_eventType != nil {
		localVarQueryParams.Add("event_type", parameterToString(*r.P_eventType, ""))
	}
	if r.P_componentId != nil {
		localVarQueryParams.Add("component_id", parameterToString(*r.P_componentId, ""))
	}
	if r.P_beforeId != nil {
		localVarQueryParams.Add("before_id", parameterToString(*r.P_beforeId, ""))
	}
	if r.P_afterId != nil {
		localVarQueryParams.Add("after_id", parameterToString(*r.P_afterId, ""))
	}
	if r.P_startEventAt != nil {
		localVarQueryParams.Add("start_event_at", parameterToString(*r.P_startEventAt, ""))
	}
	if r.P_endEventAt != nil {
		localVarQueryParams.Add("end_event_at", parameterToString(*r.P_endEventAt, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceEntityRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
}


func (r ApiGetDeviceEntityRequest) Execute() (SingleDeviceModelsEntity, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceEntityExecute(r)
}

/*
 * GetDeviceEntity Method for GetDeviceEntity
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiGetDeviceEntityRequest
 */
func (a *DeviceAssetApiService) GetDeviceEntity(Ctx _context.Context, key string) ApiGetDeviceEntityRequest {
	return ApiGetDeviceEntityRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceModelsEntity
 */
func (a *DeviceAssetApiService) GetDeviceEntityExecute(r ApiGetDeviceEntityRequest) (SingleDeviceModelsEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceModelsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceEntity")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceModelRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_name string
}


func (r ApiGetDeviceModelRequest) Execute() (SingleDeviceModel, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceModelExecute(r)
}

/*
 * GetDeviceModel Method for GetDeviceModel
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name
 * @return ApiGetDeviceModelRequest
 */
func (a *DeviceAssetApiService) GetDeviceModel(Ctx _context.Context, name string) ApiGetDeviceModelRequest {
	return ApiGetDeviceModelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_name: name,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceModel
 */
func (a *DeviceAssetApiService) GetDeviceModelExecute(r ApiGetDeviceModelRequest) (SingleDeviceModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceModel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_models/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.P_name, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceModelsRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_offset *int64
	P_limit *int64
	P_order *string
	P_orderBy *string
	P_name *string
	P_endEventAt *string
	P_version *string
	P_resourceOwnerId *string
	P_componentKey *string
	P_componentValue *string
}

func (r ApiGetDeviceModelsRequest) Offset(offset int64) ApiGetDeviceModelsRequest {
	r.P_offset = &offset
	return r
}
func (r ApiGetDeviceModelsRequest) Limit(limit int64) ApiGetDeviceModelsRequest {
	r.P_limit = &limit
	return r
}
func (r ApiGetDeviceModelsRequest) Order(order string) ApiGetDeviceModelsRequest {
	r.P_order = &order
	return r
}
func (r ApiGetDeviceModelsRequest) OrderBy(orderBy string) ApiGetDeviceModelsRequest {
	r.P_orderBy = &orderBy
	return r
}
func (r ApiGetDeviceModelsRequest) Name(name string) ApiGetDeviceModelsRequest {
	r.P_name = &name
	return r
}
func (r ApiGetDeviceModelsRequest) EndEventAt(endEventAt string) ApiGetDeviceModelsRequest {
	r.P_endEventAt = &endEventAt
	return r
}
func (r ApiGetDeviceModelsRequest) Version(version string) ApiGetDeviceModelsRequest {
	r.P_version = &version
	return r
}
func (r ApiGetDeviceModelsRequest) ResourceOwnerId(resourceOwnerId string) ApiGetDeviceModelsRequest {
	r.P_resourceOwnerId = &resourceOwnerId
	return r
}
func (r ApiGetDeviceModelsRequest) ComponentKey(componentKey string) ApiGetDeviceModelsRequest {
	r.P_componentKey = &componentKey
	return r
}
func (r ApiGetDeviceModelsRequest) ComponentValue(componentValue string) ApiGetDeviceModelsRequest {
	r.P_componentValue = &componentValue
	return r
}

func (r ApiGetDeviceModelsRequest) Execute() (MultipleDeviceModel, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceModelsExecute(r)
}

/*
 * GetDeviceModels Method for GetDeviceModels
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiGetDeviceModelsRequest
 */
func (a *DeviceAssetApiService) GetDeviceModels(Ctx _context.Context) ApiGetDeviceModelsRequest {
	return ApiGetDeviceModelsRequest{
		ApiService: a,
		Ctx: Ctx,
	}
}

/*
 * Execute executes the request
 * @return MultipleDeviceModel
 */
func (a *DeviceAssetApiService) GetDeviceModelsExecute(r ApiGetDeviceModelsRequest) (MultipleDeviceModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleDeviceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceModels")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.P_offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.P_offset, ""))
	}
	if r.P_limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.P_limit, ""))
	}
	if r.P_order != nil {
		localVarQueryParams.Add("order", parameterToString(*r.P_order, ""))
	}
	if r.P_orderBy != nil {
		localVarQueryParams.Add("order_by", parameterToString(*r.P_orderBy, ""))
	}
	if r.P_name != nil {
		localVarQueryParams.Add("name", parameterToString(*r.P_name, ""))
	}
	if r.P_endEventAt != nil {
		localVarQueryParams.Add("end_event_at", parameterToString(*r.P_endEventAt, ""))
	}
	if r.P_version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.P_version, ""))
	}
	if r.P_resourceOwnerId != nil {
		localVarQueryParams.Add("resource_owner_id", parameterToString(*r.P_resourceOwnerId, ""))
	}
	if r.P_componentKey != nil {
		localVarQueryParams.Add("component_key", parameterToString(*r.P_componentKey, ""))
	}
	if r.P_componentValue != nil {
		localVarQueryParams.Add("component_value", parameterToString(*r.P_componentValue, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetDeviceModelsComponentsRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_name string
}


func (r ApiGetDeviceModelsComponentsRequest) Execute() (MultipleConstitutionComponent, *_nethttp.Response, error) {
	return r.ApiService.GetDeviceModelsComponentsExecute(r)
}

/*
 * GetDeviceModelsComponents Method for GetDeviceModelsComponents
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name
 * @return ApiGetDeviceModelsComponentsRequest
 */
func (a *DeviceAssetApiService) GetDeviceModelsComponents(Ctx _context.Context, name string) ApiGetDeviceModelsComponentsRequest {
	return ApiGetDeviceModelsComponentsRequest{
		ApiService: a,
		Ctx: Ctx,
		P_name: name,
	}
}

/*
 * Execute executes the request
 * @return MultipleConstitutionComponent
 */
func (a *DeviceAssetApiService) GetDeviceModelsComponentsExecute(r ApiGetDeviceModelsComponentsRequest) (MultipleConstitutionComponent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MultipleConstitutionComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.GetDeviceModelsComponents")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_models/{name}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.P_name, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDeviceEntitiesComponentRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_component string
	P_deviceEntitiesComponentUpdateRequest *DeviceEntitiesComponentUpdateRequest
}

func (r ApiUpdateDeviceEntitiesComponentRequest) DeviceEntitiesComponentUpdateRequest(deviceEntitiesComponentUpdateRequest DeviceEntitiesComponentUpdateRequest) ApiUpdateDeviceEntitiesComponentRequest {
	r.P_deviceEntitiesComponentUpdateRequest = &deviceEntitiesComponentUpdateRequest
	return r
}

func (r ApiUpdateDeviceEntitiesComponentRequest) Execute() (SingleDeviceEntitiesComponent, *_nethttp.Response, error) {
	return r.ApiService.UpdateDeviceEntitiesComponentExecute(r)
}

/*
 * UpdateDeviceEntitiesComponent Method for UpdateDeviceEntitiesComponent
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @param component
 * @return ApiUpdateDeviceEntitiesComponentRequest
 */
func (a *DeviceAssetApiService) UpdateDeviceEntitiesComponent(Ctx _context.Context, key string, component string) ApiUpdateDeviceEntitiesComponentRequest {
	return ApiUpdateDeviceEntitiesComponentRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
		P_component: component,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceEntitiesComponent
 */
func (a *DeviceAssetApiService) UpdateDeviceEntitiesComponentExecute(r ApiUpdateDeviceEntitiesComponentRequest) (SingleDeviceEntitiesComponent, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceEntitiesComponent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.UpdateDeviceEntitiesComponent")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/components/{component_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)
	localVarPath = strings.Replace(localVarPath, "{"+"component"+"}", _neturl.PathEscape(parameterToString(r.P_component, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_deviceEntitiesComponentUpdateRequest
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDeviceEntitiesComponentsRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_deviceEntitiesComponent *[]DeviceEntitiesComponent
}

func (r ApiUpdateDeviceEntitiesComponentsRequest) DeviceEntitiesComponent(deviceEntitiesComponent []DeviceEntitiesComponent) ApiUpdateDeviceEntitiesComponentsRequest {
	r.P_deviceEntitiesComponent = &deviceEntitiesComponent
	return r
}

func (r ApiUpdateDeviceEntitiesComponentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UpdateDeviceEntitiesComponentsExecute(r)
}

/*
 * UpdateDeviceEntitiesComponents Method for UpdateDeviceEntitiesComponents
 * attributeが更新可能
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiUpdateDeviceEntitiesComponentsRequest
 */
func (a *DeviceAssetApiService) UpdateDeviceEntitiesComponents(Ctx _context.Context, key string) ApiUpdateDeviceEntitiesComponentsRequest {
	return ApiUpdateDeviceEntitiesComponentsRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 */
func (a *DeviceAssetApiService) UpdateDeviceEntitiesComponentsExecute(r ApiUpdateDeviceEntitiesComponentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.UpdateDeviceEntitiesComponents")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}/components"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_deviceEntitiesComponent == nil {
		return nil, reportError("deviceEntitiesComponent is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_deviceEntitiesComponent
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateDeviceEntityRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_key string
	P_deviceModelsEntity *DeviceModelsEntity
}

func (r ApiUpdateDeviceEntityRequest) DeviceModelsEntity(deviceModelsEntity DeviceModelsEntity) ApiUpdateDeviceEntityRequest {
	r.P_deviceModelsEntity = &deviceModelsEntity
	return r
}

func (r ApiUpdateDeviceEntityRequest) Execute() (SingleDeviceModelsEntity, *_nethttp.Response, error) {
	return r.ApiService.UpdateDeviceEntityExecute(r)
}

/*
 * UpdateDeviceEntity Method for UpdateDeviceEntity
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param key
 * @return ApiUpdateDeviceEntityRequest
 */
func (a *DeviceAssetApiService) UpdateDeviceEntity(Ctx _context.Context, key string) ApiUpdateDeviceEntityRequest {
	return ApiUpdateDeviceEntityRequest{
		ApiService: a,
		Ctx: Ctx,
		P_key: key,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceModelsEntity
 */
func (a *DeviceAssetApiService) UpdateDeviceEntityExecute(r ApiUpdateDeviceEntityRequest) (SingleDeviceModelsEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceModelsEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.UpdateDeviceEntity")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_entities/{key}"
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.P_key, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_deviceModelsEntity == nil {
		return localVarReturnValue, nil, reportError("deviceModelsEntity is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_deviceModelsEntity
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDeviceModelRequest struct {
	Ctx _context.Context
	ApiService *DeviceAssetApiService
	P_name string
	P_deviceModelUpdateRequest *DeviceModelUpdateRequest
}

func (r ApiUpdateDeviceModelRequest) DeviceModelUpdateRequest(deviceModelUpdateRequest DeviceModelUpdateRequest) ApiUpdateDeviceModelRequest {
	r.P_deviceModelUpdateRequest = &deviceModelUpdateRequest
	return r
}

func (r ApiUpdateDeviceModelRequest) Execute() (SingleDeviceModel, *_nethttp.Response, error) {
	return r.ApiService.UpdateDeviceModelExecute(r)
}

/*
 * UpdateDeviceModel Method for UpdateDeviceModel
 * maker_id, version及びcomponentsが更新可能
 * @param Ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param name
 * @return ApiUpdateDeviceModelRequest
 */
func (a *DeviceAssetApiService) UpdateDeviceModel(Ctx _context.Context, name string) ApiUpdateDeviceModelRequest {
	return ApiUpdateDeviceModelRequest{
		ApiService: a,
		Ctx: Ctx,
		P_name: name,
	}
}

/*
 * Execute executes the request
 * @return SingleDeviceModel
 */
func (a *DeviceAssetApiService) UpdateDeviceModelExecute(r ApiUpdateDeviceModelRequest) (SingleDeviceModel, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SingleDeviceModel
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.Ctx, "DeviceAssetApiService.UpdateDeviceModel")
	if localBasePath == "/" {
	    localBasePath = ""
	}
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/device_models/{name}"
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.P_name, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.P_deviceModelUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("deviceModelUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.P_deviceModelUpdateRequest
	req, err := a.client.prepareRequest(r.Ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
