/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleDevice struct for MultipleDevice
type MultipleDevice struct {
	Total int64 `json:"total"`
	Devices []Device `json:"devices"`
}

// NewMultipleDevice instantiates a new MultipleDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleDevice(total int64, devices []Device, ) *MultipleDevice {
	this := MultipleDevice{}
	this.Total = total
	this.Devices = devices
	return &this
}

// NewMultipleDeviceWithDefaults instantiates a new MultipleDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleDeviceWithDefaults() *MultipleDevice {
	this := MultipleDevice{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleDevice) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleDevice) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleDevice) SetTotal(v int64) {
	o.Total = v
}

// GetDevices returns the Devices field value
func (o *MultipleDevice) GetDevices() []Device {
	if o == nil  {
		var ret []Device
		return ret
	}

	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value
// and a boolean to check if the value has been set.
func (o *MultipleDevice) GetDevicesOk() (*[]Device, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Devices, true
}

// SetDevices sets field value
func (o *MultipleDevice) SetDevices(v []Device) {
	o.Devices = v
}

func (o MultipleDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["devices"] = o.Devices
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleDevice struct {
	value *MultipleDevice
	isSet bool
}

func (v NullableMultipleDevice) Get() *MultipleDevice {
	return v.value
}

func (v *NullableMultipleDevice) Set(val *MultipleDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleDevice(val *MultipleDevice) *NullableMultipleDevice {
	return &NullableMultipleDevice{value: val, isSet: true}
}

func (v NullableMultipleDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


