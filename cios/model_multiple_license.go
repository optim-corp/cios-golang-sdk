/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleLicense struct for MultipleLicense
type MultipleLicense struct {
	Total int64 `json:"total"`
	Licenses []License `json:"licenses"`
}

// NewMultipleLicense instantiates a new MultipleLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleLicense(total int64, licenses []License, ) *MultipleLicense {
	this := MultipleLicense{}
	this.Total = total
	this.Licenses = licenses
	return &this
}

// NewMultipleLicenseWithDefaults instantiates a new MultipleLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleLicenseWithDefaults() *MultipleLicense {
	this := MultipleLicense{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleLicense) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleLicense) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleLicense) SetTotal(v int64) {
	o.Total = v
}

// GetLicenses returns the Licenses field value
func (o *MultipleLicense) GetLicenses() []License {
	if o == nil  {
		var ret []License
		return ret
	}

	return o.Licenses
}

// GetLicensesOk returns a tuple with the Licenses field value
// and a boolean to check if the value has been set.
func (o *MultipleLicense) GetLicensesOk() (*[]License, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Licenses, true
}

// SetLicenses sets field value
func (o *MultipleLicense) SetLicenses(v []License) {
	o.Licenses = v
}

func (o MultipleLicense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["licenses"] = o.Licenses
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleLicense struct {
	value *MultipleLicense
	isSet bool
}

func (v NullableMultipleLicense) Get() *MultipleLicense {
	return v.value
}

func (v *NullableMultipleLicense) Set(val *MultipleLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleLicense(val *MultipleLicense) *NullableMultipleLicense {
	return &NullableMultipleLicense{value: val, isSet: true}
}

func (v NullableMultipleLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


