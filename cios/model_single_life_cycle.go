/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleLifeCycle struct for SingleLifeCycle
type SingleLifeCycle struct {
	Lifecycle LifeCycle `json:"lifecycle"`
}

// NewSingleLifeCycle instantiates a new SingleLifeCycle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleLifeCycle(lifecycle LifeCycle, ) *SingleLifeCycle {
	this := SingleLifeCycle{}
	this.Lifecycle = lifecycle
	return &this
}

// NewSingleLifeCycleWithDefaults instantiates a new SingleLifeCycle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleLifeCycleWithDefaults() *SingleLifeCycle {
	this := SingleLifeCycle{}
	return &this
}

// GetLifecycle returns the Lifecycle field value
func (o *SingleLifeCycle) GetLifecycle() LifeCycle {
	if o == nil  {
		var ret LifeCycle
		return ret
	}

	return o.Lifecycle
}

// GetLifecycleOk returns a tuple with the Lifecycle field value
// and a boolean to check if the value has been set.
func (o *SingleLifeCycle) GetLifecycleOk() (*LifeCycle, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lifecycle, true
}

// SetLifecycle sets field value
func (o *SingleLifeCycle) SetLifecycle(v LifeCycle) {
	o.Lifecycle = v
}

func (o SingleLifeCycle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["lifecycle"] = o.Lifecycle
	}
	return json.Marshal(toSerialize)
}

type NullableSingleLifeCycle struct {
	value *SingleLifeCycle
	isSet bool
}

func (v NullableSingleLifeCycle) Get() *SingleLifeCycle {
	return v.value
}

func (v *NullableSingleLifeCycle) Set(val *SingleLifeCycle) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleLifeCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleLifeCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleLifeCycle(val *SingleLifeCycle) *NullableSingleLifeCycle {
	return &NullableSingleLifeCycle{value: val, isSet: true}
}

func (v NullableSingleLifeCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleLifeCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


