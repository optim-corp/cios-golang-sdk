/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleDataStoreObject struct for MultipleDataStoreObject
type MultipleDataStoreObject struct {
	Total int64 `json:"total"`
	Objects []DataStoreObject `json:"objects"`
}

// NewMultipleDataStoreObject instantiates a new MultipleDataStoreObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleDataStoreObject(total int64, objects []DataStoreObject, ) *MultipleDataStoreObject {
	this := MultipleDataStoreObject{}
	this.Total = total
	this.Objects = objects
	return &this
}

// NewMultipleDataStoreObjectWithDefaults instantiates a new MultipleDataStoreObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleDataStoreObjectWithDefaults() *MultipleDataStoreObject {
	this := MultipleDataStoreObject{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleDataStoreObject) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleDataStoreObject) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleDataStoreObject) SetTotal(v int64) {
	o.Total = v
}

// GetObjects returns the Objects field value
func (o *MultipleDataStoreObject) GetObjects() []DataStoreObject {
	if o == nil  {
		var ret []DataStoreObject
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *MultipleDataStoreObject) GetObjectsOk() (*[]DataStoreObject, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Objects, true
}

// SetObjects sets field value
func (o *MultipleDataStoreObject) SetObjects(v []DataStoreObject) {
	o.Objects = v
}

func (o MultipleDataStoreObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["objects"] = o.Objects
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleDataStoreObject struct {
	value *MultipleDataStoreObject
	isSet bool
}

func (v NullableMultipleDataStoreObject) Get() *MultipleDataStoreObject {
	return v.value
}

func (v *NullableMultipleDataStoreObject) Set(val *MultipleDataStoreObject) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleDataStoreObject) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleDataStoreObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleDataStoreObject(val *MultipleDataStoreObject) *NullableMultipleDataStoreObject {
	return &NullableMultipleDataStoreObject{value: val, isSet: true}
}

func (v NullableMultipleDataStoreObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleDataStoreObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


