/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// DataStoreObject struct for DataStoreObject
type DataStoreObject struct {
	Id string `json:"id"`
	ChannelProtocols *[]ChannelProtocol `json:"channel_protocols,omitempty"`
	MimeType string `json:"mime_type"`
	Timestamp string `json:"timestamp"`
	Location *DataStoreObjectLocation `json:"location,omitempty"`
	SessionId *string `json:"session_id,omitempty"`
}

// NewDataStoreObject instantiates a new DataStoreObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStoreObject(id string, mimeType string, timestamp string, ) *DataStoreObject {
	this := DataStoreObject{}
	this.Id = id
	this.MimeType = mimeType
	this.Timestamp = timestamp
	return &this
}

// NewDataStoreObjectWithDefaults instantiates a new DataStoreObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreObjectWithDefaults() *DataStoreObject {
	this := DataStoreObject{}
	return &this
}

// GetId returns the Id field value
func (o *DataStoreObject) GetId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DataStoreObject) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DataStoreObject) SetId(v string) {
	o.Id = v
}

// GetChannelProtocols returns the ChannelProtocols field value if set, zero value otherwise.
func (o *DataStoreObject) GetChannelProtocols() []ChannelProtocol {
	if o == nil || o.ChannelProtocols == nil {
		var ret []ChannelProtocol
		return ret
	}
	return *o.ChannelProtocols
}

// GetChannelProtocolsOk returns a tuple with the ChannelProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreObject) GetChannelProtocolsOk() (*[]ChannelProtocol, bool) {
	if o == nil || o.ChannelProtocols == nil {
		return nil, false
	}
	return o.ChannelProtocols, true
}

// HasChannelProtocols returns a boolean if a field has been set.
func (o *DataStoreObject) HasChannelProtocols() bool {
	if o != nil && o.ChannelProtocols != nil {
		return true
	}

	return false
}

// SetChannelProtocols gets a reference to the given []ChannelProtocol and assigns it to the ChannelProtocols field.
func (o *DataStoreObject) SetChannelProtocols(v []ChannelProtocol) {
	o.ChannelProtocols = &v
}

// GetMimeType returns the MimeType field value
func (o *DataStoreObject) GetMimeType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *DataStoreObject) GetMimeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *DataStoreObject) SetMimeType(v string) {
	o.MimeType = v
}

// GetTimestamp returns the Timestamp field value
func (o *DataStoreObject) GetTimestamp() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *DataStoreObject) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *DataStoreObject) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *DataStoreObject) GetLocation() DataStoreObjectLocation {
	if o == nil || o.Location == nil {
		var ret DataStoreObjectLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreObject) GetLocationOk() (*DataStoreObjectLocation, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *DataStoreObject) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given DataStoreObjectLocation and assigns it to the Location field.
func (o *DataStoreObject) SetLocation(v DataStoreObjectLocation) {
	o.Location = &v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *DataStoreObject) GetSessionId() string {
	if o == nil || o.SessionId == nil {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreObject) GetSessionIdOk() (*string, bool) {
	if o == nil || o.SessionId == nil {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *DataStoreObject) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *DataStoreObject) SetSessionId(v string) {
	o.SessionId = &v
}

func (o DataStoreObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.ChannelProtocols != nil {
		toSerialize["channel_protocols"] = o.ChannelProtocols
	}
	if true {
		toSerialize["mime_type"] = o.MimeType
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.SessionId != nil {
		toSerialize["session_id"] = o.SessionId
	}
	return json.Marshal(toSerialize)
}

type NullableDataStoreObject struct {
	value *DataStoreObject
	isSet bool
}

func (v NullableDataStoreObject) Get() *DataStoreObject {
	return v.value
}

func (v *NullableDataStoreObject) Set(val *DataStoreObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreObject(val *DataStoreObject) *NullableDataStoreObject {
	return &NullableDataStoreObject{value: val, isSet: true}
}

func (v NullableDataStoreObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


