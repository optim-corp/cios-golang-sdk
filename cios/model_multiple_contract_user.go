/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleContractUser struct for MultipleContractUser
type MultipleContractUser struct {
	Total *int64 `json:"total,omitempty"`
	Users *ContractUser `json:"users,omitempty"`
}

// NewMultipleContractUser instantiates a new MultipleContractUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleContractUser() *MultipleContractUser {
	this := MultipleContractUser{}
	return &this
}

// NewMultipleContractUserWithDefaults instantiates a new MultipleContractUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleContractUserWithDefaults() *MultipleContractUser {
	this := MultipleContractUser{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MultipleContractUser) GetTotal() int64 {
	if o == nil || o.Total == nil {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContractUser) GetTotalOk() (*int64, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MultipleContractUser) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *MultipleContractUser) SetTotal(v int64) {
	o.Total = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *MultipleContractUser) GetUsers() ContractUser {
	if o == nil || o.Users == nil {
		var ret ContractUser
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleContractUser) GetUsersOk() (*ContractUser, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *MultipleContractUser) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given ContractUser and assigns it to the Users field.
func (o *MultipleContractUser) SetUsers(v ContractUser) {
	o.Users = &v
}

func (o MultipleContractUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Users != nil {
		toSerialize["users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleContractUser struct {
	value *MultipleContractUser
	isSet bool
}

func (v NullableMultipleContractUser) Get() *MultipleContractUser {
	return v.value
}

func (v *NullableMultipleContractUser) Set(val *MultipleContractUser) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleContractUser) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleContractUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleContractUser(val *MultipleContractUser) *NullableMultipleContractUser {
	return &NullableMultipleContractUser{value: val, isSet: true}
}

func (v NullableMultipleContractUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleContractUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


