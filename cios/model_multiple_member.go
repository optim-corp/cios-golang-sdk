/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleMember struct for MultipleMember
type MultipleMember struct {
	Total *int64 `json:"total,omitempty"`
	Members *[]Member `json:"members,omitempty"`
}

// NewMultipleMember instantiates a new MultipleMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleMember() *MultipleMember {
	this := MultipleMember{}
	return &this
}

// NewMultipleMemberWithDefaults instantiates a new MultipleMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleMemberWithDefaults() *MultipleMember {
	this := MultipleMember{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *MultipleMember) GetTotal() int64 {
	if o == nil || o.Total == nil {
		var ret int64
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleMember) GetTotalOk() (*int64, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *MultipleMember) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int64 and assigns it to the Total field.
func (o *MultipleMember) SetTotal(v int64) {
	o.Total = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *MultipleMember) GetMembers() []Member {
	if o == nil || o.Members == nil {
		var ret []Member
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MultipleMember) GetMembersOk() (*[]Member, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *MultipleMember) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []Member and assigns it to the Members field.
func (o *MultipleMember) SetMembers(v []Member) {
	o.Members = &v
}

func (o MultipleMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleMember struct {
	value *MultipleMember
	isSet bool
}

func (v NullableMultipleMember) Get() *MultipleMember {
	return v.value
}

func (v *NullableMultipleMember) Set(val *MultipleMember) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleMember) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleMember(val *MultipleMember) *NullableMultipleMember {
	return &NullableMultipleMember{value: val, isSet: true}
}

func (v NullableMultipleMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


