/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// PackerFormatJsonHeader struct for PackerFormatJsonHeader
type PackerFormatJsonHeader struct {
	ChannelId string `json:"channel_id"`
	ChannelProtocols *[]ChannelProtocol `json:"channel_protocols,omitempty"`
	Timestamp string `json:"timestamp"`
	SessionId *string `json:"session_id,omitempty"`
	MimeType string `json:"mime_type"`
	Labels *map[string]interface{} `json:"labels,omitempty"`
}

// NewPackerFormatJsonHeader instantiates a new PackerFormatJsonHeader object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackerFormatJsonHeader(channelId string, timestamp string, mimeType string, ) *PackerFormatJsonHeader {
	this := PackerFormatJsonHeader{}
	this.ChannelId = channelId
	this.Timestamp = timestamp
	this.MimeType = mimeType
	return &this
}

// NewPackerFormatJsonHeaderWithDefaults instantiates a new PackerFormatJsonHeader object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackerFormatJsonHeaderWithDefaults() *PackerFormatJsonHeader {
	this := PackerFormatJsonHeader{}
	return &this
}

// GetChannelId returns the ChannelId field value
func (o *PackerFormatJsonHeader) GetChannelId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *PackerFormatJsonHeader) GetChannelIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *PackerFormatJsonHeader) SetChannelId(v string) {
	o.ChannelId = v
}

// GetChannelProtocols returns the ChannelProtocols field value if set, zero value otherwise.
func (o *PackerFormatJsonHeader) GetChannelProtocols() []ChannelProtocol {
	if o == nil || o.ChannelProtocols == nil {
		var ret []ChannelProtocol
		return ret
	}
	return *o.ChannelProtocols
}

// GetChannelProtocolsOk returns a tuple with the ChannelProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackerFormatJsonHeader) GetChannelProtocolsOk() (*[]ChannelProtocol, bool) {
	if o == nil || o.ChannelProtocols == nil {
		return nil, false
	}
	return o.ChannelProtocols, true
}

// HasChannelProtocols returns a boolean if a field has been set.
func (o *PackerFormatJsonHeader) HasChannelProtocols() bool {
	if o != nil && o.ChannelProtocols != nil {
		return true
	}

	return false
}

// SetChannelProtocols gets a reference to the given []ChannelProtocol and assigns it to the ChannelProtocols field.
func (o *PackerFormatJsonHeader) SetChannelProtocols(v []ChannelProtocol) {
	o.ChannelProtocols = &v
}

// GetTimestamp returns the Timestamp field value
func (o *PackerFormatJsonHeader) GetTimestamp() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *PackerFormatJsonHeader) GetTimestampOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *PackerFormatJsonHeader) SetTimestamp(v string) {
	o.Timestamp = v
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *PackerFormatJsonHeader) GetSessionId() string {
	if o == nil || o.SessionId == nil {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackerFormatJsonHeader) GetSessionIdOk() (*string, bool) {
	if o == nil || o.SessionId == nil {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *PackerFormatJsonHeader) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *PackerFormatJsonHeader) SetSessionId(v string) {
	o.SessionId = &v
}

// GetMimeType returns the MimeType field value
func (o *PackerFormatJsonHeader) GetMimeType() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *PackerFormatJsonHeader) GetMimeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *PackerFormatJsonHeader) SetMimeType(v string) {
	o.MimeType = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PackerFormatJsonHeader) GetLabels() map[string]interface{} {
	if o == nil || o.Labels == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackerFormatJsonHeader) GetLabelsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *PackerFormatJsonHeader) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]interface{} and assigns it to the Labels field.
func (o *PackerFormatJsonHeader) SetLabels(v map[string]interface{}) {
	o.Labels = &v
}

func (o PackerFormatJsonHeader) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["channel_id"] = o.ChannelId
	}
	if o.ChannelProtocols != nil {
		toSerialize["channel_protocols"] = o.ChannelProtocols
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.SessionId != nil {
		toSerialize["session_id"] = o.SessionId
	}
	if true {
		toSerialize["mime_type"] = o.MimeType
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	return json.Marshal(toSerialize)
}

type NullablePackerFormatJsonHeader struct {
	value *PackerFormatJsonHeader
	isSet bool
}

func (v NullablePackerFormatJsonHeader) Get() *PackerFormatJsonHeader {
	return v.value
}

func (v *NullablePackerFormatJsonHeader) Set(val *PackerFormatJsonHeader) {
	v.value = val
	v.isSet = true
}

func (v NullablePackerFormatJsonHeader) IsSet() bool {
	return v.isSet
}

func (v *NullablePackerFormatJsonHeader) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackerFormatJsonHeader(val *PackerFormatJsonHeader) *NullablePackerFormatJsonHeader {
	return &NullablePackerFormatJsonHeader{value: val, isSet: true}
}

func (v NullablePackerFormatJsonHeader) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackerFormatJsonHeader) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


