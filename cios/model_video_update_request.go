/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// VideoUpdateRequest struct for VideoUpdateRequest
type VideoUpdateRequest struct {
	VideoName *string `json:"video_name,omitempty"`
	VideoDescription *string `json:"video_description,omitempty"`
}

// NewVideoUpdateRequest instantiates a new VideoUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVideoUpdateRequest() *VideoUpdateRequest {
	this := VideoUpdateRequest{}
	return &this
}

// NewVideoUpdateRequestWithDefaults instantiates a new VideoUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVideoUpdateRequestWithDefaults() *VideoUpdateRequest {
	this := VideoUpdateRequest{}
	return &this
}

// GetVideoName returns the VideoName field value if set, zero value otherwise.
func (o *VideoUpdateRequest) GetVideoName() string {
	if o == nil || o.VideoName == nil {
		var ret string
		return ret
	}
	return *o.VideoName
}

// GetVideoNameOk returns a tuple with the VideoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoUpdateRequest) GetVideoNameOk() (*string, bool) {
	if o == nil || o.VideoName == nil {
		return nil, false
	}
	return o.VideoName, true
}

// HasVideoName returns a boolean if a field has been set.
func (o *VideoUpdateRequest) HasVideoName() bool {
	if o != nil && o.VideoName != nil {
		return true
	}

	return false
}

// SetVideoName gets a reference to the given string and assigns it to the VideoName field.
func (o *VideoUpdateRequest) SetVideoName(v string) {
	o.VideoName = &v
}

// GetVideoDescription returns the VideoDescription field value if set, zero value otherwise.
func (o *VideoUpdateRequest) GetVideoDescription() string {
	if o == nil || o.VideoDescription == nil {
		var ret string
		return ret
	}
	return *o.VideoDescription
}

// GetVideoDescriptionOk returns a tuple with the VideoDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VideoUpdateRequest) GetVideoDescriptionOk() (*string, bool) {
	if o == nil || o.VideoDescription == nil {
		return nil, false
	}
	return o.VideoDescription, true
}

// HasVideoDescription returns a boolean if a field has been set.
func (o *VideoUpdateRequest) HasVideoDescription() bool {
	if o != nil && o.VideoDescription != nil {
		return true
	}

	return false
}

// SetVideoDescription gets a reference to the given string and assigns it to the VideoDescription field.
func (o *VideoUpdateRequest) SetVideoDescription(v string) {
	o.VideoDescription = &v
}

func (o VideoUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VideoName != nil {
		toSerialize["video_name"] = o.VideoName
	}
	if o.VideoDescription != nil {
		toSerialize["video_description"] = o.VideoDescription
	}
	return json.Marshal(toSerialize)
}

type NullableVideoUpdateRequest struct {
	value *VideoUpdateRequest
	isSet bool
}

func (v NullableVideoUpdateRequest) Get() *VideoUpdateRequest {
	return v.value
}

func (v *NullableVideoUpdateRequest) Set(val *VideoUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableVideoUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableVideoUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVideoUpdateRequest(val *VideoUpdateRequest) *NullableVideoUpdateRequest {
	return &NullableVideoUpdateRequest{value: val, isSet: true}
}

func (v NullableVideoUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVideoUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


