/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleSession struct for SingleSession
type SingleSession struct {
	Session *Session `json:"session,omitempty"`
}

// NewSingleSession instantiates a new SingleSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleSession() *SingleSession {
	this := SingleSession{}
	return &this
}

// NewSingleSessionWithDefaults instantiates a new SingleSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleSessionWithDefaults() *SingleSession {
	this := SingleSession{}
	return &this
}

// GetSession returns the Session field value if set, zero value otherwise.
func (o *SingleSession) GetSession() Session {
	if o == nil || o.Session == nil {
		var ret Session
		return ret
	}
	return *o.Session
}

// GetSessionOk returns a tuple with the Session field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SingleSession) GetSessionOk() (*Session, bool) {
	if o == nil || o.Session == nil {
		return nil, false
	}
	return o.Session, true
}

// HasSession returns a boolean if a field has been set.
func (o *SingleSession) HasSession() bool {
	if o != nil && o.Session != nil {
		return true
	}

	return false
}

// SetSession gets a reference to the given Session and assigns it to the Session field.
func (o *SingleSession) SetSession(v Session) {
	o.Session = &v
}

func (o SingleSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Session != nil {
		toSerialize["session"] = o.Session
	}
	return json.Marshal(toSerialize)
}

type NullableSingleSession struct {
	value *SingleSession
	isSet bool
}

func (v NullableSingleSession) Get() *SingleSession {
	return v.value
}

func (v *NullableSingleSession) Set(val *SingleSession) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleSession(val *SingleSession) *NullableSingleSession {
	return &NullableSingleSession{value: val, isSet: true}
}

func (v NullableSingleSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


