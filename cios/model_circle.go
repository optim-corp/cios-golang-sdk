/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// Circle struct for Circle
type Circle struct {
	Id *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Altitude *float32 `json:"altitude,omitempty"`
	RadiusM *float32 `json:"radius_m,omitempty"`
	Location *Location `json:"location,omitempty"`
	Labels *[]Label `json:"labels,omitempty"`
	Description *string `json:"description,omitempty"`
	DisplayInfo *[]DisplayInfo `json:"display_info,omitempty"`
	ResourceOwnerId *string `json:"resource_owner_id,omitempty"`
}

// NewCircle instantiates a new Circle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCircle() *Circle {
	this := Circle{}
	return &this
}

// NewCircleWithDefaults instantiates a new Circle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCircleWithDefaults() *Circle {
	this := Circle{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Circle) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Circle) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Circle) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Circle) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Circle) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Circle) SetName(v string) {
	o.Name = &v
}

// GetAltitude returns the Altitude field value if set, zero value otherwise.
func (o *Circle) GetAltitude() float32 {
	if o == nil || o.Altitude == nil {
		var ret float32
		return ret
	}
	return *o.Altitude
}

// GetAltitudeOk returns a tuple with the Altitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetAltitudeOk() (*float32, bool) {
	if o == nil || o.Altitude == nil {
		return nil, false
	}
	return o.Altitude, true
}

// HasAltitude returns a boolean if a field has been set.
func (o *Circle) HasAltitude() bool {
	if o != nil && o.Altitude != nil {
		return true
	}

	return false
}

// SetAltitude gets a reference to the given float32 and assigns it to the Altitude field.
func (o *Circle) SetAltitude(v float32) {
	o.Altitude = &v
}

// GetRadiusM returns the RadiusM field value if set, zero value otherwise.
func (o *Circle) GetRadiusM() float32 {
	if o == nil || o.RadiusM == nil {
		var ret float32
		return ret
	}
	return *o.RadiusM
}

// GetRadiusMOk returns a tuple with the RadiusM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetRadiusMOk() (*float32, bool) {
	if o == nil || o.RadiusM == nil {
		return nil, false
	}
	return o.RadiusM, true
}

// HasRadiusM returns a boolean if a field has been set.
func (o *Circle) HasRadiusM() bool {
	if o != nil && o.RadiusM != nil {
		return true
	}

	return false
}

// SetRadiusM gets a reference to the given float32 and assigns it to the RadiusM field.
func (o *Circle) SetRadiusM(v float32) {
	o.RadiusM = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Circle) GetLocation() Location {
	if o == nil || o.Location == nil {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetLocationOk() (*Location, bool) {
	if o == nil || o.Location == nil {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Circle) HasLocation() bool {
	if o != nil && o.Location != nil {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *Circle) SetLocation(v Location) {
	o.Location = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Circle) GetLabels() []Label {
	if o == nil || o.Labels == nil {
		var ret []Label
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetLabelsOk() (*[]Label, bool) {
	if o == nil || o.Labels == nil {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Circle) HasLabels() bool {
	if o != nil && o.Labels != nil {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []Label and assigns it to the Labels field.
func (o *Circle) SetLabels(v []Label) {
	o.Labels = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Circle) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Circle) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Circle) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayInfo returns the DisplayInfo field value if set, zero value otherwise.
func (o *Circle) GetDisplayInfo() []DisplayInfo {
	if o == nil || o.DisplayInfo == nil {
		var ret []DisplayInfo
		return ret
	}
	return *o.DisplayInfo
}

// GetDisplayInfoOk returns a tuple with the DisplayInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetDisplayInfoOk() (*[]DisplayInfo, bool) {
	if o == nil || o.DisplayInfo == nil {
		return nil, false
	}
	return o.DisplayInfo, true
}

// HasDisplayInfo returns a boolean if a field has been set.
func (o *Circle) HasDisplayInfo() bool {
	if o != nil && o.DisplayInfo != nil {
		return true
	}

	return false
}

// SetDisplayInfo gets a reference to the given []DisplayInfo and assigns it to the DisplayInfo field.
func (o *Circle) SetDisplayInfo(v []DisplayInfo) {
	o.DisplayInfo = &v
}

// GetResourceOwnerId returns the ResourceOwnerId field value if set, zero value otherwise.
func (o *Circle) GetResourceOwnerId() string {
	if o == nil || o.ResourceOwnerId == nil {
		var ret string
		return ret
	}
	return *o.ResourceOwnerId
}

// GetResourceOwnerIdOk returns a tuple with the ResourceOwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Circle) GetResourceOwnerIdOk() (*string, bool) {
	if o == nil || o.ResourceOwnerId == nil {
		return nil, false
	}
	return o.ResourceOwnerId, true
}

// HasResourceOwnerId returns a boolean if a field has been set.
func (o *Circle) HasResourceOwnerId() bool {
	if o != nil && o.ResourceOwnerId != nil {
		return true
	}

	return false
}

// SetResourceOwnerId gets a reference to the given string and assigns it to the ResourceOwnerId field.
func (o *Circle) SetResourceOwnerId(v string) {
	o.ResourceOwnerId = &v
}

func (o Circle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Altitude != nil {
		toSerialize["altitude"] = o.Altitude
	}
	if o.RadiusM != nil {
		toSerialize["radius_m"] = o.RadiusM
	}
	if o.Location != nil {
		toSerialize["location"] = o.Location
	}
	if o.Labels != nil {
		toSerialize["labels"] = o.Labels
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.DisplayInfo != nil {
		toSerialize["display_info"] = o.DisplayInfo
	}
	if o.ResourceOwnerId != nil {
		toSerialize["resource_owner_id"] = o.ResourceOwnerId
	}
	return json.Marshal(toSerialize)
}

type NullableCircle struct {
	value *Circle
	isSet bool
}

func (v NullableCircle) Get() *Circle {
	return v.value
}

func (v *NullableCircle) Set(val *Circle) {
	v.value = val
	v.isSet = true
}

func (v NullableCircle) IsSet() bool {
	return v.isSet
}

func (v *NullableCircle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCircle(val *Circle) *NullableCircle {
	return &NullableCircle{value: val, isSet: true}
}

func (v NullableCircle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCircle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


