/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SeriesDataLocationUnix struct for SeriesDataLocationUnix
type SeriesDataLocationUnix struct {
	Location NullableSeriesDataLocation `json:"location,omitempty"`
	// 計測値。送信可能なプロパティはcollectionによって異なる。 collectionごとの定義は[Available Collections](./docs/available-collections.html)を参照。  以下の場合はリクエスト不正となる。 - collectionに定義されていないプロパティがmeasurementsに含まれる場合 - measurementsのJSON Objectのサイズが350KB以上の場合
	Measurements *map[string]map[string]interface{} `json:"measurements,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
}

// NewSeriesDataLocationUnix instantiates a new SeriesDataLocationUnix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSeriesDataLocationUnix() *SeriesDataLocationUnix {
	this := SeriesDataLocationUnix{}
	return &this
}

// NewSeriesDataLocationUnixWithDefaults instantiates a new SeriesDataLocationUnix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSeriesDataLocationUnixWithDefaults() *SeriesDataLocationUnix {
	this := SeriesDataLocationUnix{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SeriesDataLocationUnix) GetLocation() SeriesDataLocation {
	if o == nil || o.Location.Get() == nil {
		var ret SeriesDataLocation
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SeriesDataLocationUnix) GetLocationOk() (*SeriesDataLocation, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *SeriesDataLocationUnix) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableSeriesDataLocation and assigns it to the Location field.
func (o *SeriesDataLocationUnix) SetLocation(v SeriesDataLocation) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *SeriesDataLocationUnix) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *SeriesDataLocationUnix) UnsetLocation() {
	o.Location.Unset()
}

// GetMeasurements returns the Measurements field value if set, zero value otherwise.
func (o *SeriesDataLocationUnix) GetMeasurements() map[string]map[string]interface{} {
	if o == nil || o.Measurements == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return *o.Measurements
}

// GetMeasurementsOk returns a tuple with the Measurements field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesDataLocationUnix) GetMeasurementsOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Measurements == nil {
		return nil, false
	}
	return o.Measurements, true
}

// HasMeasurements returns a boolean if a field has been set.
func (o *SeriesDataLocationUnix) HasMeasurements() bool {
	if o != nil && o.Measurements != nil {
		return true
	}

	return false
}

// SetMeasurements gets a reference to the given map[string]map[string]interface{} and assigns it to the Measurements field.
func (o *SeriesDataLocationUnix) SetMeasurements(v map[string]map[string]interface{}) {
	o.Measurements = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SeriesDataLocationUnix) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SeriesDataLocationUnix) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SeriesDataLocationUnix) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *SeriesDataLocationUnix) SetTimestamp(v string) {
	o.Timestamp = &v
}

func (o SeriesDataLocationUnix) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Measurements != nil {
		toSerialize["measurements"] = o.Measurements
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableSeriesDataLocationUnix struct {
	value *SeriesDataLocationUnix
	isSet bool
}

func (v NullableSeriesDataLocationUnix) Get() *SeriesDataLocationUnix {
	return v.value
}

func (v *NullableSeriesDataLocationUnix) Set(val *SeriesDataLocationUnix) {
	v.value = val
	v.isSet = true
}

func (v NullableSeriesDataLocationUnix) IsSet() bool {
	return v.isSet
}

func (v *NullableSeriesDataLocationUnix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSeriesDataLocationUnix(val *SeriesDataLocationUnix) *NullableSeriesDataLocationUnix {
	return &NullableSeriesDataLocationUnix{value: val, isSet: true}
}

func (v NullableSeriesDataLocationUnix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSeriesDataLocationUnix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


