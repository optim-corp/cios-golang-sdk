/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// DisplayInfo struct for DisplayInfo
type DisplayInfo struct {
	Name string `json:"name"`
	Description *string `json:"description,omitempty"`
	Language string `json:"language"`
	Script *string `json:"script,omitempty"`
	Region *string `json:"region,omitempty"`
	IsDefault bool `json:"is_default"`
}

// NewDisplayInfo instantiates a new DisplayInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisplayInfo(name string, language string, isDefault bool, ) *DisplayInfo {
	this := DisplayInfo{}
	this.Name = name
	this.Language = language
	this.IsDefault = isDefault
	return &this
}

// NewDisplayInfoWithDefaults instantiates a new DisplayInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisplayInfoWithDefaults() *DisplayInfo {
	this := DisplayInfo{}
	return &this
}

// GetName returns the Name field value
func (o *DisplayInfo) GetName() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DisplayInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DisplayInfo) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DisplayInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DisplayInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DisplayInfo) SetDescription(v string) {
	o.Description = &v
}

// GetLanguage returns the Language field value
func (o *DisplayInfo) GetLanguage() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *DisplayInfo) GetLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *DisplayInfo) SetLanguage(v string) {
	o.Language = v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *DisplayInfo) GetScript() string {
	if o == nil || o.Script == nil {
		var ret string
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayInfo) GetScriptOk() (*string, bool) {
	if o == nil || o.Script == nil {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *DisplayInfo) HasScript() bool {
	if o != nil && o.Script != nil {
		return true
	}

	return false
}

// SetScript gets a reference to the given string and assigns it to the Script field.
func (o *DisplayInfo) SetScript(v string) {
	o.Script = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *DisplayInfo) GetRegion() string {
	if o == nil || o.Region == nil {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DisplayInfo) GetRegionOk() (*string, bool) {
	if o == nil || o.Region == nil {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *DisplayInfo) HasRegion() bool {
	if o != nil && o.Region != nil {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *DisplayInfo) SetRegion(v string) {
	o.Region = &v
}

// GetIsDefault returns the IsDefault field value
func (o *DisplayInfo) GetIsDefault() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value
// and a boolean to check if the value has been set.
func (o *DisplayInfo) GetIsDefaultOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsDefault, true
}

// SetIsDefault sets field value
func (o *DisplayInfo) SetIsDefault(v bool) {
	o.IsDefault = v
}

func (o DisplayInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["language"] = o.Language
	}
	if o.Script != nil {
		toSerialize["script"] = o.Script
	}
	if o.Region != nil {
		toSerialize["region"] = o.Region
	}
	if true {
		toSerialize["is_default"] = o.IsDefault
	}
	return json.Marshal(toSerialize)
}

type NullableDisplayInfo struct {
	value *DisplayInfo
	isSet bool
}

func (v NullableDisplayInfo) Get() *DisplayInfo {
	return v.value
}

func (v *NullableDisplayInfo) Set(val *DisplayInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDisplayInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDisplayInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisplayInfo(val *DisplayInfo) *NullableDisplayInfo {
	return &NullableDisplayInfo{value: val, isSet: true}
}

func (v NullableDisplayInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisplayInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


