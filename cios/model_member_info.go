/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MemberInfo struct for MemberInfo
type MemberInfo struct {
	Id *string `json:"id,omitempty"`
	UserId *string `json:"user_id,omitempty"`
	Role *string `json:"role,omitempty"`
	Category *string `json:"category,omitempty"`
	Invited *bool `json:"invited,omitempty"`
	Tags *[]string `json:"tags,omitempty"`
	Profile *MemberInfoProfile `json:"profile,omitempty"`
}

// NewMemberInfo instantiates a new MemberInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemberInfo() *MemberInfo {
	this := MemberInfo{}
	return &this
}

// NewMemberInfoWithDefaults instantiates a new MemberInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemberInfoWithDefaults() *MemberInfo {
	this := MemberInfo{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MemberInfo) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MemberInfo) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MemberInfo) SetId(v string) {
	o.Id = &v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *MemberInfo) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *MemberInfo) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *MemberInfo) SetUserId(v string) {
	o.UserId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *MemberInfo) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *MemberInfo) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *MemberInfo) SetRole(v string) {
	o.Role = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *MemberInfo) GetCategory() string {
	if o == nil || o.Category == nil {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetCategoryOk() (*string, bool) {
	if o == nil || o.Category == nil {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *MemberInfo) HasCategory() bool {
	if o != nil && o.Category != nil {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *MemberInfo) SetCategory(v string) {
	o.Category = &v
}

// GetInvited returns the Invited field value if set, zero value otherwise.
func (o *MemberInfo) GetInvited() bool {
	if o == nil || o.Invited == nil {
		var ret bool
		return ret
	}
	return *o.Invited
}

// GetInvitedOk returns a tuple with the Invited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetInvitedOk() (*bool, bool) {
	if o == nil || o.Invited == nil {
		return nil, false
	}
	return o.Invited, true
}

// HasInvited returns a boolean if a field has been set.
func (o *MemberInfo) HasInvited() bool {
	if o != nil && o.Invited != nil {
		return true
	}

	return false
}

// SetInvited gets a reference to the given bool and assigns it to the Invited field.
func (o *MemberInfo) SetInvited(v bool) {
	o.Invited = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *MemberInfo) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *MemberInfo) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *MemberInfo) SetTags(v []string) {
	o.Tags = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *MemberInfo) GetProfile() MemberInfoProfile {
	if o == nil || o.Profile == nil {
		var ret MemberInfoProfile
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemberInfo) GetProfileOk() (*MemberInfoProfile, bool) {
	if o == nil || o.Profile == nil {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *MemberInfo) HasProfile() bool {
	if o != nil && o.Profile != nil {
		return true
	}

	return false
}

// SetProfile gets a reference to the given MemberInfoProfile and assigns it to the Profile field.
func (o *MemberInfo) SetProfile(v MemberInfoProfile) {
	o.Profile = &v
}

func (o MemberInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.Category != nil {
		toSerialize["category"] = o.Category
	}
	if o.Invited != nil {
		toSerialize["invited"] = o.Invited
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Profile != nil {
		toSerialize["profile"] = o.Profile
	}
	return json.Marshal(toSerialize)
}

type NullableMemberInfo struct {
	value *MemberInfo
	isSet bool
}

func (v NullableMemberInfo) Get() *MemberInfo {
	return v.value
}

func (v *NullableMemberInfo) Set(val *MemberInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberInfo(val *MemberInfo) *NullableMemberInfo {
	return &NullableMemberInfo{value: val, isSet: true}
}

func (v NullableMemberInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


