/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// DeviceMonitoring struct for DeviceMonitoring
type DeviceMonitoring struct {
	DeviceId string `json:"device_id"`
	Timestamp *string `json:"timestamp,omitempty"`
	ConnectionStatus *string `json:"connection_status,omitempty"`
	MonitoringStatus *string `json:"monitoring_status,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	Perfomance *DevicePerformance `json:"perfomance,omitempty"`
	ConnectedDeviceResults *[]ConnectedDeviceResult `json:"connected_device_results,omitempty"`
}

// NewDeviceMonitoring instantiates a new DeviceMonitoring object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceMonitoring(deviceId string, ) *DeviceMonitoring {
	this := DeviceMonitoring{}
	this.DeviceId = deviceId
	return &this
}

// NewDeviceMonitoringWithDefaults instantiates a new DeviceMonitoring object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceMonitoringWithDefaults() *DeviceMonitoring {
	this := DeviceMonitoring{}
	return &this
}

// GetDeviceId returns the DeviceId field value
func (o *DeviceMonitoring) GetDeviceId() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value
// and a boolean to check if the value has been set.
func (o *DeviceMonitoring) GetDeviceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DeviceId, true
}

// SetDeviceId sets field value
func (o *DeviceMonitoring) SetDeviceId(v string) {
	o.DeviceId = v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *DeviceMonitoring) GetTimestamp() string {
	if o == nil || o.Timestamp == nil {
		var ret string
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMonitoring) GetTimestampOk() (*string, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *DeviceMonitoring) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given string and assigns it to the Timestamp field.
func (o *DeviceMonitoring) SetTimestamp(v string) {
	o.Timestamp = &v
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *DeviceMonitoring) GetConnectionStatus() string {
	if o == nil || o.ConnectionStatus == nil {
		var ret string
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMonitoring) GetConnectionStatusOk() (*string, bool) {
	if o == nil || o.ConnectionStatus == nil {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *DeviceMonitoring) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus != nil {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given string and assigns it to the ConnectionStatus field.
func (o *DeviceMonitoring) SetConnectionStatus(v string) {
	o.ConnectionStatus = &v
}

// GetMonitoringStatus returns the MonitoringStatus field value if set, zero value otherwise.
func (o *DeviceMonitoring) GetMonitoringStatus() string {
	if o == nil || o.MonitoringStatus == nil {
		var ret string
		return ret
	}
	return *o.MonitoringStatus
}

// GetMonitoringStatusOk returns a tuple with the MonitoringStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMonitoring) GetMonitoringStatusOk() (*string, bool) {
	if o == nil || o.MonitoringStatus == nil {
		return nil, false
	}
	return o.MonitoringStatus, true
}

// HasMonitoringStatus returns a boolean if a field has been set.
func (o *DeviceMonitoring) HasMonitoringStatus() bool {
	if o != nil && o.MonitoringStatus != nil {
		return true
	}

	return false
}

// SetMonitoringStatus gets a reference to the given string and assigns it to the MonitoringStatus field.
func (o *DeviceMonitoring) SetMonitoringStatus(v string) {
	o.MonitoringStatus = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *DeviceMonitoring) GetErrorMessage() string {
	if o == nil || o.ErrorMessage == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMonitoring) GetErrorMessageOk() (*string, bool) {
	if o == nil || o.ErrorMessage == nil {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *DeviceMonitoring) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage != nil {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *DeviceMonitoring) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetPerfomance returns the Perfomance field value if set, zero value otherwise.
func (o *DeviceMonitoring) GetPerfomance() DevicePerformance {
	if o == nil || o.Perfomance == nil {
		var ret DevicePerformance
		return ret
	}
	return *o.Perfomance
}

// GetPerfomanceOk returns a tuple with the Perfomance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMonitoring) GetPerfomanceOk() (*DevicePerformance, bool) {
	if o == nil || o.Perfomance == nil {
		return nil, false
	}
	return o.Perfomance, true
}

// HasPerfomance returns a boolean if a field has been set.
func (o *DeviceMonitoring) HasPerfomance() bool {
	if o != nil && o.Perfomance != nil {
		return true
	}

	return false
}

// SetPerfomance gets a reference to the given DevicePerformance and assigns it to the Perfomance field.
func (o *DeviceMonitoring) SetPerfomance(v DevicePerformance) {
	o.Perfomance = &v
}

// GetConnectedDeviceResults returns the ConnectedDeviceResults field value if set, zero value otherwise.
func (o *DeviceMonitoring) GetConnectedDeviceResults() []ConnectedDeviceResult {
	if o == nil || o.ConnectedDeviceResults == nil {
		var ret []ConnectedDeviceResult
		return ret
	}
	return *o.ConnectedDeviceResults
}

// GetConnectedDeviceResultsOk returns a tuple with the ConnectedDeviceResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceMonitoring) GetConnectedDeviceResultsOk() (*[]ConnectedDeviceResult, bool) {
	if o == nil || o.ConnectedDeviceResults == nil {
		return nil, false
	}
	return o.ConnectedDeviceResults, true
}

// HasConnectedDeviceResults returns a boolean if a field has been set.
func (o *DeviceMonitoring) HasConnectedDeviceResults() bool {
	if o != nil && o.ConnectedDeviceResults != nil {
		return true
	}

	return false
}

// SetConnectedDeviceResults gets a reference to the given []ConnectedDeviceResult and assigns it to the ConnectedDeviceResults field.
func (o *DeviceMonitoring) SetConnectedDeviceResults(v []ConnectedDeviceResult) {
	o.ConnectedDeviceResults = &v
}

func (o DeviceMonitoring) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["device_id"] = o.DeviceId
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.ConnectionStatus != nil {
		toSerialize["connection_status"] = o.ConnectionStatus
	}
	if o.MonitoringStatus != nil {
		toSerialize["monitoring_status"] = o.MonitoringStatus
	}
	if o.ErrorMessage != nil {
		toSerialize["error_message"] = o.ErrorMessage
	}
	if o.Perfomance != nil {
		toSerialize["perfomance"] = o.Perfomance
	}
	if o.ConnectedDeviceResults != nil {
		toSerialize["connected_device_results"] = o.ConnectedDeviceResults
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceMonitoring struct {
	value *DeviceMonitoring
	isSet bool
}

func (v NullableDeviceMonitoring) Get() *DeviceMonitoring {
	return v.value
}

func (v *NullableDeviceMonitoring) Set(val *DeviceMonitoring) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceMonitoring) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceMonitoring) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceMonitoring(val *DeviceMonitoring) *NullableDeviceMonitoring {
	return &NullableDeviceMonitoring{value: val, isSet: true}
}

func (v NullableDeviceMonitoring) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceMonitoring) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


