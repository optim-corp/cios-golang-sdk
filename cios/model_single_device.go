/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// SingleDevice struct for SingleDevice
type SingleDevice struct {
	Device Device `json:"device"`
}

// NewSingleDevice instantiates a new SingleDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSingleDevice(device Device, ) *SingleDevice {
	this := SingleDevice{}
	this.Device = device
	return &this
}

// NewSingleDeviceWithDefaults instantiates a new SingleDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSingleDeviceWithDefaults() *SingleDevice {
	this := SingleDevice{}
	return &this
}

// GetDevice returns the Device field value
func (o *SingleDevice) GetDevice() Device {
	if o == nil  {
		var ret Device
		return ret
	}

	return o.Device
}

// GetDeviceOk returns a tuple with the Device field value
// and a boolean to check if the value has been set.
func (o *SingleDevice) GetDeviceOk() (*Device, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Device, true
}

// SetDevice sets field value
func (o *SingleDevice) SetDevice(v Device) {
	o.Device = v
}

func (o SingleDevice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["device"] = o.Device
	}
	return json.Marshal(toSerialize)
}

type NullableSingleDevice struct {
	value *SingleDevice
	isSet bool
}

func (v NullableSingleDevice) Get() *SingleDevice {
	return v.value
}

func (v *NullableSingleDevice) Set(val *SingleDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableSingleDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableSingleDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSingleDevice(val *SingleDevice) *NullableSingleDevice {
	return &NullableSingleDevice{value: val, isSet: true}
}

func (v NullableSingleDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSingleDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


