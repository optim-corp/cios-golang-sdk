/*
 * Collection utility of CreatedByClient Struct
 *
 * Generated by: Go Streamer (https://gitlab.tokyo.optim.co.jp/mrohchi/tool/go-struct-stream-generator)
 * Author https://gitlab.tokyo.optim.co.jp/kazuhiro.seida
 */

package cios

import (
	"fmt"
	"math"
	"reflect"
	"sort"
)

type CreatedByClientStream []CreatedByClient

func CreatedByClientStreamOf(arg ...CreatedByClient) CreatedByClientStream {
	return arg
}
func CreatedByClientStreamFrom(arg []CreatedByClient) CreatedByClientStream {
	return arg
}
func CreateCreatedByClientStream(arg ...CreatedByClient) *CreatedByClientStream {
	tmp := CreatedByClientStreamOf(arg...)
	return &tmp
}
func GenerateCreatedByClientStream(arg []CreatedByClient) *CreatedByClientStream {
	tmp := CreatedByClientStreamFrom(arg)
	return &tmp
}

func (self *CreatedByClientStream) Add(arg CreatedByClient) *CreatedByClientStream {
	return self.AddAll(arg)
}
func (self *CreatedByClientStream) AddAll(arg ...CreatedByClient) *CreatedByClientStream {
	*self = append(*self, arg...)
	return self
}
func (self *CreatedByClientStream) AddSafe(arg *CreatedByClient) *CreatedByClientStream {
	if arg != nil {
		self.Add(*arg)
	}
	return self
}
func (self *CreatedByClientStream) Aggregate(fn func(CreatedByClient, CreatedByClient) CreatedByClient) *CreatedByClientStream {
	result := CreatedByClientStreamOf()
	self.ForEach(func(v CreatedByClient, i int) {
		if i == 0 {
			result.Add(fn(CreatedByClient{}, v))
		} else {
			result.Add(fn(result[i-1], v))
		}
	})
	*self = result
	return self
}
func (self *CreatedByClientStream) AllMatch(fn func(CreatedByClient, int) bool) bool {
	for i, v := range *self {
		if !fn(v, i) {
			return false
		}
	}
	return true
}
func (self *CreatedByClientStream) AnyMatch(fn func(CreatedByClient, int) bool) bool {
	for i, v := range *self {
		if fn(v, i) {
			return true
		}
	}
	return false
}
func (self *CreatedByClientStream) Clone() *CreatedByClientStream {
	temp := make([]CreatedByClient, self.Len())
	copy(temp, *self)
	return (*CreatedByClientStream)(&temp)
}
func (self *CreatedByClientStream) Copy() *CreatedByClientStream {
	return self.Clone()
}
func (self *CreatedByClientStream) Concat(arg []CreatedByClient) *CreatedByClientStream {
	return self.AddAll(arg...)
}
func (self *CreatedByClientStream) Contains(arg CreatedByClient) bool {
	return self.FindIndex(func(_arg CreatedByClient, index int) bool { return reflect.DeepEqual(_arg, arg) }) != -1
}
func (self *CreatedByClientStream) Clean() *CreatedByClientStream {
	*self = CreatedByClientStreamOf()
	return self
}
func (self *CreatedByClientStream) Delete(index int) *CreatedByClientStream {
	return self.DeleteRange(index, index)
}
func (self *CreatedByClientStream) DeleteRange(startIndex, endIndex int) *CreatedByClientStream {
	*self = append((*self)[:startIndex], (*self)[endIndex+1:]...)
	return self
}
func (self *CreatedByClientStream) Distinct() *CreatedByClientStream {
	caches := map[string]bool{}
	result := CreatedByClientStreamOf()
	for _, v := range *self {
		key := fmt.Sprintf("%+v", v)
		if f, ok := caches[key]; ok {
			if !f {
				result = append(result, v)
			}
		} else if caches[key] = true; !f {
			result = append(result, v)
		}

	}
	*self = result
	return self
}
func (self *CreatedByClientStream) Each(fn func(CreatedByClient)) *CreatedByClientStream {
	for _, v := range *self {
		fn(v)
	}
	return self
}
func (self *CreatedByClientStream) EachRight(fn func(CreatedByClient)) *CreatedByClientStream {
	for i := self.Len() - 1; i >= 0; i-- {
		fn(*self.Get(i))
	}
	return self
}
func (self *CreatedByClientStream) Equals(arr []CreatedByClient) bool {
	if (*self == nil) != (arr == nil) || len(*self) != len(arr) {
		return false
	}
	for i := range *self {
		if !reflect.DeepEqual((*self)[i], arr[i]) {
			return false
		}
	}
	return true
}
func (self *CreatedByClientStream) Filter(fn func(CreatedByClient, int) bool) *CreatedByClientStream {
	result := CreatedByClientStreamOf()
	for i, v := range *self {
		if fn(v, i) {
			result.Add(v)
		}
	}
	*self = result
	return self
}
func (self *CreatedByClientStream) FilterSlim(fn func(CreatedByClient, int) bool) *CreatedByClientStream {
	result := CreatedByClientStreamOf()
	caches := map[string]bool{}
	for i, v := range *self {
		key := fmt.Sprintf("%+v", v)
		if f, ok := caches[key]; ok {
			if f {
				result.Add(v)
			}
		} else if caches[key] = fn(v, i); caches[key] {
			result.Add(v)

		}
	}
	*self = result
	return self
}
func (self *CreatedByClientStream) Find(fn func(CreatedByClient, int) bool) *CreatedByClient {
	if i := self.FindIndex(fn); -1 != i {
		tmp := (*self)[i]
		return &tmp
	}
	return nil
}
func (self *CreatedByClientStream) FindOr(fn func(CreatedByClient, int) bool, or CreatedByClient) CreatedByClient {
	if v := self.Find(fn); v != nil {
		return *v
	}
	return or
}
func (self *CreatedByClientStream) FindIndex(fn func(CreatedByClient, int) bool) int {
	if self == nil {
		return -1
	}
	for i, v := range *self {
		if fn(v, i) {
			return i
		}
	}
	return -1
}
func (self *CreatedByClientStream) First() *CreatedByClient {
	return self.Get(0)
}
func (self *CreatedByClientStream) FirstOr(arg CreatedByClient) CreatedByClient {
	if v := self.Get(0); v != nil {
		return *v
	}
	return arg
}
func (self *CreatedByClientStream) ForEach(fn func(CreatedByClient, int)) *CreatedByClientStream {
	for i, v := range *self {
		fn(v, i)
	}
	return self
}
func (self *CreatedByClientStream) ForEachRight(fn func(CreatedByClient, int)) *CreatedByClientStream {
	for i := self.Len() - 1; i >= 0; i-- {
		fn(*self.Get(i), i)
	}
	return self
}
func (self *CreatedByClientStream) GroupBy(fn func(CreatedByClient, int) string) map[string][]CreatedByClient {
	m := map[string][]CreatedByClient{}
	for i, v := range self.Val() {
		key := fn(v, i)
		m[key] = append(m[key], v)
	}
	return m
}
func (self *CreatedByClientStream) GroupByValues(fn func(CreatedByClient, int) string) [][]CreatedByClient {
	var tmp [][]CreatedByClient
	for _, v := range self.GroupBy(fn) {
		tmp = append(tmp, v)
	}
	return tmp
}
func (self *CreatedByClientStream) IndexOf(arg CreatedByClient) int {
	for index, _arg := range *self {
		if reflect.DeepEqual(_arg, arg) {
			return index
		}
	}
	return -1
}
func (self *CreatedByClientStream) IsEmpty() bool {
	return self.Len() == 0
}
func (self *CreatedByClientStream) IsPreset() bool {
	return !self.IsEmpty()
}
func (self *CreatedByClientStream) Last() *CreatedByClient {
	return self.Get(self.Len() - 1)
}
func (self *CreatedByClientStream) LastOr(arg CreatedByClient) CreatedByClient {
	if v := self.Last(); v != nil {
		return *v
	}
	return arg
}
func (self *CreatedByClientStream) Len() int {
	if self == nil {
		return 0
	}
	return len(*self)
}
func (self *CreatedByClientStream) Limit(limit int) *CreatedByClientStream {
	self.Slice(0, limit)
	return self
}

func (self *CreatedByClientStream) Map(fn func(CreatedByClient, int) interface{}) interface{} {
	_array := make([]interface{}, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2Int(fn func(CreatedByClient, int) int) []int {
	_array := make([]int, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2Int32(fn func(CreatedByClient, int) int32) []int32 {
	_array := make([]int32, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2Int64(fn func(CreatedByClient, int) int64) []int64 {
	_array := make([]int64, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2Float32(fn func(CreatedByClient, int) float32) []float32 {
	_array := make([]float32, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2Float64(fn func(CreatedByClient, int) float64) []float64 {
	_array := make([]float64, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2Bool(fn func(CreatedByClient, int) bool) []bool {
	_array := make([]bool, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2Bytes(fn func(CreatedByClient, int) []byte) [][]byte {
	_array := make([][]byte, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Map2String(fn func(CreatedByClient, int) string) []string {
	_array := make([]string, 0, len(*self))
	for i, v := range *self {
		_array = append(_array, fn(v, i))
	}
	return _array
}
func (self *CreatedByClientStream) Max(fn func(CreatedByClient, int) float64) *CreatedByClient {
	f := self.Get(0)
	if f == nil {
		return nil
	}
	m := fn(*f, 0)
	index := 0
	for i := 1; i < self.Len(); i++ {
		v := fn(*self.Get(i), i)
		m = math.Max(m, v)
		if m == v {
			index = i
		}
	}
	return self.Get(index)
}
func (self *CreatedByClientStream) Min(fn func(CreatedByClient, int) float64) *CreatedByClient {
	f := self.Get(0)
	if f == nil {
		return nil
	}
	m := fn(*f, 0)
	index := 0
	for i := 1; i < self.Len(); i++ {
		v := fn(*self.Get(i), i)
		m = math.Min(m, v)
		if m == v {
			index = i
		}
	}
	return self.Get(index)
}
func (self *CreatedByClientStream) NoneMatch(fn func(CreatedByClient, int) bool) bool {
	return !self.AnyMatch(fn)
}
func (self *CreatedByClientStream) Get(index int) *CreatedByClient {
	if self.Len() > index && index >= 0 {
		tmp := (*self)[index]
		return &tmp
	}
	return nil
}
func (self *CreatedByClientStream) GetOr(index int, arg CreatedByClient) CreatedByClient {
	if v := self.Get(index); v != nil {
		return *v
	}
	return arg
}
func (self *CreatedByClientStream) Peek(fn func(*CreatedByClient, int)) *CreatedByClientStream {
	for i, v := range *self {
		fn(&v, i)
		self.Set(i, v)
	}
	return self
}


func (self *CreatedByClientStream) Reduce(fn func(CreatedByClient, CreatedByClient, int) CreatedByClient) *CreatedByClientStream {
	return self.ReduceInit(fn, CreatedByClient{})
}
func (self *CreatedByClientStream) ReduceInit(fn func(CreatedByClient, CreatedByClient, int) CreatedByClient, initialValue CreatedByClient) *CreatedByClientStream {
	result := CreatedByClientStreamOf()
	self.ForEach(func(v CreatedByClient, i int) {
		if i == 0 {
			result.Add(fn(initialValue, v, i))
		} else {
			result.Add(fn(result[i-1], v, i))
		}
	})
	*self = result
	return self
}
func (self *CreatedByClientStream) ReduceInterface(fn func(interface{}, CreatedByClient, int) interface{}) []interface{} {
	result := []interface{}{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn(CreatedByClient{}, v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) ReduceString(fn func(string, CreatedByClient, int) string) []string {
	result := []string{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn("", v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) ReduceInt(fn func(int, CreatedByClient, int) int) []int {
	result := []int{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn(0, v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) ReduceInt32(fn func(int32, CreatedByClient, int) int32) []int32 {
	result := []int32{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn(0, v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) ReduceInt64(fn func(int64, CreatedByClient, int) int64) []int64 {
	result := []int64{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn(0, v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) ReduceFloat32(fn func(float32, CreatedByClient, int) float32) []float32 {
	result := []float32{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn(0.0, v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) ReduceFloat64(fn func(float64, CreatedByClient, int) float64) []float64 {
	result := []float64{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn(0.0, v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) ReduceBool(fn func(bool, CreatedByClient, int) bool) []bool {
	result := []bool{}
	for i, v := range *self {
		if i == 0 {
			result = append(result, fn(false, v, i))
		} else {
			result = append(result, fn(result[i-1], v, i))
		}
	}
	return result
}
func (self *CreatedByClientStream) Reverse() *CreatedByClientStream {
	for i, j := 0, self.Len()-1; i < j; i, j = i+1, j-1 {
		(*self)[i], (*self)[j] = (*self)[j], (*self)[i]
	}
	return self
}
func (self *CreatedByClientStream) Replace(fn func(CreatedByClient, int) CreatedByClient) *CreatedByClientStream {
	return self.ForEach(func(v CreatedByClient, i int) { self.Set(i, fn(v, i)) })
}
func (self *CreatedByClientStream) Select(fn func(CreatedByClient) interface{}) interface{} {
	_array := make([]interface{}, 0, len(*self))
	for _, v := range *self {
		_array = append(_array, fn(v))
	}
	return _array
}
func (self *CreatedByClientStream) Set(index int, val CreatedByClient) *CreatedByClientStream {
	if len(*self) > index && index >= 0 {
		(*self)[index] = val
	}
	return self
}
func (self *CreatedByClientStream) Skip(skip int) *CreatedByClientStream {
	return self.Slice(skip, self.Len()-skip)
}
func (self *CreatedByClientStream) SkippingEach(fn func(CreatedByClient, int) int) *CreatedByClientStream {
	for i := 0; i < self.Len(); i++ {
		skip := fn(*self.Get(i), i)
		i += skip
	}
	return self
}
func (self *CreatedByClientStream) Slice(startIndex, n int) *CreatedByClientStream {
	if last := startIndex + n; len(*self)-1 < startIndex || last < 0 || startIndex < 0 {
		*self = []CreatedByClient{}
	} else if len(*self) < last {
		*self = (*self)[startIndex:len(*self)]
	} else {
		*self = (*self)[startIndex:last]
	}
	return self
}
func (self *CreatedByClientStream) Sort(fn func(i, j int) bool) *CreatedByClientStream {
	sort.SliceStable(*self, fn)
	return self
}

func (self *CreatedByClientStream) Tail() *CreatedByClient {
	return self.Last()
}
func (self *CreatedByClientStream) TailOr(arg CreatedByClient) CreatedByClient {
	return self.LastOr(arg)
}
func (self *CreatedByClientStream) ToList() []CreatedByClient {
	return self.Val()
}
func (self *CreatedByClientStream) Unique() *CreatedByClientStream {
	return self.Distinct()
}
func (self *CreatedByClientStream) Val() []CreatedByClient {
	if self == nil {
		return []CreatedByClient{}
	}
	return *self.Copy()
}
func (self *CreatedByClientStream) While(fn func(CreatedByClient, int) bool) *CreatedByClientStream {
	for i, v := range self.Val() {
		if !fn(v, i) {
			break
		}
	}
	return self
}
func (self *CreatedByClientStream) Where(fn func(CreatedByClient) bool) *CreatedByClientStream {
	result := CreatedByClientStreamOf()
	for _, v := range *self {
		if fn(v) {
			result.Add(v)
		}
	}
	*self = result
	return self
}
func (self *CreatedByClientStream) WhereSlim(fn func(CreatedByClient) bool) *CreatedByClientStream {
	result := CreatedByClientStreamOf()
	caches := map[string]bool{}
	for _, v := range *self {
		key := fmt.Sprintf("%+v", v)
		if f, ok := caches[key]; ok {
			if f {
				result.Add(v)
			}
		} else if caches[key] = fn(v); caches[key] {
			result.Add(v)
		}
	}
	*self = result
	return self
}
