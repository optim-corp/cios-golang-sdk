/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleDevicePolicy struct for MultipleDevicePolicy
type MultipleDevicePolicy struct {
	Total int64 `json:"total"`
	Policies []DevicePolicy `json:"policies"`
}

// NewMultipleDevicePolicy instantiates a new MultipleDevicePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleDevicePolicy(total int64, policies []DevicePolicy, ) *MultipleDevicePolicy {
	this := MultipleDevicePolicy{}
	this.Total = total
	this.Policies = policies
	return &this
}

// NewMultipleDevicePolicyWithDefaults instantiates a new MultipleDevicePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleDevicePolicyWithDefaults() *MultipleDevicePolicy {
	this := MultipleDevicePolicy{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleDevicePolicy) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleDevicePolicy) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleDevicePolicy) SetTotal(v int64) {
	o.Total = v
}

// GetPolicies returns the Policies field value
func (o *MultipleDevicePolicy) GetPolicies() []DevicePolicy {
	if o == nil  {
		var ret []DevicePolicy
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
func (o *MultipleDevicePolicy) GetPoliciesOk() (*[]DevicePolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Policies, true
}

// SetPolicies sets field value
func (o *MultipleDevicePolicy) SetPolicies(v []DevicePolicy) {
	o.Policies = v
}

func (o MultipleDevicePolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["policies"] = o.Policies
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleDevicePolicy struct {
	value *MultipleDevicePolicy
	isSet bool
}

func (v NullableMultipleDevicePolicy) Get() *MultipleDevicePolicy {
	return v.value
}

func (v *NullableMultipleDevicePolicy) Set(val *MultipleDevicePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleDevicePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleDevicePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleDevicePolicy(val *MultipleDevicePolicy) *NullableMultipleDevicePolicy {
	return &NullableMultipleDevicePolicy{value: val, isSet: true}
}

func (v NullableMultipleDevicePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleDevicePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


