/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleLifeCycle struct for MultipleLifeCycle
type MultipleLifeCycle struct {
	Total int64 `json:"total"`
	Lifecycles []LifeCycle `json:"lifecycles"`
}

// NewMultipleLifeCycle instantiates a new MultipleLifeCycle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleLifeCycle(total int64, lifecycles []LifeCycle, ) *MultipleLifeCycle {
	this := MultipleLifeCycle{}
	this.Total = total
	this.Lifecycles = lifecycles
	return &this
}

// NewMultipleLifeCycleWithDefaults instantiates a new MultipleLifeCycle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleLifeCycleWithDefaults() *MultipleLifeCycle {
	this := MultipleLifeCycle{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleLifeCycle) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleLifeCycle) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleLifeCycle) SetTotal(v int64) {
	o.Total = v
}

// GetLifecycles returns the Lifecycles field value
func (o *MultipleLifeCycle) GetLifecycles() []LifeCycle {
	if o == nil  {
		var ret []LifeCycle
		return ret
	}

	return o.Lifecycles
}

// GetLifecyclesOk returns a tuple with the Lifecycles field value
// and a boolean to check if the value has been set.
func (o *MultipleLifeCycle) GetLifecyclesOk() (*[]LifeCycle, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Lifecycles, true
}

// SetLifecycles sets field value
func (o *MultipleLifeCycle) SetLifecycles(v []LifeCycle) {
	o.Lifecycles = v
}

func (o MultipleLifeCycle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["lifecycles"] = o.Lifecycles
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleLifeCycle struct {
	value *MultipleLifeCycle
	isSet bool
}

func (v NullableMultipleLifeCycle) Get() *MultipleLifeCycle {
	return v.value
}

func (v *NullableMultipleLifeCycle) Set(val *MultipleLifeCycle) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleLifeCycle) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleLifeCycle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleLifeCycle(val *MultipleLifeCycle) *NullableMultipleLifeCycle {
	return &NullableMultipleLifeCycle{value: val, isSet: true}
}

func (v NullableMultipleLifeCycle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleLifeCycle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


