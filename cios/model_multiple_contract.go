/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// MultipleContract struct for MultipleContract
type MultipleContract struct {
	Total int64 `json:"total"`
	Contracts []Contract `json:"contracts"`
}

// NewMultipleContract instantiates a new MultipleContract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleContract(total int64, contracts []Contract, ) *MultipleContract {
	this := MultipleContract{}
	this.Total = total
	this.Contracts = contracts
	return &this
}

// NewMultipleContractWithDefaults instantiates a new MultipleContract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleContractWithDefaults() *MultipleContract {
	this := MultipleContract{}
	return &this
}

// GetTotal returns the Total field value
func (o *MultipleContract) GetTotal() int64 {
	if o == nil  {
		var ret int64
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *MultipleContract) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *MultipleContract) SetTotal(v int64) {
	o.Total = v
}

// GetContracts returns the Contracts field value
func (o *MultipleContract) GetContracts() []Contract {
	if o == nil  {
		var ret []Contract
		return ret
	}

	return o.Contracts
}

// GetContractsOk returns a tuple with the Contracts field value
// and a boolean to check if the value has been set.
func (o *MultipleContract) GetContractsOk() (*[]Contract, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Contracts, true
}

// SetContracts sets field value
func (o *MultipleContract) SetContracts(v []Contract) {
	o.Contracts = v
}

func (o MultipleContract) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["total"] = o.Total
	}
	if true {
		toSerialize["contracts"] = o.Contracts
	}
	return json.Marshal(toSerialize)
}

type NullableMultipleContract struct {
	value *MultipleContract
	isSet bool
}

func (v NullableMultipleContract) Get() *MultipleContract {
	return v.value
}

func (v *NullableMultipleContract) Set(val *MultipleContract) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleContract) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleContract(val *MultipleContract) *NullableMultipleContract {
	return &NullableMultipleContract{value: val, isSet: true}
}

func (v NullableMultipleContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


