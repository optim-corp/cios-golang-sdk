/*
 * Cios Openapi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cios

import (
	"encoding/json"
)

// DataStoreChannel struct for DataStoreChannel
type DataStoreChannel struct {
	Id *string `json:"id,omitempty"`
	DataExist *bool `json:"data_exist,omitempty"`
	Stats *DataStoreChannelStats `json:"stats,omitempty"`
}

// NewDataStoreChannel instantiates a new DataStoreChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStoreChannel() *DataStoreChannel {
	this := DataStoreChannel{}
	return &this
}

// NewDataStoreChannelWithDefaults instantiates a new DataStoreChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStoreChannelWithDefaults() *DataStoreChannel {
	this := DataStoreChannel{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DataStoreChannel) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreChannel) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DataStoreChannel) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DataStoreChannel) SetId(v string) {
	o.Id = &v
}

// GetDataExist returns the DataExist field value if set, zero value otherwise.
func (o *DataStoreChannel) GetDataExist() bool {
	if o == nil || o.DataExist == nil {
		var ret bool
		return ret
	}
	return *o.DataExist
}

// GetDataExistOk returns a tuple with the DataExist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreChannel) GetDataExistOk() (*bool, bool) {
	if o == nil || o.DataExist == nil {
		return nil, false
	}
	return o.DataExist, true
}

// HasDataExist returns a boolean if a field has been set.
func (o *DataStoreChannel) HasDataExist() bool {
	if o != nil && o.DataExist != nil {
		return true
	}

	return false
}

// SetDataExist gets a reference to the given bool and assigns it to the DataExist field.
func (o *DataStoreChannel) SetDataExist(v bool) {
	o.DataExist = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *DataStoreChannel) GetStats() DataStoreChannelStats {
	if o == nil || o.Stats == nil {
		var ret DataStoreChannelStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataStoreChannel) GetStatsOk() (*DataStoreChannelStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *DataStoreChannel) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given DataStoreChannelStats and assigns it to the Stats field.
func (o *DataStoreChannel) SetStats(v DataStoreChannelStats) {
	o.Stats = &v
}

func (o DataStoreChannel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DataExist != nil {
		toSerialize["data_exist"] = o.DataExist
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	return json.Marshal(toSerialize)
}

type NullableDataStoreChannel struct {
	value *DataStoreChannel
	isSet bool
}

func (v NullableDataStoreChannel) Get() *DataStoreChannel {
	return v.value
}

func (v *NullableDataStoreChannel) Set(val *DataStoreChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStoreChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStoreChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStoreChannel(val *DataStoreChannel) *NullableDataStoreChannel {
	return &NullableDataStoreChannel{value: val, isSet: true}
}

func (v NullableDataStoreChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStoreChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


